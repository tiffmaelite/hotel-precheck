CREATE TABLE BILLINGS
(
  ID SERIAL,
  BILLINGSTYPE_ID INTEGER,
  NBROOMS INT NOT NULL,
  BOOKING_ID INTEGER,
  BILLINGADDRESS_ID INTEGER NOT NULL,
  NBADULTS INTEGER DEFAULT 0,
  NBCHILDREN INTEGER DEFAULT 0,
  ARRIVINGDATE DATE NOT NULL,
  DEPARTUREDATE DATE NOT NULL,
  EXPECTEDDEPARTUREDATE DATE,
  ISCLOSED BOOLEAN DEFAULT '0' NOT NULL,
  NOTE VARCHAR(255),
  CONSTRAINT PK_BILLINGS_ID PRIMARY KEY (ID),
  CONSTRAINT CK_POS_BILLINGS_NBADULTS CHECK (NBADULTS >= 0),
  CONSTRAINT CK_GREA_BILLINGS_EXDEPARRDATE CHECK (EXPECTEDDEPARTUREDATE >= ARRIVINGDATE),
  CONSTRAINT CK_GREA_BILLINGS_DEPARRDATE CHECK (DEPARTUREDATE >= ARRIVINGDATE)
) WITH (autovacuum_enabled = 'true', autovacuum_vacuum_threshold = 5);

--suppress_redundant_updates_trigger(); incompatible with upserts!!!
--CREATE TRIGGER z__minupdate_billings
--BEFORE UPDATE ON billings
--FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();

--ALTER TABLE BILLINGS ADD CONSTRAINT FK_BILLINGS_ADDRESS FOREIGN KEY (BILLINGADDRESS_ID) REFERENCES ADDRESSES_ARCHIVE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,

CREATE OR REPLACE FUNCTION  fkbillingsreferencesaddressesarchives() RETURNS TRIGGER AS $$
BEGIN
 IF (NOT  EXISTS (SELECT 1 FROM ADDRESSES_ARCHIVE WHERE ID = NEW.BILLINGADDRESS_ID)) THEN
RAISE EXCEPTION 'Foreign key exception!';
END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tr_fkbillingsreferencesaddressesarchives BEFORE INSERT OR UPDATE ON billings
FOR EACH ROW
EXECUTE PROCEDURE fkbillingsreferencesaddressesarchives();



CREATE TABLE TRAINING_BILLINGS
(
  ID SERIAL,
  BILLINGSTYPE_ID INTEGER,
  NBROOMS INT NOT NULL,
  BOOKING_ID INTEGER,
  BILLINGADDRESS_ID INTEGER NOT NULL,
  NBADULTS INTEGER DEFAULT 0,
  NBCHILDREN INTEGER DEFAULT 0,
  ARRIVINGDATE DATE NOT NULL,
  DEPARTUREDATE DATE NOT NULL,
  EXPECTEDDEPARTUREDATE DATE,
  ISCLOSED BOOLEAN DEFAULT '0' NOT NULL,
  NOTE VARCHAR(255),
  CONSTRAINT PK_TRAININGBILLINGS_ID PRIMARY KEY (ID),
  CONSTRAINT CK_POS_TRAININGBILLINGS_NBADULTS CHECK (NBADULTS >= 0),
  CONSTRAINT CK_GREA_TRAININGBILLINGS_EXDEPARRDATE CHECK (EXPECTEDDEPARTUREDATE >= ARRIVINGDATE),
  CONSTRAINT CK_GREA_TRAININGBILLINGS_DEPARRDATE CHECK (DEPARTUREDATE >= ARRIVINGDATE)
) WITH (autovacuum_enabled = 'true', autovacuum_vacuum_threshold = 5);

--suppress_redundant_updates_trigger(); incompatible with upserts!!!
--CREATE TRIGGER z__minupdate_billings
--BEFORE UPDATE ON billings
--FOR EACH ROW EXECUTE PROCEDURE suppress_redundant_updates_trigger();

--ALTER TABLE TRAINING_BILLINGS ADD CONSTRAINT FK_TRAININGBILLINGS_ADDRESS FOREIGN KEY (BILLINGADDRESS_ID) REFERENCES ADDRESSES_ARCHIVE (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,

CREATE OR REPLACE FUNCTION  fktrainingbillingsreferencesaddressesarchives() RETURNS TRIGGER AS $$
BEGIN
IF (NOT  EXISTS (SELECT 1 FROM ADDRESSES_ARCHIVE WHERE ID = NEW.BILLINGADDRESS_ID)) THEN
RAISE EXCEPTION 'Foreign key exception!';
END IF;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tr_fktrainingbillingsreferencesaddressesarchives BEFORE INSERT OR UPDATE ON training_billings
FOR EACH ROW
EXECUTE PROCEDURE fktrainingbillingsreferencesaddressesarchives();

