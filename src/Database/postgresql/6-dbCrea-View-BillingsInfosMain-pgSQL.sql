CREATE VIEW BILLINGSINFOS AS
  SELECT
	BILLINGS.ID AS ID,
	CLIENTS.NAME AS CLIENT,
	ROOMDESC,
	CAST((CASE WHEN BILLINGS.NBADULTS IS NULL THEN 0 WHEN BILLINGS.NBCHILDREN IS NULL THEN 0 ELSE CAST(CAST(BILLINGS.NBADULTS AS INTEGER)+CAST(BILLINGS.NBCHILDREN AS INTEGER) AS INTEGER) END) AS INTEGER) AS NBPEOPLE,
	BILLINGS.ARRIVINGDATE AS ARRIVINGDATE,
	BILLINGS.DEPARTUREDATE AS DEPARTUREDATE,
	BILLINGS.EXPECTEDDEPARTUREDATE AS EXPECTEDDEPARTUREDATE,
	BILLINGSTYPES.LABEL AS TYPE
  FROM BILLINGS
  LEFT JOIN ROOMSOCCUPATIONS ON ROOMSOCCUPATIONS.BILLING_ID = BILLINGS.ID
  LEFT JOIN (
	  SELECT
		ROOMS.ID,
		(ROOMS.NUMBER || '(' || ROOMSTYPES.LABEL || ')') AS ROOMDESC
	  FROM ROOMS
	  LEFT JOIN ROOMSTYPES ON ROOMS.ROOMTYPE_ID = ROOMSTYPES.ID
	) AS R ON R.ID = ROOMSOCCUPATIONS.ROOM_ID
  LEFT JOIN BILLINGSGROUPS ON BILLINGSGROUPS.BILLING_ID = BILLINGS.ID
  LEFT JOIN BILLINGSCLIENTS ON BILLINGSCLIENTS.BILLING_ID = BILLINGS.ID
  LEFT JOIN CLIENTS_ARCHIVE AS CLIENTS ON CLIENTS.ID = BILLINGSCLIENTS.CLIENT_ID
  LEFT JOIN GROUPS_ARCHIVE AS GROUPS ON GROUPS.ID = BILLINGSGROUPS.GROUP_ID
  LEFT JOIN BILLINGSTYPES ON BILLINGSTYPES.ID = BILLINGS.BILLINGSTYPE_ID
  WHERE BILLINGS.ISCLOSED = '0'
  ORDER BY BILLINGS.ARRIVINGDATE;
--WITH CASCADED CHECK OPTION;

CREATE OR REPLACE FUNCTION billingsinfos_up_del()
RETURNS TRIGGER
AS $$
   BEGIN
IF TG_OP = 'UPDATE' THEN
	  SELECT genupsert_billings(hstore(ARRAY[['ARRIVINGDATE','new.ARRIVINGDATE'],['DEPARTUREDATE','new.DEPARTUREDATE'],['EXPECTEDDEPARTUREDATE','new.EXPECTEDDEPARTUREDATE'],['BILLINGSTYPE_ID','(SELECT ID FROM BILLINGSTYPES WHERE LABEL=NEW.TYPE)'],['id','new.id']]));
	  --UPDATE billings SET ARRIVINGDATE=new.ARRIVINGDATE, DEPARTUREDATE=new.DEPARTUREDATE, EXPECTEDDEPARTUREDATE=new.EXPECTEDDEPARTUREDATE, BILLINGSTYPE_ID=(SELECT ID FROM BILLINGSTYPES WHERE LABEL=NEW.TYPE) WHERE ID=new.ID;

	  UPDATE billingsclients SET CLIENT_ID=(SELECT ID FROM CLIENTS_ARCHIVE WHERE NAME=NEW.CLIENT) WHERE billing_id=new.id;

	  ELSIF TG_OP = 'DELETE' THEN
	UPDATE billings SET ISCLOSED='1' WHERE ID=old.ID;
	   RETURN NULL;

	  END IF;
	  RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tr_changebillingsinfos
	INSTEAD OF UPDATE OR DELETE ON BILLINGSINFOS
	FOR EACH ROW EXECUTE PROCEDURE billingsinfos_up_del();
