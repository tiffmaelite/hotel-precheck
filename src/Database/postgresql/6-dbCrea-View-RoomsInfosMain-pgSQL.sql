CREATE VIEW ROOMSINFOS AS
  SELECT
	ROOMS.ID AS ID,
	ROOMS.NUMBER AS NUMBER,
	ROOMS.FLOOR AS FLOOR,
	ROOMSTYPE_ID,
	ROOMSTYPES.LABEL AS TYPE,
	ROOMSTYPES.DESCRIPTION AS DESCRIPTION,
	ROOMSTYPES.PRICEMIN AS PRICEMIN,
	ROOMSTYPES.PRICEMAX AS PRICEMAX,
	(CASE B.ISAVAILABLE WHEN '1' THEN (CASE ROOMS.ISCLEANED WHEN '1' THEN '1' ELSE '' END) ELSE '0' END) AS AVAILABILITY
  FROM ROOMS
  LEFT JOIN (
	  SELECT
		CAST((CASE WHEN COUNT(*)>0 THEN '0' ELSE '1' END) AS BOOLEAN) AS ISAVAILABLE,
		ROOMSOCCUPATIONS.ROOM_ID
	  FROM ROOMSOCCUPATIONS
	  WHERE ROOMSOCCUPATIONS.DEPARTUREDATE>=CURRENT_DATE
	  GROUP BY ROOMSOCCUPATIONS.ROOM_ID
	) AS B ON ROOMS.ID=B.ROOM_ID
  LEFT JOIN ROOMSTYPES ON ROOMS.ROOMTYPE_ID=ROOMSTYPES.ID
  ORDER BY ROOMS.NUMBER;
  --WITH CASCADED CHECK OPTION;

CREATE OR REPLACE FUNCTION roomsinfos_ins_up_del()
RETURNS TRIGGER
AS $$
   BEGIN
	  IF TG_OP = 'INSERT' OR TG_OP = 'UPDATE' THEN
	  IF old.ROOMSTYPE_ID=new.ROOMSTYPE_ID THEN
		UPDATE ROOMSTYPES SET DESCRIPTION=new.description, PRICEMIN=new.pricemin, PRICEMAX=new.pricemax, label=new.TYPE WHERE id=new.ROOMSTYPE_ID;
   ELSE
	  SELECT genupsert_ROOMSTYPES(hstore(ARRAY[['DESCRIPTION','new.DESCRIPTION'],['PRICEMIN','new.PRICEMIN'],['PRICEMAX','new.PRICEMAX'],['label','new.type']]));
	  --INSERT INTO ROOMSTYPES(LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(new.TYPE, new.description, new.pricemin, new.pricemax);
END IF;

IF TG_OP = 'INSERT' THEN
	  INSERT INTO ROOMS(NUMBER, FLOOR, ROOMTYPE_ID) VALUES(new.number,new.floor,(select id from roomstypes where LABEL=new.TYPE));

  ELSEIF TG_OP = 'UPDATE' THEN
	  UPDATE ROOMS SET FLOOR=new.floor, ROOMTYPE_ID=(select id from roomstypes where LABEL=new.TYPE) WHERE number=new.number;

  ELSIF TG_OP = 'DELETE' THEN
		DELETE FROM ROOMS WHERE number=old.number;

	   RETURN NULL;

	  END IF;
	  RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tr_changeroomsinfos
	INSTEAD OF INSERT OR UPDATE OR DELETE ON ROOMSINFOS
	FOR EACH ROW EXECUTE PROCEDURE roomsinfos_ins_up_del();
