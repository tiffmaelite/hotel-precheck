SELECT genpivotcode('SERVICESDETAILS', 'SERVICE_ID', 'LABEL', 'FIELDVALUE', 'SQLTYPE', 'SERVICESFIELDS', 'SERVICEFIELD_ID', 'INTEGER', 'SERVICESDETAILSPIVOT');

CREATE VIEW SERVICESINFOS AS
  SELECT
	SERVICES.ID AS ID,
	SERVICESFAMILIES.LABEL AS SERVICEFAMILY,
	SERVICESTYPES.LABEL AS SERVICETYPE,
	ROOMNEEDED AS TYPENEEDSROOM,
	SERVICES.NAME AS SERVICENAME,
	SERVICESTYPES.ROOMNEEDED AS ROOMNEEDED,
	SERVICES.ISAVAILABLE AS ISAVAILABLE,
	VAT_ID,
	TAXES.LABEL AS VAT,
	SERVICESDETAILSPIVOT.*
  FROM SERVICES
  LEFT JOIN SERVICESTYPES ON SERVICES.SERVICETYPE_ID=SERVICESTYPES.ID
  LEFT JOIN SERVICESFAMILIES ON SERVICESTYPES.SERVICEFAMILY_ID=SERVICESFAMILIES.ID
  LEFT JOIN SERVICESDETAILSPIVOT ON SERVICESDETAILSPIVOT.SERVICE_ID=SERVICES.ID
  LEFT JOIN TAXES ON SERVICESTYPES.VAT_ID = TAXES.ID
  ORDER BY SERVICEFAMILY, SERVICETYPE, SERVICENAME;--,
  --GROUP BY SERVICES.ID--;
  --WITH CASCADED CHECK OPTION;

CREATE OR REPLACE FUNCTION servicesinfos_ins_up_del()
RETURNS TRIGGER
AS $$
   BEGIN
   IF TG_OP = 'INSERT' THEN
	  INSERT INTO SERVICESFAMILIES(LABEL) VALUES(new.SERVICEFAMILY);

	  SELECT genupsert_SERVICESTYPES(hstore(ARRAY[['LABEL','new.SERVICETYPE'],['SERVICEFAMILY_ID','(SELECT id FROM SERVICESFAMILIES WHERE LABEL=new.SERVICEFAMILY)'],['VAT_ID','new.VAT_ID'],['ROOMNEEDED','new.TYPENEEDSROOM']]));
	  --INSERT INTO SERVICESTYPES(LABEL, SERVICEFAMILY_ID, VAT_ID, ROOMNEEDED) VALUES(new.SERVICETYPE, (SELECT id FROM SERVICESFAMILIES WHERE LABEL=new.SERVICEFAMILY), new.VAT_ID, new.TYPENEEDSROOM);

	  INSERT INTO SERVICES(SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES((SELECT id FROM SERVICESTYPES WHERE LABEL=new.SERVICETYPE),new.SERVICENAME,new.ISAVAILABLE);

  ELSEIF TG_OP = 'UPDATE' THEN
	  INSERT INTO SERVICESFAMILIES(LABEL) VALUES(new.SERVICEFAMILY);
	  SELECT genupsert_SERVICESTYPES(hstore(ARRAY[['LABEL','new.SERVICETYPE'],['SERVICEFAMILY_ID','(SELECT id FROM SERVICESFAMILIES WHERE LABEL=new.SERVICEFAMILY)'],['VAT_ID','new.VAT_ID'],['ROOMNEEDED','new.TYPENEEDSROOM']]));

	  UPDATE ROOMS SET FLOOR=new.floor, ROOMTYPE_ID=(select id from roomstypes where LABEL=new.TYPE) WHERE number=new.number;

	  ELSIF TG_OP = 'DELETE' THEN
	DELETE FROM ROOMS WHERE number=old.number;
	   RETURN NULL;
	  END IF;

	  RETURN NEW;
	END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER tr_changeservicesinfos
	INSTEAD OF INSERT OR UPDATE OR DELETE ON SERVICESINFOS
	FOR EACH ROW EXECUTE PROCEDURE servicesinfos_ins_up_del();
