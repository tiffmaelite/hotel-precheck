CONNECT "PreCheckDB.fdb" USER 'precheck' PASSWORD 'hotel';

DROP DATABASE;

COMMIT;

CREATE DATABASE "PreCheckDB.fdb" USER 'precheck' PASSWORD 'hotel';

COMMIT;

CONNECT "PreCheckDB.fdb" USER 'precheck' PASSWORD 'hotel';

CREATE DOMAIN BOOLEAN AS CHAR(1) CHECK (value is null or value in ('','0', '1'));

COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE ADDRESSES
(
ID INTEGER NOT NULL,
CLIENT_ID INTEGER NOT NULL,
CONTACT VARCHAR(30) NOT NULL,
STREET VARCHAR(50) NOT NULL,
NUMBER VARCHAR(4),
COMPLEMENTARYLINE VARCHAR(50) NOT NULL,
CITY VARCHAR(40) NOT NULL,
ZIPCODE VARCHAR(9),
COUNTRY VARCHAR(30) NOT NULL,
PHONE VARCHAR(13),
CONSTRAINT PK_ADDRESSES_ID PRIMARY KEY (ID),
CONSTRAINT UQ_ADDRESSES_CONTACTADDRESS UNIQUE (CONTACT,STREET,NUMBER,CITY,COUNTRY),
CONSTRAINT CK_VAL_ADDRESSES_PHONE CHECK (PHONE SIMILAR TO '[\+|00][[1-9]]{3}[[:DIGIT:]]{8}')
);

CREATE SEQUENCE SEQ_ADDRESSES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_ADDRESSES_AUTOID for ADDRESSES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_ADDRESSES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE BALANCELOG
(
YEARLOG INT,
MONTHLOG INT,
DAYLOG INT,
HOURLOG INT,
BALANCE FLOAT,
CONSTRAINT PK_BALANCELOG_DATE PRIMARY KEY (YEARLOG, MONTHLOG, DAYLOG, HOURLOG)
);


CREATE TABLE YEARLYBALCOUNT
(
CREATIONTIME TIMESTAMP,
YEARLOG INT,
BALANCE FLOAT,
CONSTRAINT PK_YEARLYBALCOUNT_CREATION PRIMARY KEY (CREATIONTIME)
);

CREATE TABLE MONTHLYBALCOUNT
(
CREATIONTIME TIMESTAMP,
YEARLOG INT,
MONTHLOG INT,
BALANCE FLOAT,
CONSTRAINT PK_MONTHLYBALCOUNT_CREATION PRIMARY KEY (CREATIONTIME)
);


CREATE TABLE DAYLYBALCOUNT
(
CREATIONTIME TIMESTAMP,
YEARLOG INT,
MONTHLOG INT,
DAYLOG INT,
BALANCE FLOAT,
CONSTRAINT PK_DAYLYBALCOUNT_CREATION PRIMARY KEY (CREATIONTIME)
);


CREATE TABLE HOURLYBALCOUNT
(
CREATIONTIME TIMESTAMP,
YEARLOG INT,
MONTHLOG INT,
DAYLOG INT,
HOURLOG INT,
BALANCE FLOAT,
CONSTRAINT PK_HOURLYBALCOUNT_CREATION PRIMARY KEY (CREATIONTIME)
);


COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE BILLINGS
(
ID INTEGER NOT NULL,
BILLINGSTYPE_ID INTEGER,
NBROOMS INT NOT NULL,
BOOKING_ID INTEGER,
BILLINGADDRESS_ID INTEGER NOT NULL,
NBADULTS INTEGER DEFAULT 0,
NBCHILDREN INTEGER DEFAULT 0,
ARRIVINGDATE DATE NOT NULL,
DEPARTUREDATE DATE NOT NULL,
EXPECTEDDEPARTUREDATE DATE,
ISCLOSED BOOLEAN DEFAULT '0' NOT NULL,
NOTE VARCHAR(255),
CONSTRAINT PK_BILLINGS_ID PRIMARY KEY (ID),
CONSTRAINT CK_POS_BILLINGS_NBADULTS CHECK (NBADULTS >= 0),
CONSTRAINT CK_GREA_BILLINGS_EXDEPARRDATE CHECK (EXPECTEDDEPARTUREDATE >= ARRIVINGDATE),
CONSTRAINT CK_GREA_BILLINGS_DEPARRDATE CHECK (DEPARTUREDATE >= ARRIVINGDATE)
);

CREATE SEQUENCE SEQ_BILLINGS_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_BILLINGS_AUTOID for BILLINGS
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_BILLINGS_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE BILLINGSCLIENTS
(
ID INTEGER NOT NULL,
CLIENT_ID INTEGER NOT NULL,
BILLING_ID INTEGER,
CONSTRAINT PK_BILLINGSCLIENTS_ID PRIMARY KEY (ID)
);

CREATE SEQUENCE SEQ_BILLINGSCLIENTS_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_BILLINGSCLIENTS_AUTOID for BILLINGSCLIENTS
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_BILLINGSCLIENTS_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE BILLINGSGROUPS
(
ID INTEGER NOT NULL,
GROUP_ID INTEGER NOT NULL,
BILLING_ID INTEGER,
CONSTRAINT PK_BILLINGSGROUPS_ID PRIMARY KEY (ID)
);

CREATE SEQUENCE SEQ_BILLINGSGROUPS_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_BILLINGSGROUPS_AUTOID for BILLINGSGROUPS
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_BILLINGSGROUPS_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE BILLINGSTYPES
(
ID INTEGER NOT NULL,
LABEL VARCHAR(20),
NBBILLS INT NOT NULL,
CONSTRAINT PK_BILLINGSTYPES_ID PRIMARY KEY (ID),
CONSTRAINT UQ_BILLINGSTYPES_LABEL UNIQUE (LABEL)
);

CREATE SEQUENCE SEQ_BILLINGSTYPES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_BILLINGSTYPES_AUTOID for BILLINGSTYPES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_BILLINGSTYPES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE BILLS
(
ID INTEGER NOT NULL,
BILLING_ID INTEGER NOT NULL,
BILLINGBILLID INTEGER NOT NULL,
BILLTYPE_ID INTEGER NOT NULL,
NOTE VARCHAR(255),
CONSTRAINT PK_BILLS_ID PRIMARY KEY (ID),
CONSTRAINT UQ_BILLS_IDBILLID UNIQUE (BILLING_ID,BILLINGBILLID)
);

CREATE SEQUENCE SEQ_BILLS_ID;

SET TERM !! ;
CREATE TRIGGER TR_BILLS_AUTOID FOR BILLS
ACTIVE BEFORE INSERT position 0
AS
BEGIN
IF ((new.ID IS NULL) OR (new.ID = 0)) THEN
BEGIN
new.id = NEXT VALUE FOR SEQ_BILLS_ID;
END
END!!
SET TERM ; !!

COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE BILLSTYPES
(
ID INTEGER NOT NULL,
LABEL VARCHAR(20),
CONSTRAINT PK_BILLSTYPES_ID PRIMARY KEY (ID),
CONSTRAINT UQ_BILLSTYPES_LABEL UNIQUE (LABEL)
);

CREATE SEQUENCE SEQ_BILLSTYPES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_BILLSTYPES_AUTOID for BILLSTYPES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_BILLSTYPES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE BOOKINGS
(
ID INTEGER NOT NULL,
CLIENT_ID INTEGER NOT NULL,
ROOMTYPE_ID INTEGER NOT NULL,
NBADULTS INTEGER DEFAULT 0,
NBCHILDREN INTEGER DEFAULT 0,
EXPECTEDARRIVINGDATE DATE NOT NULL,
EXPECTEDDEPARTUREDATE DATE NOT NULL,
BOOKINGDATE DATE NOT NULL,
CONFIRMATIONDATE DATE,
CANCELATIONDATE DATE,
NOTE VARCHAR(255),
CONSTRAINT PK_BOOKINGS_ID PRIMARY KEY (ID),
CONSTRAINT UQ_BOOKINGS_CLIENTARRIVING UNIQUE (CLIENT_ID,EXPECTEDARRIVINGDATE),
CONSTRAINT UQ_BOOKINGS_CLIENTDEPARTURE UNIQUE (CLIENT_ID,EXPECTEDDEPARTUREDATE),
CONSTRAINT CK_POS_BOOKINGS_NBADULTS CHECK (NBADULTS >= 0),
CONSTRAINT CK_POS_BOOKINGS_NBCHILDREN CHECK (NBCHILDREN >= 0)
);

CREATE SEQUENCE SEQ_BOOKINGS_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_BOOKINGS_AUTOID for BOOKINGS
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_BOOKINGS_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE CHARGEDSERVICES
(
SERVICE_ID INTEGER NOT NULL,
BILL_ID INTEGER NOT NULL,
RECEPTIONIST_ID INTEGER NOT NULL,
INVOICINGDATE DATE NOT NULL,
QUANTITY INT NOT NULL,
CHARGEDUNITYPRICE FLOAT,
VAT_PERCENTAGE FLOAT,
ISPRINTED BOOLEAN DEFAULT '0' NOT NULL,
ISPAYED BOOLEAN DEFAULT '0' NOT NULL,
PAIEMENTDATE DATE,
CONSTRAINT PK_CHARGEDSERVICES_SERVICEBILL PRIMARY KEY (SERVICE_ID,BILL_ID)
);


COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE CLIENTS
(
ID INTEGER NOT NULL,
NAME VARCHAR(35) NOT NULL,
PHONE VARCHAR(12),
EMAIL VARCHAR(50),
IDCARDSCAN VARCHAR(100),
NATIONALITY_ID INTEGER NOT NULL,
HOMEADDRESS_ID INTEGER,
ISCURRENT BOOLEAN DEFAULT '0' NOT NULL,
CONSTRAINT PK_CLIENTS_ID PRIMARY KEY (ID),
CONSTRAINT UQ_CLIENTS_EMAIL UNIQUE (EMAIL),
CONSTRAINT CK_VAL_CLIENTS_EMAIL CHECK(EMAIL SIMILAR TO '[[[:ALNUM:]\._%\+\-]+@[[:ALNUM:]\.-]+\.[[:ALPHA:]]+]?'),
CONSTRAINT CK_VAL_CLIENTS_PHONE CHECK(PHONE SIMILAR TO '[[\+|00][[1-9]]{3}[[:DIGIT:]]{8}]?')
);

CREATE SEQUENCE SEQ_CLIENTS_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_CLIENTS_AUTOID for CLIENTS
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_CLIENTS_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE GROUPS
(
ID INTEGER NOT NULL,
NAME VARCHAR(25) NOT NULL,
CONTACT_ID INTEGER,
CONSTRAINT PK_GROUPS_ID PRIMARY KEY (ID),
CONSTRAINT UQ_GROUPS_NAME UNIQUE (NAME)
);

CREATE SEQUENCE SEQ_GROUPS_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_GROUPS_AUTOID for GROUPS
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_GROUPS_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE NATIONALITIES
(
ID INTEGER NOT NULL,
CODE VARCHAR(3) NOT NULL,
COUNTRY VARCHAR(100) NOT NULL,
LABEL VARCHAR(50) NOT NULL,
CONSTRAINT PK_NATIONALITIES_ID PRIMARY KEY (ID),
CONSTRAINT UQ_NATIONALITIES_CODE UNIQUE (CODE),
CONSTRAINT UQ_NATIONALITIES_LABEL UNIQUE (LABEL)
);

CREATE SEQUENCE SEQ_NATIONALITIES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_NATIONALITIES_AUTOID for NATIONALITIES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_NATIONALITIES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE REPORTSTYPES
(
ID INTEGER NOT NULL,
LABEL VARCHAR(100),
GENERATIONQUERY VARCHAR(1024)
);

CREATE SEQUENCE SEQ_REPORTSTYPES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_REPORTSTYPES_AUTOID for REPORTSTYPES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_REPORTSTYPES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE ROOMS
(
ID INTEGER NOT NULL,
ROOMTYPE_ID INTEGER NOT NULL,
NUMBER SMALLINT NOT NULL,
FLOOR SMALLINT NOT NULL,
ISCLEANED BOOLEAN DEFAULT '1' NOT NULL,
CONSTRAINT PK_ROOMS_ID PRIMARY KEY (ID),
CONSTRAINT UQ_ROOMS_NUMBER UNIQUE (NUMBER)
);

CREATE SEQUENCE SEQ_ROOMS_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_ROOMS_AUTOID for ROOMS
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_ROOMS_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE ROOMSOCCUPATIONS
(
ID INTEGER NOT NULL,
ROOM_ID INTEGER NOT NULL,
BILLING_ID INTEGER NOT NULL,
ARRIVINGDATE DATE NOT NULL,
DEPARTUREDATE DATE NOT NULL,
CONSTRAINT PK_ROOMSOCC_ROOMBILLING PRIMARY KEY (ROOM_ID, BILLING_ID),
CONSTRAINT UQ_ROOMSOCC_ROOMARRIVINGDATE UNIQUE (ROOM_ID, ARRIVINGDATE),
CONSTRAINT UQ_ROOMSOCC_ROOMDEPARTUREDATE UNIQUE (ROOM_ID, DEPARTUREDATE)
);
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE ROOMSTYPES
(
ID INTEGER NOT NULL,
LABEL VARCHAR(20) NOT NULL,
DESCRIPTION VARCHAR(255),
PRICEMIN FLOAT NOT NULL,
PRICEMAX FLOAT,
CONSTRAINT PK_ROOMSTYPES_ID PRIMARY KEY (ID),
CONSTRAINT UQ_ROOMSTYPES_LABEL UNIQUE (LABEL)
);

CREATE SEQUENCE SEQ_ROOMSTYPES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_ROOMSTYPES_AUTOID for ROOMSTYPES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_ROOMSTYPES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE SERVICES
(
ID INTEGER NOT NULL,
SERVICETYPE_ID INTEGER NOT NULL,
NAME VARCHAR(100) NOT NULL,
ISAVAILABLE BOOLEAN DEFAULT '1'  NOT NULL,
CONSTRAINT PK_SERVICES_ID PRIMARY KEY (ID),
CONSTRAINT UQ_SERVICES_NAME UNIQUE (NAME)
);

CREATE SEQUENCE SEQ_SERVICES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_SERVICES_AUTOID for SERVICES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_SERVICES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE SERVICESDETAILS
 (
 SERVICE_ID INTEGER NOT NULL,
 SERVICEFIELD_ID INTEGER NOT NULL,
 FIELDVALUE VARCHAR(255),
 CONSTRAINT PK_SERVICESDETAILS_ID PRIMARY KEY (SERVICE_ID, SERVICEFIELD_ID)
 );

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE SERVICESFAMILIES
(
ID INTEGER NOT NULL,
LABEL VARCHAR(25) NOT NULL,
CONSTRAINT PK_SERVICESFAMILIES_ID PRIMARY KEY (ID),
CONSTRAINT UQ_SERVICESFAMILIES_LABEL UNIQUE (LABEL)
);

CREATE SEQUENCE SEQ_SERVICESFAMILIES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_SERVICESFAMILIES_AUTOID for SERVICESFAMILIES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_SERVICESFAMILIES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE SERVICESFIELDS
 (
 ID INTEGER NOT NULL,
 LABEL VARCHAR(25) NOT NULL,
 SQLTYPE VARCHAR(100) DEFAULT 'TEXT' NOT NULL,
 CONSTRAINT PK_SERVICESFIELDS_ID PRIMARY KEY (ID),
 CONSTRAINT UQ_SERVICESFIELDS_LABEL UNIQUE (LABEL)
 );

CREATE SEQUENCE SEQ_SERVICESFIELDS_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_SERVICESFIELDS_AUTOID for SERVICESFIELDS
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_SERVICESFIELDS_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


 CREATE TABLE SERVICESTYPES
 (
 ID INTEGER NOT NULL,
 LABEL VARCHAR(25) NOT NULL,
 SERVICEFAMILY_ID INTEGER NOT NULL,
 VAT_ID INTEGER NOT NULL,
 ROOMNEEDED BOOLEAN DEFAULT '1' NOT NULL,
 CONSTRAINT PK_SERVICESTYPES_ID PRIMARY KEY (ID),
 CONSTRAINT UQ_SERVICESTYPES_LABEL UNIQUE (LABEL)
 );

CREATE SEQUENCE SEQ_SERVICESTYPES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_SERVICESTYPES_AUTOID for SERVICESTYPES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_SERVICESTYPES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE TABLE TAXES
(
ID INTEGER NOT NULL,
LABEL VARCHAR(20) NOT NULL,
PERCENTAGE FLOAT,
STARTDATE DATE,
ENDDATE DATE,
CONSTRAINT PK_TAXES_ID PRIMARY KEY (ID)
);

CREATE SEQUENCE SEQ_TAXES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_TAXES_AUTOID for TAXES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_TAXES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE TRAINEES
(
ID INTEGER NOT NULL,
LOGIN VARCHAR(20) NOT NULL,
ENCRYPTEDPASS VARCHAR(255) NOT NULL,
CONSTRAINT PK_TRAINEES_ID PRIMARY KEY (ID),
CONSTRAINT UQ_TRAINEES_LOGIN UNIQUE (LOGIN)
);

CREATE SEQUENCE SEQ_TRAINEES_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_TRAINEES_AUTOID for TRAINEES
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_TRAINEES_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE TABLE USERS
(
ID INTEGER NOT NULL,
LOGIN VARCHAR(20) NOT NULL,
ENCRYPTEDPASS VARCHAR(255) NOT NULL,
ISRECEPTIONIST BOOLEAN DEFAULT '0' NOT NULL,
ISMANAGERX BOOLEAN DEFAULT '0' NOT NULL,
ISMANAGERZ BOOLEAN DEFAULT '0' NOT NULL,
ISADMINISTRATOR BOOLEAN DEFAULT '0' NOT NULL,
CONSTRAINT PK_USERS_ID PRIMARY KEY (ID),
CONSTRAINT UQ_USERS_LOGIN UNIQUE (LOGIN)
);

CREATE SEQUENCE SEQ_USERS_ID;

 SET TERM !! ;
 CREATE TRIGGER TR_USERS_AUTOID for USERS
 active before insert position 0
 as
 begin
 if ((new.ID is null) or (new.ID = 0)) then
 begin
 new.id = NEXT VALUE FOR SEQ_USERS_ID;
 end
 end!!
 SET TERM ; !!

 COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

ALTER TABLE SERVICESTYPES
ADD CONSTRAINT FK_SERVICESTYPES_TAXES FOREIGN KEY (VAT_ID) REFERENCES TAXES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_SERVICESTYPES_FAMILY	FOREIGN KEY (SERVICEFAMILY_ID) REFERENCES SERVICESFAMILIES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE SERVICES
ADD CONSTRAINT FK_SERVICES_TYPE	FOREIGN KEY (SERVICETYPE_ID) REFERENCES SERVICESTYPES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE ROOMS
ADD CONSTRAINT FK_ROOMS_TYPE	FOREIGN KEY (ROOMTYPE_ID) REFERENCES ROOMSTYPES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE GROUPS
ADD CONSTRAINT FK_GROUPS_CONTACTCLIENT FOREIGN KEY (CONTACT_ID) REFERENCES CLIENTS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE CLIENTS
ADD CONSTRAINT FK_CLIENTS_ADDRESS FOREIGN KEY (HOMEADDRESS_ID) REFERENCES ADDRESSES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_CLIENTS_NATIONALITY FOREIGN KEY (NATIONALITY_ID) REFERENCES NATIONALITIES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE CHARGEDSERVICES
ADD CONSTRAINT FK_CHARGEDSERVICES_USER FOREIGN KEY (RECEPTIONIST_ID) REFERENCES USERS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_CHARGEDSERVICES_SERVICE FOREIGN KEY (SERVICE_ID) REFERENCES SERVICES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_CHARGEDSERVICES_BILL FOREIGN KEY (BILL_ID) REFERENCES BILLS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE BILLS
ADD CONSTRAINT FK_BILLS_BILLING FOREIGN KEY (BILLING_ID) REFERENCES BILLINGS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_BILLS_TYPE FOREIGN KEY (BILLTYPE_ID) REFERENCES BILLSTYPES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE BILLINGSGROUPS
ADD CONSTRAINT FK_BILLINGSGR_BILLINGSID FOREIGN KEY (BILLING_ID) REFERENCES BILLINGS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_BILLINGSGR_GROUP FOREIGN KEY (GROUP_ID) REFERENCES GROUPS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE BILLINGSCLIENTS
ADD CONSTRAINT FK_BILLINGSCL_BILLINGSID FOREIGN KEY (BILLING_ID) REFERENCES BILLINGS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_BILLINGSCL_CLIENT FOREIGN KEY (CLIENT_ID) REFERENCES CLIENTS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE ROOMSOCCUPATIONS
ADD CONSTRAINT FK_ROOMSOCC_ROOM FOREIGN KEY (ROOM_ID) REFERENCES ROOMS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_ROOMSOCC_BILLINGSID FOREIGN KEY (BILLING_ID) REFERENCES BILLINGS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE BILLINGS
ADD CONSTRAINT FK_BILLINGS_ADDRESS FOREIGN KEY (BILLINGADDRESS_ID) REFERENCES ADDRESSES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_BILLINGS_TYPE FOREIGN KEY (BILLINGSTYPE_ID) REFERENCES BILLINGSTYPES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_BILLINGS_BOOKING FOREIGN KEY (BOOKING_ID) REFERENCES BOOKINGS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE BOOKINGS
ADD CONSTRAINT FK_BOOKINGS_CLIENT FOREIGN KEY (CLIENT_ID) REFERENCES CLIENTS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION,
ADD CONSTRAINT FK_BOOKINGS_ROOMTYPE FOREIGN KEY (ROOMTYPE_ID) REFERENCES ROOMSTYPES (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

ALTER TABLE ADDRESSES
ADD CONSTRAINT FK_ADDRESSES_CLIENT FOREIGN KEY (CLIENT_ID) REFERENCES CLIENTS (ID) ON UPDATE NO ACTION ON DELETE NO ACTION;

COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

CREATE VIEW BILLINGSINFOS AS
SELECT
BILLINGS.ID,
CLIENTS.NAME,
ROOMDESC,
CAST((CASE WHEN BILLINGS.NBADULTS IS NULL THEN 0 WHEN BILLINGS.NBCHILDREN IS NULL THEN 0 ELSE CAST(CAST(BILLINGS.NBADULTS AS INTEGER)+CAST(BILLINGS.NBCHILDREN AS INTEGER) AS INTEGER) END) AS INTEGER) AS NBPEOPLE,
BILLINGS.ARRIVINGDATE, BILLINGS.DEPARTUREDATE, BILLINGS.EXPECTEDDEPARTUREDATE,
BILLINGSTYPES.LABEL
FROM BILLINGS
LEFT JOIN ROOMSOCCUPATIONS ON ROOMSOCCUPATIONS.BILLING_ID = BILLINGS.ID 
LEFT JOIN (SELECT ROOMS.ID, (ROOMS.NUMBER || '(' || ROOMSTYPES.LABEL || ')') AS ROOMDESC FROM ROOMS LEFT JOIN ROOMSTYPES ON ROOMS.ROOMTYPE_ID = ROOMSTYPES.ID) AS R ON R.ID = ROOMSOCCUPATIONS.ROOM_ID 
LEFT JOIN BILLINGSGROUPS ON BILLINGSGROUPS.BILLING_ID = BILLINGS.ID 
LEFT JOIN BILLINGSCLIENTS ON BILLINGSCLIENTS.BILLING_ID = BILLINGS.ID 
LEFT JOIN CLIENTS ON CLIENTS.ID = BILLINGSCLIENTS.CLIENT_ID 
LEFT JOIN GROUPS ON GROUPS.ID = BILLINGSGROUPS.GROUP_ID 
LEFT JOIN BILLINGSTYPES ON BILLINGSTYPES.ID = BILLINGS.BILLINGSTYPE_ID 
WHERE BILLINGS.ISCLOSED = '0' 
ORDER BY BILLINGS.ARRIVINGDATE;

COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE VIEW ROOMSINFOS AS
SELECT
ROOMS.ID, ROOMS.NUMBER, ROOMS.FLOOR,
ROOMSTYPES.LABEL, ROOMSTYPES.DESCRIPTION, ROOMSTYPES.PRICEMIN, ROOMSTYPES.PRICEMAX,
(CASE B.ISAVAILABLE WHEN '1' THEN (CASE ROOMS.ISCLEANED WHEN '1' THEN '1' ELSE '' END) ELSE '0' END) AS AVAILABILITY
FROM ROOMS
LEFT JOIN (SELECT CAST((CASE WHEN COUNT(*)>0 THEN '0' ELSE '1' END) AS BOOLEAN) AS ISAVAILABLE, ROOMSOCCUPATIONS.ROOM_ID FROM ROOMSOCCUPATIONS WHERE ROOMSOCCUPATIONS.DEPARTUREDATE>=CURRENT_DATE GROUP BY ROOMSOCCUPATIONS.ROOM_ID) AS B ON ROOMS.ID=B.ROOM_ID
LEFT JOIN ROOMSTYPES ON ROOMS.ROOMTYPE_ID=ROOMSTYPES.ID
ORDER BY ROOMS.NUMBER;

COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


CREATE VIEW SERVICESINFOS AS
SELECT
SERVICES.ID, SERVICESFAMILIES.ID AS SERVICEFAMILY, SERVICETYPE_ID AS SERVICETYPE, SERVICES.NAME AS SERVICENAME, SERVICESTYPES.ROOMNEEDED AS ROOMNEEDED, SERVICES.ISAVAILABLE AS ISAVAILABLE
FROM SERVICES
LEFT JOIN SERVICESTYPES ON SERVICES.SERVICETYPE_ID=SERVICESTYPES.ID
LEFT JOIN SERVICESFAMILIES ON SERVICESTYPES.SERVICEFAMILY_ID=SERVICESFAMILIES.ID
--LEFT JOIN SERVICESDETAILS ON SERVICESDETAILS.SERVICE_ID=SERVICES.ID
--LEFT JOIN SERVICESFIELDS ON SERVICESFIELDS.ID=SERVICESDETAILS.SERVICEFIELD_ID
ORDER BY SERVICEFAMILY, SERVICETYPE, SERVICENAME;--,
--GROUP BY SERVICES.ID;

COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


SET TERM !! ;
CREATE OR ALTER PROCEDURE RESTARTYEARLYBALANCE ( RESTARTYEAR INTEGER )
AS
DECLARE VARIABLE NOWTIMESTAMP TIMESTAMP,
DECLARE VARIABLE OLDBALANCE DECIMAL,
DECLARE VARIABLE CURRENTBALANCE DECIMAL;
BEGIN
NOWTIMESTAMP = CURRENT_TIMESTAMP;
OLBALANCE = 0.0;
CURRENTBALANCE = 0.0;
SELECT BALANCE FROM YEARLYBALANCECOUNTER WHERE YEARLOG = (:RESTARTYEAR-1) INTO :OLDBALANCE;
IF :OLDBALANCE IS NULL THEN
	OLDBALANCE = 0.0;
END IF;
SELECT BALANCE FROM BALANCELOG WHERE YEARLOG = (:RESTARTYEAR-1) INTO :CURRENTBALANCE;
IF :CURRENTBALANCE IS NOT NULL THEN
	UPDATE BALANCELOG SET BALANCE = (:OLDBALANCE + :CURRENTBALANCE) WHERE YEARLOG =(:RESTARTYEAR-1);
ELSE
INSERT INTO BALANCELOG(YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES ((:RESTARTYEAR-1), 0, 0, 0, :OLDBALANCE);
END IF;
-- CREATE new counter (ràz)
INSERT INTO YEARLYBALANCECOUNTER(CREATIONTIME, YEARLOG, BALANCE) VALUES (:NOWTIMESTAMP, :RESTARTYEAR, 0);
END!!

CREATE OR ALTER PROCEDURE RESTARTMONTHLYBALANCE (RESTARTYEAR INT, RESTARTMONTH INT)
AS
DECLARE VARIABLE PREVIOUSYEAR INT,
DECLARE VARIABLE NOWTIMESTAMP TIMESTAMP,
DECLARE VARIABLE OLDBALANCE DECIMAL,
DECLARE VARIABLE CURRENTBALANCE DECIMAL;
BEGIN
NOWTIMESTAMP = CURRENT_TIMESTAMP;
OLBALANCE = 0.0;
CURRENTBALANCE = 0.0;
IF :RESTARTMONTH = 1 THEN
:PREVIOUSYEAR = :RESTARTYEAR-1;
ELSE
:PREVIOUSYEAR = :RESTARTYEAR;
END IF;
SELECT BALANCE FROM MONTHLYBALANCECOUNTER WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = (:RESTARTMONTH-1) INTO :OLDBALANCE;
IF :OLDBALANCE IS NULL THEN
	OLDBALANCE = 0.0;
END IF;
SELECT BALANCE FROM BALANCELOG WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = (:RESTARTMONTH-1) INTO :CURRENTBALANCE;
IF :CURRENTBALANCE IS NOT NULL THEN
	UPDATE BALANCELOG SET BALANCE = (:OLDBALANCE + :CURRENTBALANCE) WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = (:RESTARTMONTH-1);
ELSE
INSERT INTO BALANCELOG(YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES (:PREVIOUSYEAR, (:RESTARTMONTH-1), 0, 0, :OLDBALANCE);
END IF;
-- CREATE new counter (ràz)
INSERT INTO MONTHLYBALANCECOUNTER(CREATIONTIME, YEARLOG, MONTHLOG, BALANCE) VALUES (:NOWTIMESTAMP, :RESTARTYEAR, :RESTARTMONTH, 0);
END!!



CREATE OR ALTER PROCEDURE RESTARTDAILYBALANCE (RESTARTYEAR INT, RESTARTMONTH INT, RESTARTDAY INT)
AS
DECLARE VARIABLE PREVIOUSYEAR INT;
DECLARE VARIABLE PREVIOUSMONTH INT;
DECLARE VARIABLE NOWTIMESTAMP TIMESTAMP;
DECLARE VARIABLE OLDBALANCE DECIMAL;
DECLARE VARIABLE CURRENTBALANCE DECIMAL;
BEGIN
NOWTIMESTAMP = CURRENT_TIMESTAMP;
OLBALANCE = 0.0;
CURRENTBALANCE = 0.0;
IF :RESTARTMONTH = 1 THEN
:PREVIOUSYEAR = :RESTARTYEAR-1;
ELSE
:PREVIOUSYEAR = :RESTARTYEAR;
END IF;
IF :RESTARTDAY = 1 THEN
:PREVIOUSMONTH = :RESTARTMONTH-1;
ELSE
:PREVIOUSMONTH = :RESTARTMONTH;
END IF;
SELECT BALANCE FROM DAYBALANCECOUNTER WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = (:RESTARTDAY-1) INTO :OLDBALANCE;
IF :OLDBALANCE IS NULL THEN
	OLDBALANCE = 0.0;
END IF;
SELECT BALANCE FROM BALANCELOG WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = (:RESTARTDAY-1) INTO :CURRENTBALANCE;
IF :CURRENTBALANCE IS NOT NULL THEN
	UPDATE BALANCELOG SET BALANCE = (:OLDBALANCE + :CURRENTBALANCE) WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = (:RESTARTDAY-1);
ELSE
INSERT INTO BALANCELOG(YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES (:PREVIOUSYEAR, :PREVIOUSMONTH, (:RESTARTDAY-1), 0, :OLDBALANCE);
END IF;
-- CREATE new counter (ràz)
INSERT INTO DAYLYBALANCECOUNTER(CREATIONTIME, YEARLOG, MONTHLOG, DAYLOG, BALANCE) VALUES (:NOWTIMESTAMP, :RESTARTYEAR, :RESTARTMONTH, :RESTARTDAY, 0);
END!!


CREATE OR ALTER PROCEDURE RESTARTHOURLYBALANCE (RESTARTYEAR INT, RESTARTMONTH INT, RESTARTDAY INT, RESTARTHOUR INT)
AS
DECLARE VARIABLE PREVIOUSYEAR INT;
DECLARE VARIABLE PREVIOUSMONTH INT;
DECLARE VARIABLE PREVIOUSDAY INT;
DECLARE VARIABLE NOWTIMESTAMP TIMESTAMP;
DECLARE VARIABLE OLDBALANCE DECIMAL;
DECLARE VARIABLE CURRENTBALANCE DECIMAL;
BEGIN
NOWTIMESTAMP = CURRENT_TIMESTAMP;
OLBALANCE = 0.0;
CURRENTBALANCE = 0.0;
IF :RESTARTMONTH = 1 THEN
:PREVIOUSYEAR = :RESTARTYEAR-1;
ELSE
:PREVIOUSYEAR = :RESTARTYEAR;
END IF;
IF :RESTARTDAY = 1 THEN
:PREVIOUSMONTH = :RESTARTMONTH-1;
ELSE
:PREVIOUSMONTH = :RESTARTMONTH;
END IF;
IF :RESTARTHOUR = 1 THEN
:PREVIOUSDAY = :PREVIOUSDAY-1;
ELSE
:PREVIOUSDAY = :PREVIOUSDAY;
END IF;
SELECT BALANCE FROM HOURLYBALANCECOUNTER WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = (:RESTARTDAY-1) INTO :OLDBALANCE;
IF :OLDBALANCE IS NULL THEN
	OLDBALANCE = 0.0;
END IF;
SELECT BALANCE FROM BALANCELOG WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = :PREVIOUSDAY AND HOURLOG = (:RESTARTHOUR-1) INTO :CURRENTBALANCE;
IF :CURRENTBALANCE IS NOT NULL THEN
BEGIN
	UPDATE BALANCELOG SET BALANCE = (:OLDBALANCE + :CURRENTBALANCE) WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = :PREVIOUSDAY AND HOURLOG = (:RESTARTHOUR-1);
END
ELSE
BEGIN
INSERT INTO BALANCELOG(YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES (:PREVIOUSYEAR, :PREVIOUSMONTH, :PREVIOUSDAY, (:RESTARTHOUR-1), :OLDBALANCE);
END
-- CREATE new counter (ràz)
INSERT INTO HOURLYBALANCECOUNTER(CREATIONTIME, YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES (:NOWTIMESTAMP, :RESTARTYEAR, :RESTARTMONTH, :RESTARTDAY, :RESTARTHOUR, 0;
END!!


CREATE OR ALTER PROCEDURE INCREMENTHOURLYCOUNTERBY (SUPPLEMENT AS DECIMAL)
AS
BEGIN
UPDATE HOURLYBALANCECOUNTER SET BALANCE = BALANCE+:SUPPLEMENT WHERE CREATIONTIME >= MAX(CREATIONTIME);
END!!


CREATE OR ALTER PROCEDURE INCREMENTDAYLYCOUNTERBY (SUPPLEMENT AS DECIMAL)
AS
BEGIN
UPDATE DAYLYBALANCECOUNTER SET BALANCE = BALANCE+:SUPPLEMENT WHERE CREATIONTIME >= MAX(CREATIONTIME);
END!!


CREATE OR ALTER PROCEDURE INCREMENTMONTHLYCOUNTERBY (SUPPLEMENT AS DECIMAL)
AS
BEGIN
UPDATE MONTHLYBALANCECOUNTER SET BALANCE = BALANCE+:SUPPLEMENT WHERE CREATIONTIME >= MAX(CREATIONTIME);
END!!


CREATE OR ALTER PROCEDURE INCREMENTYEARLYCOUNTERBY (SUPPLEMENT AS DECIMAL)
AS
BEGIN
UPDATE YEARLYBALANCECOUNTER SET BALANCE = BALANCE+:SUPPLEMENT WHERE CREATIONTIME >= MAX(CREATIONTIME);
END!!

SET TERM ; !!

 
COMMIT;

SET TERM !! ;

CREATE TRIGGER TR_MONTHLOG FOR MONTHLYBALANCECOUNTER
ACTIVE BEFORE UPDATE position 0
AS
BEGIN
IF ((new.BALANCE IS NOT NULL) AND (new.BALANCE > 0)) THEN
BEGIN
EXECUTE INCREMENTYEARLYCOUNTERBY(new.BALANCE-old.BALANCE);
END
END!!

CREATE TRIGGER TR_DAYLOG FOR DAYLYBALANCECOUNTER
ACTIVE BEFORE UPDATE position 0
AS
BEGIN
IF ((new.BALANCE IS NOT NULL) AND (new.BALANCE > 0)) THEN
BEGIN
EXECUTE INCREMENTMONTHLYCOUNTERBY(new.BALANCE-old.BALANCE);
END
END!!

CREATE TRIGGER TR_HOURLOG FOR HOURLYBALANCECOUNTER
ACTIVE BEFORE UPDATE position 0
AS
BEGIN
IF ((new.BALANCE IS NOT NULL) AND (new.BALANCE > 0)) THEN
BEGIN
EXECUTE INCREMENTDAYLYCOUNTERBY(new.BALANCE-old.BALANCE);
END
END!!


CREATE TRIGGER TR_REGISTERCHARGING FOR CHARGEDSERVICES
ACTIVE BEFORE UPDATE position 0
AS
BEGIN
IF ((new.ISPAYED = '1') AND (old.ISPAYED != '1')) THEN
BEGIN
EXECUTE INCREMENTHOURLYCOUNTERBY(new.CHARGEDUNITYPRICE*(1+VAT_PERCENTAGE)*new.QUANTITY);
END
END!!

SET TERM ; !!

COMMIT;
CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '1L+D', '1 lit en 80x200 + 1 douche', 100, 120);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '1GL+D', '1 lit en 160x200 + 1 douche', 120, 150);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '1pGL+D', '1 lit en 140x190 ou en 140x200 + 1 douche', 135, 145);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '2L+D', '2 lits en 80x200 + 1 douche', 150, 165);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '2L+B', '2 lits en 80x200 + 1 baignoire', 150, 165);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '2Lc+D', '2 lits en 90x200 + 1 douche', 160, 180);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '2Lc+B', '2 lits en 90x200 + 1 baignoire', 160, 180);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, 'Junior Suite', '2 lits en 90x200 ou 1 lit 140x200 + 1 baignoire', 170, 195);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '3L+B', '3 lits en 80x200 + 1 baignoire', 175, 200);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '2L+1pGL+B', '2 lits en 80x200 + 1 lit 140x200 + 1 baignoire', 185, 215);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, '3L+1pGL+B', '3 lits en 80x200 + 1 lit 140x200 + 1 baignoire', 195, 255);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, 'appartement', '', 300, 300);
INSERT INTO ROOMSTYPES(ID, LABEL, DESCRIPTION, PRICEMIN, PRICEMAX) VALUES(0, 'studio', '', 350, 350);

COMMIT;

INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 1, 309, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 1, 509, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 1, 710, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 1, 711, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 1, 712, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 3, 308, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 3, 307, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 3, 407, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 3, 507, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 3, 607, 6);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 2, 707, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 2, 605, 6);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 2, 207, 2);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 201, 2);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 202, 2);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 203, 2);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 205, 2);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 206, 2);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 301, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 302, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 303, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 305, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 306, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 8, 310, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 7, 311, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 401, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 402, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 403, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 405, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 406, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 5, 408, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 5, 411, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 501, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 502, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 503, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 505, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 506, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 5, 508, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 601, 6);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 602, 6);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 603, 6);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 606, 6);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 701, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 705, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 706, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 4, 708, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 8, 510, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 7, 511, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 7, 704, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 9, 304, 3);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 9, 504, 5);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 9, 604, 6);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 10, 204, 2);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 10, 404, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 12, 410, 4);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 12, 702, 7);
INSERT INTO ROOMS(ID, ROOMTYPE_ID, NUMBER, FLOOR) VALUES(0, 13, 132, 7);

COMMIT;

INSERT INTO TAXES(ID, LABEL, PERCENTAGE, STARTDATE, ENDDATE) VALUES(0,'0%',0.0,null,null);
INSERT INTO TAXES(ID, LABEL, PERCENTAGE, STARTDATE, ENDDATE) VALUES(0,'3,8%',3.8,null,null);

INSERT INTO SERVICESFAMILIES(ID, LABEL) VALUES(0,'Arrangement');
INSERT INTO SERVICESFAMILIES(ID, LABEL) VALUES(0,'Repas');
INSERT INTO SERVICESFAMILIES(ID, LABEL) VALUES(0,'Prestations');

INSERT INTO SERVICESTYPES(ID, LABEL, SERVICEFAMILY_ID, VAT_ID, ROOMNEEDED) VALUES(0,'Autre',3,1, '1');
INSERT INTO SERVICESTYPES(ID, LABEL, SERVICEFAMILY_ID, VAT_ID, ROOMNEEDED) VALUES(0,'Taxe de séjour',1,1, '1');
INSERT INTO SERVICESTYPES(ID, LABEL, SERVICEFAMILY_ID, VAT_ID, ROOMNEEDED) VALUES(0,'Accomodation',1,1, '1');
INSERT INTO SERVICESTYPES(ID, LABEL, SERVICEFAMILY_ID, VAT_ID, ROOMNEEDED) VALUES(0,'Repas',2,1, '1');
INSERT INTO SERVICESTYPES(ID, LABEL, SERVICEFAMILY_ID, VAT_ID, ROOMNEEDED) VALUES(0,'Prestation extra',3,1, '1');
INSERT INTO SERVICESTYPES(ID, LABEL, SERVICEFAMILY_ID, VAT_ID, ROOMNEEDED) VALUES(0,'Vente au comptant',3,1, '0');

COMMIT;

INSERT INTO SERVICESFIELDS(ID, LABEL, SQLTYPE) VALUES(0,'DISPLAYEDNAME','VARCHAR(100)');
INSERT INTO SERVICESFIELDS(ID, LABEL, SQLTYPE) VALUES(0,'PRINTEDNAME','VARCHAR(100)');
INSERT INTO SERVICESFIELDS(ID, LABEL, SQLTYPE) VALUES(0,'PRICEMIN','FLOAT');
INSERT INTO SERVICESFIELDS(ID, LABEL, SQLTYPE) VALUES(0,'PRICEMAX','FLOAT');

COMMIT;
ALTER SEQUENCE SEQ_SERVICES_ID RESTART WITH -1;
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,1, 'Autre...', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,1, 'Autre', '1');
ALTER SEQUENCE SEQ_SERVICES_ID RESTART WITH 1;
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,1, 'Taxe de séjour adulte', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,1, 'Taxe de séjour enfant', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,3, 'Logement', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,3, 'Logement et petit-déjeuner','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,3, 'Arrangement demi-pension', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,3, 'Arrangement pension complète','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,4, 'Demi-pension', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,4, 'Pension complète','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,5, 'Petit-déjeuner','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,5, 'Extras petit-déjeuner','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,4, 'Restaurant','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,4, 'Bistro','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,5, 'Fax','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,5, 'Garage', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,5, 'Téléphone','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,5, 'Wifi chambre','0');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,6, 'Timbre', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,5, 'Lingerie','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,6, 'Location salle','1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,6, 'Débours', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,6, 'Rabais', '1');
INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0,5, 'Service en chambre','1');
COMMIT;

INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(-1,1,'Autre...');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(-1,2,'Autre...');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(-1,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(-1,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(0,1,'Autre');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(0,2,'Autre');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(0,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(0,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(1,1,'Taxe de séjour adulte');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(1,2,'Taxe de séjour adulte');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(1,3,'2');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(1,4,'2');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(2,1,'Taxe de séjour enfant');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(2,2,'Taxe de séjour enfant');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(2,3,'1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(2,4,'1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(3,1,'Logement');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(3,2,'Logement');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(3,3,'-1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(3,4,'-1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(4,1,'Logement et petit-déjeuner');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(4,2,'Logement+p.dej');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(4,3,'-1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(4,4,'-1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(5,1,'Arrangement demi-pension');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(5,2,'Arrangement 1/2 pension');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(5,3,'-1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(5,4,'-1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(6,1,'Arrangement pension complète');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(6,2,'Arrangement pension comp.');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(6,3,'-1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(6,4,'-1');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(7,1,'Demi-pension');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(7,2,'1/2 pension');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(7,3,'25');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(7,4,'25');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(8,1,'Pension complète');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(8,2,'Pension complète');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(8,3,'50');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(8,4,'50');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(9,1,'Petit-déjeuner');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(9,2,'Petit-déjeuner');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(9,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(9,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(10,1,'Extras petit-déjeuner');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(10,2,'Extras p.dej');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(10,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(10,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(11,1,'Restaurant');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(11,2,'Restaurant');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(11,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(11,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(12,1,'Bistro');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(12,2,'Bistro');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(12,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(12,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(13,1,'Fax');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(13,2,'Fax');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(13,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(13,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(14,1,'Garage');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(14,2,'Garage');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(14,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(14,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(15,1,'Téléphone');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(15,2,'Téléphone');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(15,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(15,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(16,1,'Wifi chambre');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(16,2,'Wifi chambre');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(16,3,'5');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(16,4,'5');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(17,1,'Timbre');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(17,2,'Timbre');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(17,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(17,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(18,1,'Lingerie');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(18,2,'Lingerie');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(18,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(18,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(19,1,'Location salle');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(19,2,'Location salle');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(19,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(19,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(20,1,'Débours');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(20,2,'Débours');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(20,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(20,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(21,1,'Rabais');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(21,2,'Rabais');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(21,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(21,4,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(22,1,'Service en chambre');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(22,2,'Service en chambre');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(22,3,'0');
INSERT INTO SERVICESDETAILS(SERVICE_ID,SERVICEFIELD_ID, FIELDVALUE) VALUES(22,4,'0');
COMMIT;

INSERT INTO USERS(ID, LOGIN, ENCRYPTEDPASS, ISRECEPTIONIST, ISMANAGERX, ISMANAGERZ, ISADMINISTRATOR) VALUES(0, 'hotel','EE26B0DD4AF7E749AA1A8EE3C10AE9923F618980772E473F8819A5D4940E0DB27AC185F8A0E1D5F84F88BC887FD67B143732C304CC5FA9AD8E6F57F50028A8FF','1','0','0','0');
INSERT INTO USERS(ID, LOGIN, ENCRYPTEDPASS, ISRECEPTIONIST, ISMANAGERX, ISMANAGERZ, ISADMINISTRATOR) VALUES(0, 'manX','EE26B0DD4AF7E749AA1A8EE3C10AE9923F618980772E473F8819A5D4940E0DB27AC185F8A0E1D5F84F88BC887FD67B143732C304CC5FA9AD8E6F57F50028A8FF','1','1','0','0');
INSERT INTO USERS(ID, LOGIN, ENCRYPTEDPASS, ISRECEPTIONIST, ISMANAGERX, ISMANAGERZ, ISADMINISTRATOR) VALUES(0, 'manZ','EE26B0DD4AF7E749AA1A8EE3C10AE9923F618980772E473F8819A5D4940E0DB27AC185F8A0E1D5F84F88BC887FD67B143732C304CC5FA9AD8E6F57F50028A8FF','1','1','1','0');
INSERT INTO USERS(ID, LOGIN, ENCRYPTEDPASS, ISRECEPTIONIST, ISMANAGERX, ISMANAGERZ, ISADMINISTRATOR) VALUES(0, 'admin','EE26B0DD4AF7E749AA1A8EE3C10AE9923F618980772E473F8819A5D4940E0DB27AC185F8A0E1D5F84F88BC887FD67B143732C304CC5FA9AD8E6F57F50028A8FF','0','0','1','1');
INSERT INTO TRAINEES(ID, LOGIN, ENCRYPTEDPASS) VALUES(0,'formation','EE26B0DD4AF7E749AA1A8EE3C10AE9923F618980772E473F8819A5D4940E0DB27AC185F8A0E1D5F84F88BC887FD67B143732C304CC5FA9AD8E6F57F50028A8FF');
COMMIT;


