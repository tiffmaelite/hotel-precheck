CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;


SET TERM !! ;
CREATE PROCEDURE RESTARTYEARLYBALANCE (RESTARTYEAR INT)
AS
DECLARE NOWTIMESTAMP TIMESTAMP = CURRENT_TIMESTAMP;
DECLARE OLDBALANCE DOUBLE = 0.0;
DECLARE CURRENTBALANCE DOUBLE = 0.0;
BEGIN
SELECT BALANCE FROM YEARLYBALANCECOUNTER WHERE YEARLOG = (:RESTARTYEAR-1) INTO :OLDBALANCE;
IF :OLDBALANCE IS NULL THEN
	OLDBALANCE = 0.0;
END IF;
SELECT BALANCE FROM BALANCELOG WHERE YEARLOG = (:RESTARTYEAR-1) INTO :CURRENTBALANCE;
IF :CURRENTBALANCE IS NOT NULL THEN
	UPDATE BALANCELOG SET BALANCE = (:OLDBALANCE + :CURRENTBALANCE) WHERE YEARLOG =(:RESTARTYEAR-1);
ELSE
INSERT INTO BALANCELOG(YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES ((:RESTARTYEAR-1), 0, 0, 0, :OLDBALANCE);
END IF;
-- CREATE new counter (ràz)
INSERT INTO YEARLYBALANCECOUNTER(CREATIONTIME, YEARLOG, BALANCE) VALUES (:NOWTIMESTAMP, :RESTARTYEAR, 0);
END!!

CREATE PROCEDURE RESTARTMONTHLYBALANCE (RESTARTYEAR INT, RESTARTMONTH INT)
AS
DECLARE NOWTIMESTAMP TIMESTAMP = CURRENT_TIMESTAMP;
DECLARE OLDBALANCE DOUBLE = 0.0;
DECLARE CURRENTBALANCE DOUBLE = 0.0;
DECLARE PREVIOUSYEAR INT;
BEGIN
IF :RESTARTMONTH = 1 THEN
:PREVIOUSYEAR = :RESTARTYEAR-1;
ELSE
:PREVIOUSYEAR = :RESTARTYEAR;
END IF;
SELECT BALANCE FROM MONTHLYBALANCECOUNTER WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = (:RESTARTMONTH-1) INTO :OLDBALANCE;
IF :OLDBALANCE IS NULL THEN
	OLDBALANCE = 0.0;
END IF;
SELECT BALANCE FROM BALANCELOG WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = (:RESTARTMONTH-1) INTO :CURRENTBALANCE;
IF :CURRENTBALANCE IS NOT NULL THEN
	UPDATE BALANCELOG SET BALANCE = (:OLDBALANCE + :CURRENTBALANCE) WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = (:RESTARTMONTH-1);
ELSE
INSERT INTO BALANCELOG(YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES (:PREVIOUSYEAR, (:RESTARTMONTH-1), 0, 0, :OLDBALANCE);
END IF;
-- CREATE new counter (ràz)
INSERT INTO MONTHLYBALANCECOUNTER(CREATIONTIME, YEARLOG, MONTHLOG, BALANCE) VALUES (:NOWTIMESTAMP, :RESTARTYEAR, :RESTARTMONTH, 0);
END!!



CREATE PROCEDURE RESTARTDAILYBALANCE (RESTARTYEAR INT, RESTARTMONTH INT, RESTARTDAY INT)
AS
DECLARE NOWTIMESTAMP TIMESTAMP = CURRENT_TIMESTAMP;
DECLARE OLDBALANCE DOUBLE = 0.0;
DECLARE CURRENTBALANCE DOUBLE = 0.0;
DECLARE PREVIOUSYEAR INT;
DECLARE PREVIOUSMONTH INT;
BEGIN
IF :RESTARTMONTH = 1 THEN
:PREVIOUSYEAR = :RESTARTYEAR-1;
ELSE
:PREVIOUSYEAR = :RESTARTYEAR;
END IF;
IF :RESTARTDAY = 1 THEN
:PREVIOUSMONTH = :RESTARTMONTH-1;
ELSE
:PREVIOUSMONTH = :RESTARTMONTH;
END IF;
SELECT BALANCE FROM DAYBALANCECOUNTER WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = (:RESTARTDAY-1) INTO :OLDBALANCE;
IF :OLDBALANCE IS NULL THEN
	OLDBALANCE = 0.0;
END IF;
SELECT BALANCE FROM BALANCELOG WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = (:RESTARTDAY-1) INTO :CURRENTBALANCE;
IF :CURRENTBALANCE IS NOT NULL THEN
	UPDATE BALANCELOG SET BALANCE = (:OLDBALANCE + :CURRENTBALANCE) WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = (:RESTARTDAY-1);
ELSE
INSERT INTO BALANCELOG(YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES (:PREVIOUSYEAR, :PREVIOUSMONTH, (:RESTARTDAY-1), 0, :OLDBALANCE);
END IF;
-- CREATE new counter (ràz)
INSERT INTO DAYLYBALANCECOUNTER(CREATIONTIME, YEARLOG, MONTHLOG, DAYLOG, BALANCE) VALUES (:NOWTIMESTAMP, :RESTARTYEAR, :RESTARTMONTH, :RESTARTDAY, 0);
END!!


CREATE PROCEDURE RESTARTHOURLYBALANCE (RESTARTYEAR INT, RESTARTMONTH INT, RESTARTDAY INT, RESTARTHOUR INT)
AS
DECLARE NOWTIMESTAMP TIMESTAMP = CURRENT_TIMESTAMP;
DECLARE OLDBALANCE DOUBLE = 0.0;
DECLARE CURRENTBALANCE DOUBLE = 0.0;
DECLARE PREVIOUSYEAR INT;
DECLARE PREVIOUSMONTH INT;
DECLARE PREVIOUSDAY INT;
BEGIN
IF :RESTARTMONTH = 1 THEN
:PREVIOUSYEAR = :RESTARTYEAR-1;
ELSE
:PREVIOUSYEAR = :RESTARTYEAR;
END IF;
IF :RESTARTDAY = 1 THEN
:PREVIOUSMONTH = :RESTARTMONTH-1;
ELSE
:PREVIOUSMONTH = :RESTARTMONTH;
END IF;
IF :RESTARTHOUR = 1 THEN
:PREVIOUSDAY = :PREVIOUSDAY-1;
ELSE
:PREVIOUSDAY = :PREVIOUSDAY;
END IF;
SELECT BALANCE FROM HOURLYBALANCECOUNTER WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = (:RESTARTDAY-1) INTO :OLDBALANCE;
IF :OLDBALANCE IS NULL THEN
	OLDBALANCE = 0.0;
END IF;
SELECT BALANCE FROM BALANCELOG WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = :PREVIOUSDAY AND HOURLOG = (:RESTARTHOUR-1) INTO :CURRENTBALANCE;
IF :CURRENTBALANCE IS NOT NULL THEN
BEGIN
	UPDATE BALANCELOG SET BALANCE = (:OLDBALANCE + :CURRENTBALANCE) WHERE YEARLOG = :PREVIOUSYEAR AND MONTHLOG = :PREVIOUSMONTH AND DAYLOG = :PREVIOUSDAY AND HOURLOG = (:RESTARTHOUR-1);
END
ELSE
BEGIN
INSERT INTO BALANCELOG(YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES (:PREVIOUSYEAR, :PREVIOUSMONTH, :PREVIOUSDAY, (:RESTARTHOUR-1), :OLDBALANCE);
END
-- CREATE new counter (ràz)
INSERT INTO HOURLYBALANCECOUNTER(CREATIONTIME, YEARLOG, MONTHLOG, DAYLOG, HOURLOG, BALANCE) VALUES (:NOWTIMESTAMP, :RESTARTYEAR, :RESTARTMONTH, :RESTARTDAY, :RESTARTHOUR, 0;
END!!


CREATE PROCEDURE INCREMENTHOURLYCOUNTERBY (SUPPLEMENT AS DOUBLE)
AS
BEGIN
UPDATE HOURLYBALANCECOUNTER SET BALANCE = BALANCE+:SUPPLEMENT WHERE CREATIONTIME >= MAX(CREATIONTIME);
END!!


CREATE PROCEDURE INCREMENTDAYLYCOUNTERBY (SUPPLEMENT AS DOUBLE)
AS
BEGIN
UPDATE DAYLYBALANCECOUNTER SET BALANCE = BALANCE+:SUPPLEMENT WHERE CREATIONTIME >= MAX(CREATIONTIME);
END!!


CREATE PROCEDURE INCREMENTMONTHLYCOUNTERBY (SUPPLEMENT AS DOUBLE)
AS
BEGIN
UPDATE MONTHLYBALANCECOUNTER SET BALANCE = BALANCE+:SUPPLEMENT WHERE CREATIONTIME >= MAX(CREATIONTIME);
END!!


CREATE PROCEDURE INCREMENTYEARLYCOUNTERBY (SUPPLEMENT AS DOUBLE)
AS
BEGIN
UPDATE YEARLYBALANCECOUNTER SET BALANCE = BALANCE+:SUPPLEMENT WHERE CREATIONTIME >= MAX(CREATIONTIME);
END!!

SET TERM ; !!

 
COMMIT;

SET TERM !! ;

CREATE TRIGGER TR_MONTHLOG FOR MONTHLYBALANCECOUNTER
ACTIVE BEFORE UPDATE position 0
AS
BEGIN
IF ((new.BALANCE IS NOT NULL) AND (new.BALANCE > 0)) THEN
BEGIN
EXECUTE INCREMENTYEARLYCOUNTERBY(new.BALANCE-old.BALANCE);
END
END!!

CREATE TRIGGER TR_DAYLOG FOR DAYLYBALANCECOUNTER
ACTIVE BEFORE UPDATE position 0
AS
BEGIN
IF ((new.BALANCE IS NOT NULL) AND (new.BALANCE > 0)) THEN
BEGIN
EXECUTE INCREMENTMONTHLYCOUNTERBY(new.BALANCE-old.BALANCE);
END
END!!

CREATE TRIGGER TR_HOURLOG FOR HOURLYBALANCECOUNTER
ACTIVE BEFORE UPDATE position 0
AS
BEGIN
IF ((new.BALANCE IS NOT NULL) AND (new.BALANCE > 0)) THEN
BEGIN
EXECUTE INCREMENTDAYLYCOUNTERBY(new.BALANCE-old.BALANCE);
END
END!!


CREATE TRIGGER TR_REGISTERCHARGING FOR CHARGEDSERVICES
ACTIVE BEFORE UPDATE position 0
AS
BEGIN
IF ((new.ISPAYED = '1') AND (old.ISPAYED != '1')) THEN
BEGIN
EXECUTE INCREMENTHOURLYCOUNTERBY(new.CHARGEDUNITYPRICE*(1+VAT_PERCENTAGE)*new.QUANTITY);
END
END!!

SET TERM ; !!

COMMIT;
