CONNECT precheck-hotel USER 'precheck' PASSWORD 'hotel';

COMMIT;

EXECUTE SELECT pivotcode('SERVICESDETAILS','SERVICES_ID','SERVICEFIELD_ID','string_agg(FIELDVALUE,'','')','SQLTYPE','SERVICESFIELDS') INTO SERVICESDETAILSPIVOT;


CREATE VIEW SERVICESINFOS AS
SELECT
SERVICES.ID AS ID, SERVICEFAMILY_ID, SERVICESFAMILIES.LABEL AS SERVICEFAMILY, SERVICETYPE_ID, SERVICESTYPES.LABEL AS SERVICETYPE, SERVICES.NAME AS SERVICENAME, SERVICESTYPES.ROOMNEEDED AS ROOMNEEDED, SERVICES.ISAVAILABLE AS ISAVAILABLE, VAT_ID, TAXES.LABEL AS VAT, SERVICESDETAILSPIVOT.*
FROM SERVICES
LEFT JOIN SERVICESTYPES ON SERVICES.SERVICETYPE_ID=SERVICESTYPES.ID
LEFT JOIN SERVICESFAMILIES ON SERVICESTYPES.SERVICEFAMILY_ID=SERVICESFAMILIES.ID
LEFT JOIN SERVICESDETAILSPIVOT ON SERVICESDETAILSPIVOT.SERVICE_ID=SERVICES.ID
LEFT JOIN TAXES ON SERVICESTYPES.VAT_ID = TAXES.ID
ORDER BY SERVICEFAMILY, SERVICETYPE, SERVICENAME--,
--GROUP BY SERVICES.ID
WITH CASCADING CHECK OPTION;

COMMIT;

--CREATE OR REPLACE FUNCTION SERVICESINFOS_PROPAGECHANGES() RETURNS TRIGGER AS $$
--BEGIN
--
-- Perform the required operation on required tables
--
--IF (TG_OP = 'DELETE') THEN
--DELETE FROM SERVICES WHERE ID = OLD.ID;
--IF NOT FOUND THEN RETURN NULL; END IF;
--
--ELSIF (TG_OP = 'UPDATE') THEN
--UPDATE SERVICES SET NAME=NEW.SERVICENAME, SERVICETYPE_ID=NEW.SERVICETYPE, ISAVAILABLE=NEW.ISAVAILABLE WHERE ID = OLD.ID;
--IF NOT FOUND THEN RETURN NULL; END IF;
--
--UPDATE SERVICESTYPES SET ROOMNEEDED=NEW.ROOMNEEDED, LABEL=NEW.SERVICETYPE, SERVICEFAMILY_ID=NEW.SERVICEFAMILY_ID WHERE ID = OLD.SERVICETYPE_ID;
--IF NOT FOUND THEN RETURN NULL; END IF;
--
--ELSIF (TG_OP = 'INSERT') THEN
--INSERT INTO SERVICESFAMILIES(ID, LABEL) VALUES(0, NEW.SERVICEFAMILY);
--INSERT INTO TAXES(ID, LABEL) VALUES(0, NEW.VAT);
--INSERT INTO SERVICESTYPES(ID, LABEL, SERVICEFAMILY_ID, VAT_ID, ROOMNEEDED) VALUES(0, NEW.SERVICETYPE, NEW.SERVICEFAMILY_ID, NEW.VAT_ID,NEW.ROOMNEEDED);
--INSERT INTO SERVICES(ID, SERVICETYPE_ID, NAME, ISAVAILABLE) VALUES(0, NEW.SERVICETYPE_ID, NEW.SERVICENAME, NEW.ISAVAILABLE);
--
--END IF;
--
--END;
--$$ LANGUAGE plpgsql;
--
--COMMIT;
--
--CREATE TRIGGER SERVICESINFOS_VIEWINSERT
--INSTEAD OF INSERT OR UPDATE OR DELETE ON SERVICESINFOS
--FOR EACH ROW
--EXECUTE PROCEDURE SERVICESINFOS_PROPAGECHANGES();

--COMMIT;
