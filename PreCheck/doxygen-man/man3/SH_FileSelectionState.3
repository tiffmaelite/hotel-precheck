.TH "SH_FileSelectionState" 3 "Mardi Juillet 2 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_FileSelectionState \- 
.PP
The \fBSH_FileSelectionState\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_FileSelectionState\&.h>\fP
.PP
Est dérivée de \fBSH_InOutState\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "virtual void \fBsetInput\fP (const QVariant &\fBinput\fP)"
.br
.ti -1c
.RI "virtual void \fBsetOutput\fP (const QString &\fBoutput\fP)"
.br
.ti -1c
.RI "virtual void \fBsetVisibility\fP (bool isVisible)"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.ti -1c
.RI "void \fBresendInput\fP (QVariant \fBinput\fP)"
.br
.ti -1c
.RI "void \fBsendOutput\fP (QVariant \fBoutput\fP)"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_FileSelectionState\fP (QString \fBoutput\fP, QString \fBname\fP, \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "void \fBdisplay\fP (bool canDisplay)"
.br
.ti -1c
.RI "void \fBemitResendInput\fP ()"
.br
.ti -1c
.RI "void \fBemitSendOutput\fP ()"
.br
.ti -1c
.RI "virtual QVariant \fBinput\fP () const "
.br
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "virtual QString \fBoutput\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBrawInput\fP () const "
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.ti -1c
.RI "bool \fBvisibility\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.in -1c
.SH "Description détaillée"
.PP 
The \fBSH_FileSelectionState\fP class\&. 
.PP
Définition à la ligne 9 du fichier SH_FileSelectionState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_FileSelectionState::SH_FileSelectionState (QStringoutput, QStringname, \fBQState\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 8 du fichier SH_FileSelectionState\&.cpp\&.
.PP
.nf
8                                                                                          :
9     SH_InOutState(output, name, parent)
10 {
11 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "SH_InOutState::display (boolcanDisplay)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIcanDisplay\fP 
.RE
.PP

.PP
Définition à la ligne 80 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::emitSendOutput(), et SH_InOutState::m_display\&.
.PP
.nf
81 {
82         m_display=canDisplay;
83         emitSendOutput();
84 }
.fi
.SS "void SH_InOutState::emitResendInput ()\fC [inherited]\fP"

.PP
Définition à la ligne 92 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_input, SH_InOutState::m_isVisible, et SH_InOutState::resendInput()\&.
.PP
Référencé par SH_InOutState::setInput(), et SH_InOutState::SH_InOutState()\&.
.PP
.nf
92                                     {
93     if(isRunning() && m_isVisible) {
94         emit resendInput(m_input);
95     }
96 }
.fi
.SS "void SH_InOutState::emitSendOutput ()\fC [inherited]\fP"

.PP
Définition à la ligne 86 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_display, SH_InOutState::m_isVisible, SH_InOutState::m_output, et SH_InOutState::sendOutput()\&.
.PP
Référencé par SH_InOutState::display(), SH_InOutState::setOutput(), et SH_InOutState::SH_InOutState()\&.
.PP
.nf
86                                    {
87     if(isRunning() && m_display && !m_output\&.isEmpty() && m_isVisible) {
88         emit sendOutput(QVariant(m_output));
89     }
90 }
.fi
.SS "SH_GenericState::goNext ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), SH_AdaptDatabaseState::insertUpdate(), SH_StatementState::onEntry(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_GenericState::SH_GenericState(), SH_InOutState::SH_InOutState(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_InOutState::input () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 19 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_input\&.
.PP
Référencé par SH_InOutState::rawInput(), SH_DateQuestionState::rawInput(), et SH_InOutState::setInput()\&.
.PP
.nf
20 {
21     return m_input;
22 }
.fi
.SS "SH_GenericState::isRunning ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 81 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_GenericState::m_isRunning\&.
.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), SH_GenericState::emitGoNext(), SH_InOutState::emitResendInput(), SH_InOutState::emitSendOutput(), SH_InOutState::setInput(), SH_InOutState::setOutput(), et SH_InOutState::setVisibility()\&.
.PP
.nf
82 {
83     return m_isRunning;
84 }
.fi
.SS "SH_GenericState::next ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_GenericState::emitGoNext()\&.
.SS "SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 60 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), SH_GenericState::m_isRunning, SH_NamedObject::name(), et SH_GenericState::onTransitionTriggered()\&.
.PP
Référencé par SH_StatementState::onEntry()\&.
.PP
.nf
61 {
62     Q_UNUSED(event);
63     foreach (QAbstractTransition* tr, transitions()) {
64         connect(tr, SIGNAL(triggered()), this, SLOT(onTransitionTriggered()));
65     }
66     m_isRunning = true;
67     this->blockSignals(!m_isRunning);
68     SH_MessageManager::debugMessage(QString("Machine: %1, entered state %2")\&.arg(machine()->objectName())\&.arg(name()));
69 }
.fi
.SS "SH_GenericState::onExit (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 74 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), SH_GenericState::m_isRunning, et SH_NamedObject::name()\&.
.PP
.nf
75 {
76     Q_UNUSED(event);
77     m_isRunning = false;
78     this->blockSignals(!m_isRunning);
79     SH_MessageManager::debugMessage(QString("Machine: %1, exited state %2")\&.arg(machine()->objectName())\&.arg(name()));
80 }
.fi
.SS "SH_InOutState::output () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 47 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_output\&.
.PP
Référencé par SH_QuestionState::checkValidity(), et SH_InOutState::setOutput()\&.
.PP
.nf
48 {
49     return m_output;
50 }
.fi
.SS "SH_InOutState::rawInput () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Réimplémentée dans \fBSH_DateQuestionState\fP, et \fBSH_DatabaseContentQuestionState\fP\&.
.PP
Définition à la ligne 27 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::input()\&.
.PP
Référencé par SH_InOutStateMachine::addIOState()\&.
.PP
.nf
28 {
29     return input();
30 }
.fi
.SS "SH_InOutState::resendInput (QVariantinput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), et SH_InOutState::emitResendInput()\&.
.SS "SH_InOutState::sendOutput (QVariantoutput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), et SH_InOutState::emitSendOutput()\&.
.SS "SH_InOutState::setInput (const QVariant &input)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Réimplémentée dans \fBSH_QuestionState\fP, et \fBSH_StatementState\fP\&.
.PP
Définition à la ligne 35 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::emitResendInput(), SH_InOutState::input(), SH_GenericState::isRunning(), et SH_InOutState::m_input\&.
.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_QuestionState::checkValidity(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
36 {
37     if(isRunning() && input != this->input()) {
38         //SH_MessageManager::infoMessage("new input " + input\&.toString());
39         m_input = input;
40         emitResendInput();
41     }
42 }
.fi
.SS "SH_InOutState::setOutput (const QString &output)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Réimplémentée dans \fBSH_DatabaseContentQuestionState\fP\&.
.PP
Définition à la ligne 55 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::emitSendOutput(), SH_GenericState::isRunning(), SH_InOutState::m_output, et SH_InOutState::output()\&.
.PP
Référencé par SH_DatabaseContentQuestionState::setOutput(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
56 {
57     if(isRunning() && output != this->output()) {
58         m_output = output;
59         emitSendOutput();
60     }
61 }
.fi
.SS "SH_InOutState::setVisibility (boolisVisible)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIisVisible\fP 
.RE
.PP

.PP
Définition à la ligne 66 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_isVisible, et SH_InOutState::visibility()\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
67 {
68     if(isRunning() && isVisible!=this->visibility()) {
69         m_isVisible = isVisible;
70     }
71 }
.fi
.SS "SH_GenericState::toString ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 23 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_NamedObject::toString(), et SH_GenericState::toString()\&.
.PP
Référencé par SH_QuestionState::checkValidity(), SH_DateQuestionState::rawInput(), SH_GenericStateMachine::toString(), et SH_GenericState::toString()\&.
.PP
.nf
24 {
25     QStateMachine* machine = this->machine();
26     SH_GenericState* mach = qobject_cast<SH_GenericState *>(machine);
27     if(mach) {
28         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
29     } else {
30         return SH_NamedObject::toString();
31     }
32 }
.fi
.SS "SH_InOutState::visibility ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 76 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_isVisible\&.
.PP
Référencé par SH_InOutState::setVisibility()\&.
.PP
.nf
76                                {
77     return m_isVisible;
78 }
.fi


.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
