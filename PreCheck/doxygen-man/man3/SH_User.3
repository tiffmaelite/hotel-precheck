.TH "SH_User" 3 "Lundi Juin 24 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_User \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_User\&.h>\fP
.PP
Est dérivée de \fBQObject\fP\&.
.PP
Dérivée par \fBSH_Trainee\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "static QVariant \fBexists\fP (QVariant login)"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBnameChanged\fP ()"
.br
.ti -1c
.RI "void \fBrolesChanged\fP ()"
.br
.ti -1c
.RI "void \fBvalidityChanged\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_User\fP (QString \fBname\fP='', int \fBid\fP=0, bool \fBisReceptionist\fP=false, bool \fBisManagerX\fP=false, bool \fBisManagerZ\fP=false, bool \fBisAdministrator\fP=false, \fBQObject\fP *parent=0)"
.br
.ti -1c
.RI "int \fBid\fP () const "
.br
.ti -1c
.RI "bool \fBisAdministrator\fP () const "
.br
.ti -1c
.RI "bool \fBisManagerX\fP () const "
.br
.ti -1c
.RI "bool \fBisManagerZ\fP () const "
.br
.ti -1c
.RI "bool \fBisReceptionist\fP () const "
.br
.ti -1c
.RI "bool \fBisValid\fP () const "
.br
.ti -1c
.RI "QString \fBname\fP () const "
.br
.ti -1c
.RI "int \fBroles\fP () const "
.br
.in -1c
.SS "Fonctions membres publiques statiques"

.in +1c
.ti -1c
.RI "static \fBSH_User\fP * \fBlogIn\fP (QString login, QString pass)"
.br
.ti -1c
.RI "static bool \fBtraineeExists\fP (QString login)"
.br
.ti -1c
.RI "static bool \fBuserExists\fP (QString login)"
.br
.in -1c
.SS "Propriétés"

.in +1c
.ti -1c
.RI "bool \fBadministrator\fP"
.br
.ti -1c
.RI "int \fBid\fP"
.br
.ti -1c
.RI "bool \fBmanagerX\fP"
.br
.ti -1c
.RI "bool \fBmanagerZ\fP"
.br
.ti -1c
.RI "QString \fBname\fP"
.br
.ti -1c
.RI "bool \fBreceptionist\fP"
.br
.ti -1c
.RI "int \fBroles\fP"
.br
.ti -1c
.RI "bool \fBvalid\fP"
.br
.in -1c
.SS "Fonctions membres privées"

.in +1c
.ti -1c
.RI "void \fBsetID\fP (int \fBid\fP)"
.br
.ti -1c
.RI "void \fBsetName\fP (QString \fBname\fP)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "bool \fBm_administrator\fP"
.br
.RI "\fIm_administrator \fP"
.ti -1c
.RI "int \fBm_id\fP"
.br
.RI "\fIm_id \fP"
.ti -1c
.RI "bool \fBm_managerX\fP"
.br
.RI "\fIm_managerX \fP"
.ti -1c
.RI "bool \fBm_managerZ\fP"
.br
.RI "\fIm_managerZ \fP"
.ti -1c
.RI "QString \fBm_name\fP"
.br
.RI "\fIm_name \fP"
.ti -1c
.RI "bool \fBm_receptionist\fP"
.br
.RI "\fIm_receptionist \fP"
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 15 du fichier SH_User\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_User::SH_User (QStringname = \fC''\fP, intid = \fC0\fP, boolisReceptionist = \fCfalse\fP, boolisManagerX = \fCfalse\fP, boolisManagerZ = \fCfalse\fP, boolisAdministrator = \fCfalse\fP, \fBQObject\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 15 du fichier SH_User\&.cpp\&.
.PP
Références isAdministrator(), isManagerX(), isManagerZ(), isReceptionist(), m_administrator, m_managerX, m_managerZ, m_receptionist, setID(), et setName()\&.
.PP
Référencé par logIn()\&.
.PP
.nf
16     : QObject(parent)
17 {
18     this->setName(name);
19     this->setID(id);
20     this->m_receptionist = isReceptionist;
21     this->m_managerX = isManagerX;
22     this->m_managerZ = isManagerZ;
23     this->m_administrator = isAdministrator;
24 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "SH_User::exists (QVariantlogin)\fC [inline]\fP, \fC [static]\fP, \fC [slot]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIlogin\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 132 du fichier SH_User\&.h\&.
.PP
Références traineeExists(), et userExists()\&.
.PP
Référencé par SH_ApplicationCore::setMode(), et SH_ApplicationCore::userExists()\&.
.PP
.nf
132 {return QVariant(SH_User::userExists(login\&.toString()) || SH_User::traineeExists(login\&.toString()));}
.fi
.SS "int SH_User::id () const\fC [inline]\fP"

.PP
Définition à la ligne 54 du fichier SH_User\&.h\&.
.PP
Références m_id\&.
.PP
Référencé par setID()\&.
.PP
.nf
54 { return this->m_id; }
.fi
.SS "SH_User::isAdministrator () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 82 du fichier SH_User\&.h\&.
.PP
Références m_administrator\&.
.PP
Référencé par SH_ApplicationCore::setMode(), et SH_User()\&.
.PP
.nf
82 { return this->m_administrator; }
.fi
.SS "SH_User::isManagerX () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 68 du fichier SH_User\&.h\&.
.PP
Références m_managerX\&.
.PP
Référencé par SH_ApplicationCore::setMode(), et SH_User()\&.
.PP
.nf
68 { return this->m_managerX; }
.fi
.SS "SH_User::isManagerZ () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 75 du fichier SH_User\&.h\&.
.PP
Références m_managerZ\&.
.PP
Référencé par SH_ApplicationCore::setMode(), et SH_User()\&.
.PP
.nf
75 { return this->m_managerZ; }
.fi
.SS "SH_User::isReceptionist () const"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 64 du fichier SH_User\&.cpp\&.
.PP
Références m_receptionist\&.
.PP
Référencé par SH_ApplicationCore::setMode(), et SH_User()\&.
.PP
.nf
65 {
66     return this->m_receptionist;
67 }
.fi
.SS "SH_User::isValid () const"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 32 du fichier SH_User\&.cpp\&.
.PP
Références m_id, et m_name\&.
.PP
Référencé par logIn(), SH_ApplicationCore::setUser(), et SH_ApplicationCore::userLogOut()\&.
.PP
.nf
32                             {
33     return ((!this->m_name\&.isEmpty()) && (this->m_id != 0));
34 }
.fi
.SS "SH_User::logIn (QStringlogin, QStringpass)\fC [static]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIlogin\fP 
.br
\fIpass\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
User 
.RE
.PP

.PP
Définition à la ligne 132 du fichier SH_User\&.cpp\&.
.PP
Références SH_DatabaseManager::execSelectQuery(), SH_DatabaseManager::getInstance(), isValid(), SH_User(), traineeExists(), et userExists()\&.
.PP
Référencé par SH_ApplicationCore::setUser()\&.
.PP
.nf
133 {
134     qDebug() << "log in";
135     bool isValid = false;
136     QCryptographicHash encPass(QCryptographicHash::Sha512);
137     encPass\&.addData(pass\&.toUtf8());
138     bool trainee=false;
139     QStringList fields;
140     QString table;
141     if(userExists(login)) {
142         fields << "ID" << "LOGIN" << "ISRECEPTIONIST" << "ISMANAGERX" << "ISMANAGERZ" << "ISADMINISTRATOR";
143         table ="USERS";
144     } else if(traineeExists(login)) {
145         fields << "ID" << "LOGIN";
146         table ="TRAINEES";
147         trainee=true;
148     }
149     QSqlQuery result = SH_DatabaseManager::getInstance()->execSelectQuery(table,fields,"LOGIN='"+login+"' AND ENCRYPTEDPASS='"+QString::fromLatin1(encPass\&.result()\&.toHex())\&.toUpper()+"'");
150     if(result\&.next()) {
151         QSqlRecord rec = result\&.record();
152         if(rec\&.isEmpty() || !result\&.isValid()) {
153             isValid = false;
154         } else {
155             isValid = (rec\&.value(rec\&.indexOf("LOGIN"))\&.toString() == login);
156         }
157 
158         if(isValid) {
159             if(trainee) {
160                 return new SH_Trainee(rec\&.value(rec\&.indexOf("LOGIN"))\&.toString(),rec\&.value(rec\&.indexOf("ID"))\&.toInt());
161             } else {
162                 return new SH_User(rec\&.value(rec\&.indexOf("LOGIN"))\&.toString(),rec\&.value(rec\&.indexOf("ID"))\&.toInt(),(rec\&.value(rec\&.indexOf("ISRECEPTIONIST"))\&.toString()=="1"),(rec\&.value(rec\&.indexOf("ISMANAGERX"))\&.toString()=="1"),(rec\&.value(rec\&.indexOf("ISMANAGERZ"))\&.toString()=="1"),(rec\&.value(rec\&.indexOf("ISADMINISTRATOR"))\&.toString()=="1"));
163             }
164         }
165     }
166     return new SH_User();
167 }
.fi
.SS "QString SH_User::name () const"

.PP
Référencé par setName()\&.
.SS "SH_User::nameChanged ()\fC [signal]\fP"

.SS "int SH_User::roles () const"

.SS "SH_User::rolesChanged ()\fC [signal]\fP"

.SS "SH_User::setID (intid)\fC [private]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIid\fP 
.RE
.PP

.PP
Définition à la ligne 99 du fichier SH_User\&.cpp\&.
.PP
Références id(), et m_id\&.
.PP
Référencé par SH_User()\&.
.PP
.nf
100 {
101     m_id = id;
102 }
.fi
.SS "SH_User::setName (QStringname)\fC [private]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIname\fP 
.RE
.PP

.PP
Définition à la ligne 42 du fichier SH_User\&.cpp\&.
.PP
Références m_name, et name()\&.
.PP
Référencé par SH_User()\&.
.PP
.nf
43 {
44     m_name = name;
45 }
.fi
.SS "SH_User::traineeExists (QStringlogin)\fC [static]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIlogin\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 121 du fichier SH_User\&.cpp\&.
.PP
Références SH_DatabaseManager::getInstance()\&.
.PP
Référencé par exists(), et logIn()\&.
.PP
.nf
121                                          {
122     qDebug() << "trainee exists";
123     return (SH_DatabaseManager::getInstance()->dataCount("TRAINEES", "LOGIN='"+login+"'") == 1);
124 }
.fi
.SS "SH_User::userExists (QStringlogin)\fC [static]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIlogin\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 110 du fichier SH_User\&.cpp\&.
.PP
Références SH_DatabaseManager::getInstance()\&.
.PP
Référencé par exists(), et logIn()\&.
.PP
.nf
110                                       {
111     qDebug() << "user exists";
112     return (SH_DatabaseManager::getInstance()->dataCount("USERS", "LOGIN='"+login+"'") == 1);
113 }
.fi
.SS "SH_User::validityChanged ()\fC [signal]\fP"

.SH "Documentation des données membres"
.PP 
.SS "bool SH_User::m_administrator\fC [private]\fP"

.PP
m_administrator 
.PP
Définition à la ligne 188 du fichier SH_User\&.h\&.
.PP
Référencé par isAdministrator(), et SH_User()\&.
.SS "int SH_User::m_id\fC [private]\fP"

.PP
m_id 
.PP
Définition à la ligne 192 du fichier SH_User\&.h\&.
.PP
Référencé par id(), isValid(), et setID()\&.
.SS "bool SH_User::m_managerX\fC [private]\fP"

.PP
m_managerX 
.PP
Définition à la ligne 180 du fichier SH_User\&.h\&.
.PP
Référencé par isManagerX(), et SH_User()\&.
.SS "bool SH_User::m_managerZ\fC [private]\fP"

.PP
m_managerZ 
.PP
Définition à la ligne 184 du fichier SH_User\&.h\&.
.PP
Référencé par isManagerZ(), et SH_User()\&.
.SS "QString SH_User::m_name\fC [private]\fP"

.PP
m_name 
.PP
Définition à la ligne 172 du fichier SH_User\&.h\&.
.PP
Référencé par isValid(), et setName()\&.
.SS "bool SH_User::m_receptionist\fC [private]\fP"

.PP
m_receptionist 
.PP
Définition à la ligne 176 du fichier SH_User\&.h\&.
.PP
Référencé par isReceptionist(), et SH_User()\&.
.SH "Documentation des propriétés"
.PP 
.SS "bool SH_User::administrator\fC [read]\fP"

.PP
Définition à la ligne 23 du fichier SH_User\&.h\&.
.SS "SH_User::id\fC [read]\fP"

.PP
\fBRenvoie:\fP
.RS 4
int 
.RE
.PP

.PP
Définition à la ligne 18 du fichier SH_User\&.h\&.
.PP
Référencé par SH_ApplicationCore::launchBillThread()\&.
.SS "bool SH_User::managerX\fC [read]\fP"

.PP
Définition à la ligne 21 du fichier SH_User\&.h\&.
.SS "bool SH_User::managerZ\fC [read]\fP"

.PP
Définition à la ligne 22 du fichier SH_User\&.h\&.
.SS "SH_User::name\fC [read]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 19 du fichier SH_User\&.h\&.
.PP
Référencé par SH_ApplicationCore::setMode(), et SH_ApplicationCore::setUser()\&.
.SS "bool SH_User::receptionist\fC [read]\fP"

.PP
Définition à la ligne 20 du fichier SH_User\&.h\&.
.SS "SH_User::roles\fC [read]\fP"

.PP
\fBRenvoie:\fP
.RS 4
int 
.RE
.PP

.PP
Définition à la ligne 24 du fichier SH_User\&.h\&.
.SS "bool SH_User::valid\fC [read]\fP"

.PP
Définition à la ligne 25 du fichier SH_User\&.h\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
