.TH "SH_ExtendedProxyModel" 3 "Mardi Juillet 2 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_ExtendedProxyModel \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_ExtendedSqlProxyModel\&.h>\fP
.PP
Est dérivée de \fBQSortFilterProxyModel\fP\&.
.PP
Dérivée par \fBSH_BillingsTableModel\fP, \fBSH_BillsTableModel\fP, \fBSH_BookingsTableModel\fP, \fBSH_ClientsTableModel\fP, \fBSH_GroupsTableModel\fP, \fBSH_RoomsTableModel\fP, \fBSH_ServicesTableModel\fP, \fBSH_TraineesTableModel\fP, \fBSH_UsersTableModel\fP, et \fBSH_VATTableModel\fP\&.
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBsortChanged\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_ExtendedProxyModel\fP (\fBQObject\fP *parent=0)"
.br
.ti -1c
.RI "Q_INVOKABLE void \fBaddFilterKeyColumn\fP (int column)"
.br
.ti -1c
.RI "Q_INVOKABLE bool \fBcontainsFilterKeyColumn\fP (int column)"
.br
.ti -1c
.RI "int \fBcurrentSortKeyColumn\fP () const "
.br
.ti -1c
.RI "Q_INVOKABLE QVariant \fBdata\fP (int row, int column=-1) const "
.br
.ti -1c
.RI "Q_INVOKABLE QVariant \fBdata\fP (const QModelIndex &index, int role=Qt::DisplayRole) const "
.br
.ti -1c
.RI "Q_INVOKABLE bool \fBfetch\fP (QString \fBtableName\fP='', QString filter='', QString \fBsort\fP='', QStringList \fBfields\fP=QStringList())"
.br
.ti -1c
.RI "Q_INVOKABLE \fBSH_SqlDataFields\fP * \fBfield\fP (int i) const "
.br
.ti -1c
.RI "const QString \fBfields\fP () const "
.br
.ti -1c
.RI "Q_INVOKABLE int \fBfieldsCount\fP () const "
.br
.ti -1c
.RI "Q_INVOKABLE Qt::ItemFlags \fBflags\fP (const QModelIndex &index) const "
.br
.ti -1c
.RI "void \fBinvalidateFilter\fP ()"
.br
.ti -1c
.RI "bool \fBisEmpty\fP () const "
.br
.ti -1c
.RI "const QString \fBlastError\fP () const "
.br
.ti -1c
.RI "Q_INVOKABLE void \fBremoveFilterKeyColumn\fP (int column)"
.br
.ti -1c
.RI "virtual Q_INVOKABLE QHash< int, 
.br
QByteArray > \fBroleNames\fP () const "
.br
.ti -1c
.RI "void \fBsetBooleanColumns\fP (QList< int > boolCols)"
.br
.ti -1c
.RI "Q_INVOKABLE bool \fBsetData\fP (const QModelIndex &index, const QVariant &value, int role=Qt::EditRole)"
.br
.ti -1c
.RI "void \fBsetNotNullColumns\fP (QList< int > notNullCols)"
.br
.ti -1c
.RI "void \fBsetNullColumns\fP (QList< int > nullCols)"
.br
.ti -1c
.RI "void \fBsetPasswordColumns\fP (QList< int > passwordCols)"
.br
.ti -1c
.RI "void \fBsetReadOnlyColumns\fP (QList< int > readonlyCols)"
.br
.ti -1c
.RI "void \fBsetSortKeyColumn\fP (int column)"
.br
.ti -1c
.RI "Q_INVOKABLE void \fBsort\fP (int column, Qt::SortOrder newOrder=Qt::AscendingOrder)"
.br
.ti -1c
.RI "const QString \fBtableName\fP () const "
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "virtual void \fBfillModel\fP ()=0"
.br
.ti -1c
.RI "bool \fBfilterAcceptsRow\fP (int source_row, const QModelIndex &source_parent) const "
.br
.in -1c
.SS "Attributs protégés"

.in +1c
.ti -1c
.RI "\fBSH_SqlDataModel\fP * \fBmodel\fP"
.br
.in -1c
.SS "Propriétés"

.in +1c
.ti -1c
.RI "bool \fBempty\fP"
.br
.ti -1c
.RI "QString \fBfieldsList\fP"
.br
.ti -1c
.RI "QString \fBlastError\fP"
.br
.ti -1c
.RI "int \fBsortKeyColumn\fP"
.br
.ti -1c
.RI "QString \fBtable\fP"
.br
.in -1c
.SS "Fonctions membres privées"

.in +1c
.ti -1c
.RI "void \fBreplaceSet\fP (QList< int > &originalSet, QList< int > newSet)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "QList< int > \fBbooleanSet\fP"
.br
.RI "\fIbooleanSet \fP"
.ti -1c
.RI "QList< int > \fBfilters\fP"
.br
.RI "\fIfilters \fP"
.ti -1c
.RI "QList< int > \fBnotNullSet\fP"
.br
.RI "\fInotNullSet \fP"
.ti -1c
.RI "QList< int > \fBnullSet\fP"
.br
.RI "\fInullSet \fP"
.ti -1c
.RI "QList< int > \fBpasswordSet\fP"
.br
.RI "\fIpasswordSet \fP"
.ti -1c
.RI "QList< int > \fBreadonlySet\fP"
.br
.RI "\fIreadonlySet \fP"
.ti -1c
.RI "int \fBsortIndex\fP"
.br
.RI "\fIsortIndex \fP"
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 15 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_ExtendedProxyModel::SH_ExtendedProxyModel (\fBQObject\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 12 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références model, et sortIndex\&.
.PP
.nf
12                                                             :
13     QSortFilterProxyModel(parent)
14 {
15     this->setDynamicSortFilter(false);
16     this->model = new SH_SqlDataModel(parent);
17     this->setSourceModel(this->model);
18     this->sortIndex = 0;
19 
20     /*connect(this->model, tableChanged(), tableName());*/
21 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "SH_ExtendedProxyModel::addFilterKeyColumn (intcolumn)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.RE
.PP

.PP
Définition à la ligne 259 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références filters\&.
.PP
Référencé par fetch(), SH_VATTableModel::fillModel(), SH_RoomsTableModel::fillModel(), SH_TraineesTableModel::fillModel(), et SH_UsersTableModel::fillModel()\&.
.PP
.nf
260 {
261     this->filters\&.append(column);
262 }
.fi
.SS "SH_ExtendedProxyModel::containsFilterKeyColumn (intcolumn)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 226 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références filters\&.
.PP
.nf
227 {
228     return this->filters\&.contains(column);
229 }
.fi
.SS "SH_ExtendedProxyModel::currentSortKeyColumn () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const int 
.RE
.PP

.PP
Définition à la ligne 41 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références sortIndex\&.
.PP
.nf
41 {return this->sortIndex;}
.fi
.SS "QVariant SH_ExtendedProxyModel::data (introw, intcolumn = \fC-1\fP) const"

.PP
Définition à la ligne 278 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références field(), SH_SqlDataModel::fieldsList(), model, et SH_SqlDataModel::roleForField()\&.
.PP
Référencé par setData()\&.
.PP
.nf
279 {
280     QModelIndex modelIndex = this->index(row, 0);
281     if(column !=-1) {
282         return this->data(modelIndex, this->model->roleForField(column));
283     } else {
284         QVariantMap map;
285         QStringList list =  this->model->fieldsList();
286         foreach(QString field, list) {
287             map\&.insert(field,this->data(modelIndex, this->model->roleForField(list\&.indexOf(field))));
288         }
289         return QVariant(map);
290     }
291 }
.fi
.SS "QVariant SH_ExtendedProxyModel::data (const QModelIndex &index, introle = \fCQt::DisplayRole\fP) const"

.PP
Définition à la ligne 128 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références booleanSet, SH_SqlDataModel::data(), filters, model, et passwordSet\&.
.PP
.nf
129 {
130     if (index\&.isValid())
131     {
132         if (this->booleanSet\&.contains(role))
133         {
134             return index\&.data(Qt::EditRole)\&.toBool() ? QVariant(Qt::Checked) : QVariant(Qt::Unchecked);
135         }
136         else if (this->passwordSet\&.contains(role))
137         {
138             return QVariant("***");
139         }
140         else if(!this->filters\&.contains(role))
141         {
142             QModelIndex source_index = QSortFilterProxyModel::mapToSource(index);
143             if (source_index\&.isValid()) {
144                 return this->model->data(source_index, role);
145             }
146         }
147     }
148     return QVariant();
149 }
.fi
.SS "SH_ExtendedProxyModel::fetch (QStringtableName = \fC''\fP, QStringfilter = \fC''\fP, QStringsort = \fC''\fP, QStringListfields = \fCQStringList()\fP)"

.PP
\fBParamètres:\fP
.RS 4
\fItableName\fP 
.br
\fIfilter\fP 
.br
\fIsort\fP 
.br
\fIfields\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 298 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références addFilterKeyColumn(), SH_SqlDataModel::fetch(), field(), SH_SqlDataModel::fieldsList(), fillModel(), et model\&.
.PP
.nf
299 {
300     bool fetched = this->model->fetch(tableName, filter, sort, fields);
301     if (fetched)
302     {
303         this->fillModel();
304         QStringList fieldList = this->model->fieldsList();
305         foreach(QString field, fieldList) {
306             int fieldIndex = fieldList\&.indexOf(field);
307             if(this->headerData(fieldIndex, Qt::Horizontal)\&.toString() == field) {
308                 this->addFilterKeyColumn(fieldIndex);
309             }
310         }
311     }
312     this->setSourceModel(this->model);
313     return fetched;
314 }
.fi
.SS "SH_ExtendedProxyModel::field (inti) const\fC [inline]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIi\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
SqlDataFields 
.RE
.PP

.PP
Définition à la ligne 91 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::field(), et model\&.
.PP
Référencé par data(), et fetch()\&.
.PP
.nf
91 { return this->model->field(i); }
.fi
.SS "SH_ExtendedProxyModel::fields () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const QString 
.RE
.PP

.PP
Définition à la ligne 57 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::fieldsList(), et model\&.
.PP
Référencé par SH_BillingsTableModel::fillModel(), SH_VATTableModel::fillModel(), SH_RoomsTableModel::fillModel(), SH_TraineesTableModel::fillModel(), SH_ServicesTableModel::fillModel(), et SH_UsersTableModel::fillModel()\&.
.PP
.nf
57 { if(this->model->fieldsList()\&.isEmpty()){ return "*";} else { return this->model->fieldsList()\&.join(", ");} }
.fi
.SS "SH_ExtendedProxyModel::fieldsCount () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
int 
.RE
.PP

.PP
Définition à la ligne 99 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::fieldsCount(), et model\&.
.PP
.nf
99 { return this->model->fieldsCount(); }
.fi
.SS "SH_ExtendedProxyModel::fillModel ()\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Implémenté dans \fBSH_GroupsTableModel\fP, \fBSH_UsersTableModel\fP, \fBSH_RoomsTableModel\fP, \fBSH_ServicesTableModel\fP, \fBSH_TraineesTableModel\fP, \fBSH_VATTableModel\fP, \fBSH_BookingsTableModel\fP, \fBSH_BillingsTableModel\fP, \fBSH_ClientsTableModel\fP, et \fBSH_BillsTableModel\fP\&.
.PP
Référencé par fetch()\&.
.SS "SH_ExtendedProxyModel::filterAcceptsRow (intsource_row, const QModelIndex &source_parent) const\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIsource_row\fP 
.br
\fIsource_parent\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 93 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références notNullSet, et nullSet\&.
.PP
.nf
94 {
95     Q_UNUSED(source_parent);
96 
97     if (!this->notNullSet\&.isEmpty())
98     {
99         QSqlQueryModel *m = static_cast<QSqlQueryModel *>(sourceModel());
100         foreach(int column, this->notNullSet)
101         {
102             if (m->record(source_row)\&.isNull(column))
103             {
104                 return false;
105             }
106         }
107     }
108 
109     if (!this->nullSet\&.isEmpty())
110     {
111         QSqlQueryModel *m = static_cast<QSqlQueryModel *>(sourceModel());
112         foreach(int column, this->nullSet)
113         {
114             if (!m->record(source_row)\&.isNull(column))
115             {
116                 return false;
117             }
118         }
119     }
120     return true;
121 }
.fi
.SS "SH_ExtendedProxyModel::flags (const QModelIndex &index) const"

.PP
\fBParamètres:\fP
.RS 4
\fIindex\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
Qt::ItemFlags 
.RE
.PP

.PP
Définition à la ligne 180 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références booleanSet, et readonlySet\&.
.PP
.nf
181 {
182     if (!index\&.isValid())
183     {
184         return Qt::ItemIsEnabled;
185     }
186     if (!this->booleanSet\&.isEmpty())
187     {
188         return Qt::ItemIsUserCheckable | Qt::ItemIsSelectable | Qt::ItemIsEnabled;
189     }
190     else if (!this->readonlySet\&.isEmpty())
191     {
192         return Qt::ItemIsSelectable;
193     }
194     else
195     {
196         return QSortFilterProxyModel::flags(index);
197     }
198 
199 }
.fi
.SS "SH_ExtendedProxyModel::invalidateFilter ()"

.PP
Définition à la ligne 206 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références filters\&.
.PP
.nf
207 {
208     this->filters\&.clear();
209 }
.fi
.SS "SH_ExtendedProxyModel::isEmpty () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const bool 
.RE
.PP

.PP
Définition à la ligne 73 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::isEmpty(), et model\&.
.PP
.nf
73 { return this->model->isEmpty(); }
.fi
.SS "const QString SH_ExtendedProxyModel::lastError () const\fC [inline]\fP"

.PP
Définition à la ligne 65 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::lastError, et model\&.
.PP
.nf
65 { return this->model->lastError(); }
.fi
.SS "SH_ExtendedProxyModel::removeFilterKeyColumn (intcolumn)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.RE
.PP

.PP
Définition à la ligne 216 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références filters\&.
.PP
.nf
217 {
218     this->filters\&.removeAt(this->filters\&.indexOf(column));
219 }
.fi
.SS "SH_ExtendedProxyModel::replaceSet (QList< int > &originalSet, QList< int >newSet)\fC [private]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoriginalSet\fP 
.br
\fInewSet\fP 
.RE
.PP

.PP
Définition à la ligne 28 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Référencé par setBooleanColumns(), setNotNullColumns(), setNullColumns(), setPasswordColumns(), et setReadOnlyColumns()\&.
.PP
.nf
28                                                                                  {
29     originalSet\&.clear();
30     foreach(int col, newSet) {
31         if(!originalSet\&.contains(col)) {
32             originalSet\&.append(col);
33         }
34     }
35 }
.fi
.SS "SH_ExtendedProxyModel::roleNames () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QHash<int, QByteArray> 
.RE
.PP

.PP
Définition à la ligne 184 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références model, et SH_SqlDataModel::roleNames()\&.
.PP
.nf
184 { return this->model->roleNames(); }
.fi
.SS "SH_ExtendedProxyModel::setBooleanColumns (QList< int >boolCols)"

.PP
\fBParamètres:\fP
.RS 4
\fIboolCols\fP 
.RE
.PP

.PP
Définition à la ligne 42 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références booleanSet, et replaceSet()\&.
.PP
Référencé par SH_UsersTableModel::fillModel()\&.
.PP
.nf
42                                                                  {
43     replaceSet(this->booleanSet, boolCols);
44 }
.fi
.SS "SH_ExtendedProxyModel::setData (const QModelIndex &index, const QVariant &value, introle = \fCQt::EditRole\fP)"

.PP
\fBParamètres:\fP
.RS 4
\fIindex\fP 
.br
\fIvalue\fP 
.br
\fIrole\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 157 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références booleanSet, et data()\&.
.PP
.nf
158 {
159     if (!index\&.isValid())
160         return false;
161 
162     if (this->booleanSet\&.contains(role))
163     {
164         QVariant data = (value\&.toInt() == Qt::Checked) ? QVariant(1) : QVariant(0);
165         return QSortFilterProxyModel::setData(index, data, role);
166     }
167     else
168     {
169         return QSortFilterProxyModel::setData(index, value, role);
170     }
171 
172 }
.fi
.SS "SH_ExtendedProxyModel::setNotNullColumns (QList< int >notNullCols)"

.PP
\fBParamètres:\fP
.RS 4
\fInotNullCols\fP 
.RE
.PP

.PP
Définition à la ligne 81 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références notNullSet, et replaceSet()\&.
.PP
.nf
81                                                                     {
82     if (sourceModel()->inherits("QSqlQueryModel")) {
83         replaceSet(this->notNullSet, notNullCols);
84     }
85 }
.fi
.SS "SH_ExtendedProxyModel::setNullColumns (QList< int >nullCols)"

.PP
\fBParamètres:\fP
.RS 4
\fInullCols\fP 
.RE
.PP

.PP
Définition à la ligne 69 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références nullSet, et replaceSet()\&.
.PP
.nf
69                                                               {
70     if (sourceModel()->inherits("QSqlQueryModel")) {
71         replaceSet(this->nullSet, nullCols);
72     }
73 }
.fi
.SS "SH_ExtendedProxyModel::setPasswordColumns (QList< int >passwordCols)"

.PP
\fBParamètres:\fP
.RS 4
\fIpasswordCols\fP 
.RE
.PP

.PP
Définition à la ligne 60 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références passwordSet, et replaceSet()\&.
.PP
.nf
60                                                                       {
61     replaceSet(this->passwordSet, passwordCols);
62 }
.fi
.SS "SH_ExtendedProxyModel::setReadOnlyColumns (QList< int >readonlyCols)"

.PP
\fBParamètres:\fP
.RS 4
\fIreadonlyCols\fP 
.RE
.PP

.PP
Définition à la ligne 51 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références readonlySet, et replaceSet()\&.
.PP
.nf
51                                                                       {
52     replaceSet(this->readonlySet, readonlyCols);
53 }
.fi
.SS "SH_ExtendedProxyModel::setSortKeyColumn (intcolumn)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.RE
.PP

.PP
Définition à la ligne 246 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références SH_SqlDataModel::field(), model, SH_SqlDataModel::roleForField(), sortChanged(), sortIndex, et SH_SqlDataFields::sortOrder\&.
.PP
Référencé par sort()\&.
.PP
.nf
247 {
248     this->sortIndex = column;
249     QSortFilterProxyModel::setSortRole(this->model->roleForField(column));
250     QSortFilterProxyModel::sort(0, this->model->field(column)->sortOrder());
251     emit sortChanged();
252 }
.fi
.SS "SH_ExtendedProxyModel::sort (intcolumn, Qt::SortOrdernewOrder = \fCQt::AscendingOrder\fP)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.br
\fInewOrder\fP 
.RE
.PP

.PP
Définition à la ligne 236 du fichier SH_ExtendedSqlProxyModel\&.cpp\&.
.PP
Références SH_SqlDataModel::field(), model, setSortKeyColumn(), et SH_SqlDataFields::setSortOrder()\&.
.PP
Référencé par SH_RoomsTableModel::fillModel(), et SH_ServicesTableModel::fillModel()\&.
.PP
.nf
237 {
238     this->model->field(column)->setSortOrder(newOrder);
239     SH_ExtendedProxyModel::setSortKeyColumn(column);
240 }
.fi
.SS "SH_ExtendedProxyModel::sortChanged ()\fC [signal]\fP"

.PP
Référencé par setSortKeyColumn()\&.
.SS "SH_ExtendedProxyModel::tableName () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const QString 
.RE
.PP

.PP
Définition à la ligne 49 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références model, et SH_SqlDataModel::tableName()\&.
.PP
.nf
49 { return this->model->tableName(); }
.fi
.SH "Documentation des données membres"
.PP 
.SS "QList<int> SH_ExtendedProxyModel::booleanSet\fC [private]\fP"

.PP
booleanSet 
.PP
Définition à la ligne 286 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par data(), flags(), setBooleanColumns(), et setData()\&.
.SS "QList<int> SH_ExtendedProxyModel::filters\fC [private]\fP"

.PP
filters 
.PP
Définition à la ligne 311 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par addFilterKeyColumn(), containsFilterKeyColumn(), data(), invalidateFilter(), et removeFilterKeyColumn()\&.
.SS "\fBSH_SqlDataModel\fP* SH_ExtendedProxyModel::model\fC [protected]\fP"

.PP
Définition à la ligne 270 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par data(), fetch(), field(), fields(), fieldsCount(), SH_BillingsTableModel::fillModel(), SH_BookingsTableModel::fillModel(), SH_RoomsTableModel::fillModel(), SH_ServicesTableModel::fillModel(), SH_TraineesTableModel::fillModel(), SH_VATTableModel::fillModel(), SH_UsersTableModel::fillModel(), isEmpty(), lastError(), roleNames(), setSortKeyColumn(), SH_BillingsTableModel::SH_BillingsTableModel(), SH_BillsTableModel::SH_BillsTableModel(), SH_BookingsTableModel::SH_BookingsTableModel(), SH_ClientsTableModel::SH_ClientsTableModel(), SH_ExtendedProxyModel(), SH_GroupsTableModel::SH_GroupsTableModel(), SH_RoomsTableModel::SH_RoomsTableModel(), SH_ServicesTableModel::SH_ServicesTableModel(), SH_TraineesTableModel::SH_TraineesTableModel(), SH_UsersTableModel::SH_UsersTableModel(), SH_VATTableModel::SH_VATTableModel(), sort(), et tableName()\&.
.SS "QList<int> SH_ExtendedProxyModel::notNullSet\fC [private]\fP"

.PP
notNullSet 
.PP
Définition à la ligne 301 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par filterAcceptsRow(), et setNotNullColumns()\&.
.SS "QList<int> SH_ExtendedProxyModel::nullSet\fC [private]\fP"

.PP
nullSet 
.PP
Définition à la ligne 306 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par filterAcceptsRow(), et setNullColumns()\&.
.SS "QList<int> SH_ExtendedProxyModel::passwordSet\fC [private]\fP"

.PP
passwordSet 
.PP
Définition à la ligne 291 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par data(), et setPasswordColumns()\&.
.SS "QList<int> SH_ExtendedProxyModel::readonlySet\fC [private]\fP"

.PP
readonlySet 
.PP
Définition à la ligne 296 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par flags(), et setReadOnlyColumns()\&.
.SS "int SH_ExtendedProxyModel::sortIndex\fC [private]\fP"

.PP
sortIndex 
.PP
Définition à la ligne 316 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par currentSortKeyColumn(), setSortKeyColumn(), et SH_ExtendedProxyModel()\&.
.SH "Documentation des propriétés"
.PP 
.SS "bool SH_ExtendedProxyModel::empty\fC [read]\fP"

.PP
Définition à la ligne 23 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SS "QString SH_ExtendedProxyModel::fieldsList\fC [read]\fP"

.PP
Définition à la ligne 20 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SS "SH_ExtendedProxyModel::lastError\fC [read]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const QString 
.RE
.PP

.PP
Définition à la ligne 21 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SS "int SH_ExtendedProxyModel::sortKeyColumn\fC [read]\fP, \fC [write]\fP"

.PP
Définition à la ligne 22 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SS "QString SH_ExtendedProxyModel::table\fC [read]\fP"

.PP
Définition à la ligne 19 du fichier SH_ExtendedSqlProxyModel\&.h\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
