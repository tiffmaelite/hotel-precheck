.TH "SH_ExtendedProxyModel" 3 "Lundi Juin 24 2013" "Version 0.3" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_ExtendedProxyModel \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_ExtendedSqlProxyModel\&.h>\fP
.PP
Est dérivée de \fBQSortFilterProxyModel\fP\&.
.PP
Dérivée par \fBSH_BillingsTableModel\fP, \fBSH_BillsTableModel\fP, \fBSH_BookingsTableModel\fP, \fBSH_ClientsTableModel\fP, \fBSH_GroupsTableModel\fP, \fBSH_RoomsTableModel\fP, et \fBSH_ServicesTableModel\fP\&.
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBsortChanged\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_ExtendedProxyModel\fP (\fBQObject\fP *parent=0)"
.br
.ti -1c
.RI "Q_INVOKABLE void \fBaddFilterKeyColumn\fP (int column)"
.br
.ti -1c
.RI "Q_INVOKABLE bool \fBcontainsFilterKeyColumn\fP (int column)"
.br
.ti -1c
.RI "const int \fBcurrentSortKeyColumn\fP () const "
.br
.ti -1c
.RI "Q_INVOKABLE QVariant \fBdata\fP (int row, int column) const "
.br
.ti -1c
.RI "Q_INVOKABLE QVariant \fBdata\fP (const QModelIndex &index, int role=Qt::DisplayRole) const "
.br
.ti -1c
.RI "Q_INVOKABLE bool \fBfetch\fP (QString \fBtableName\fP='', QString filter='', QString \fBsort\fP='', QStringList \fBfields\fP=QStringList())"
.br
.ti -1c
.RI "Q_INVOKABLE \fBSH_SqlDataFields\fP * \fBfield\fP (int i) const "
.br
.ti -1c
.RI "const QString \fBfields\fP () const "
.br
.ti -1c
.RI "Q_INVOKABLE int \fBfieldsCount\fP () const "
.br
.ti -1c
.RI "Q_INVOKABLE Qt::ItemFlags \fBflags\fP (const QModelIndex &index) const "
.br
.ti -1c
.RI "void \fBinvalidateFilter\fP ()"
.br
.ti -1c
.RI "const bool \fBisEmpty\fP () const "
.br
.ti -1c
.RI "const QString \fBlastError\fP () const "
.br
.ti -1c
.RI "Q_INVOKABLE void \fBremoveFilterKeyColumn\fP (int column)"
.br
.ti -1c
.RI "virtual Q_INVOKABLE QHash< int, 
.br
QByteArray > \fBroleNames\fP () const "
.br
.ti -1c
.RI "void \fBsetBooleanColumns\fP (QList< int > boolCols)"
.br
.ti -1c
.RI "Q_INVOKABLE bool \fBsetData\fP (const QModelIndex &index, const QVariant &value, int role=Qt::EditRole)"
.br
.ti -1c
.RI "void \fBsetNotNullColumns\fP (QList< int > notNullCols)"
.br
.ti -1c
.RI "void \fBsetNullColumns\fP (QList< int > nullCols)"
.br
.ti -1c
.RI "void \fBsetPasswordColumns\fP (QList< int > passwordCols)"
.br
.ti -1c
.RI "void \fBsetReadOnlyColumns\fP (QList< int > readonlyCols)"
.br
.ti -1c
.RI "void \fBsetSortKeyColumn\fP (int column)"
.br
.ti -1c
.RI "Q_INVOKABLE void \fBsort\fP (int column, Qt::SortOrder newOrder=Qt::AscendingOrder)"
.br
.ti -1c
.RI "const QString \fBtableName\fP () const "
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "virtual void \fBfillModel\fP ()=0"
.br
.ti -1c
.RI "bool \fBfilterAcceptsRow\fP (int source_row, const QModelIndex &source_parent) const "
.br
.in -1c
.SS "Attributs protégés"

.in +1c
.ti -1c
.RI "\fBSH_SqlDataModel\fP * \fBmodel\fP"
.br
.in -1c
.SS "Propriétés"

.in +1c
.ti -1c
.RI "bool \fBempty\fP"
.br
.ti -1c
.RI "QString \fBfieldsList\fP"
.br
.ti -1c
.RI "QString \fBlastError\fP"
.br
.ti -1c
.RI "int \fBsortKeyColumn\fP"
.br
.ti -1c
.RI "QString \fBtable\fP"
.br
.in -1c
.SS "Fonctions membres privées"

.in +1c
.ti -1c
.RI "void \fBreplaceSet\fP (QList< int > &originalSet, QList< int > newSet)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "QList< int > \fBbooleanSet\fP"
.br
.RI "\fIbooleanSet \fP"
.ti -1c
.RI "QList< int > \fBfilters\fP"
.br
.RI "\fIfilters \fP"
.ti -1c
.RI "QList< int > \fBnotNullSet\fP"
.br
.RI "\fInotNullSet \fP"
.ti -1c
.RI "QList< int > \fBnullSet\fP"
.br
.RI "\fInullSet \fP"
.ti -1c
.RI "QList< int > \fBpasswordSet\fP"
.br
.RI "\fIpasswordSet \fP"
.ti -1c
.RI "QList< int > \fBreadonlySet\fP"
.br
.RI "\fIreadonlySet \fP"
.ti -1c
.RI "int \fBsortIndex\fP"
.br
.RI "\fIsortIndex \fP"
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 13 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_ExtendedProxyModel::SH_ExtendedProxyModel (\fBQObject\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 12 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références model, et sortIndex\&.
.PP
.nf
12                                                             :
13     QSortFilterProxyModel(parent)
14 {
15     this->setDynamicSortFilter(false);
16     this->model = new SH_SqlDataModel(parent);
17     this->setSourceModel(this->model);
18     this->sortIndex = 0;
19     /*connect(this->model, tableChanged(), tableName());*/
20 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "SH_ExtendedProxyModel::addFilterKeyColumn (intcolumn)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.RE
.PP

.PP
Définition à la ligne 259 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références filters\&.
.PP
Référencé par SH_RoomsTableModel::fillModel()\&.
.PP
.nf
260 {
261     this->filters\&.append(column);
262 }
.fi
.SS "SH_ExtendedProxyModel::containsFilterKeyColumn (intcolumn)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 225 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références filters\&.
.PP
.nf
226 {
227     return this->filters\&.contains(column);
228 }
.fi
.SS "SH_ExtendedProxyModel::currentSortKeyColumn () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const int 
.RE
.PP

.PP
Définition à la ligne 38 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références sortIndex\&.
.PP
.nf
38 {return this->sortIndex;}
.fi
.SS "QVariant SH_ExtendedProxyModel::data (introw, intcolumn) const"

.PP
Définition à la ligne 269 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références model, et SH_SqlDataModel::roleForField()\&.
.PP
Référencé par setData()\&.
.PP
.nf
270 {
271     QModelIndex modelIndex = this->index(row, 0);
272     return this->data(modelIndex, this->model->roleForField(column));
273 }
.fi
.SS "QVariant SH_ExtendedProxyModel::data (const QModelIndex &index, introle = \fCQt::DisplayRole\fP) const"

.PP
Définition à la ligne 127 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références booleanSet, SH_SqlDataModel::data(), filters, model, et passwordSet\&.
.PP
.nf
128 {
129     if (index\&.isValid())
130     {
131         if (this->booleanSet\&.contains(role))
132         {
133             return index\&.data(Qt::EditRole)\&.toBool() ? QVariant(Qt::Checked) : QVariant(Qt::Unchecked);
134         }
135         else if (this->passwordSet\&.contains(role))
136         {
137             return QVariant("***");
138         }
139         else if(!this->filters\&.contains(role))
140         {
141             QModelIndex source_index = QSortFilterProxyModel::mapToSource(index);
142             if (source_index\&.isValid()) {
143                 return this->model->data(source_index, role);
144             }
145         }
146     }
147     return QVariant();
148 }
.fi
.SS "SH_ExtendedProxyModel::fetch (QStringtableName = \fC''\fP, QStringfilter = \fC''\fP, QStringsort = \fC''\fP, QStringListfields = \fCQStringList()\fP)"

.PP
\fBParamètres:\fP
.RS 4
\fItableName\fP 
.br
\fIfilter\fP 
.br
\fIsort\fP 
.br
\fIfields\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 280 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références SH_SqlDataModel::fetch(), fillModel(), et model\&.
.PP
.nf
281 {
282     bool fetched = this->model->fetch(tableName, filter, sort, fields);
283     if (fetched)
284     {
285         this->fillModel();
286     }
287     this->setSourceModel(this->model);
288     return fetched;
289 }
.fi
.SS "SH_ExtendedProxyModel::field (inti) const\fC [inline]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIi\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
SqlDataFields 
.RE
.PP

.PP
Définition à la ligne 82 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::field(), et model\&.
.PP
.nf
82 { return this->model->field(i); }
.fi
.SS "SH_ExtendedProxyModel::fields () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const QString 
.RE
.PP

.PP
Définition à la ligne 52 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::fieldsList(), et model\&.
.PP
.nf
52 { if(this->model->fieldsList()\&.isEmpty()){ return "*";} else { return this->model->fieldsList()\&.join(", ");} }
.fi
.SS "SH_ExtendedProxyModel::fieldsCount () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
int 
.RE
.PP

.PP
Définition à la ligne 89 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::fieldsCount(), et model\&.
.PP
.nf
89 { return this->model->fieldsCount(); }
.fi
.SS "SH_ExtendedProxyModel::fillModel ()\fC [protected]\fP, \fC [pure virtual]\fP"

.PP
Implémenté dans \fBSH_BookingsTableModel\fP, \fBSH_ClientsTableModel\fP, \fBSH_GroupsTableModel\fP, \fBSH_BillingsTableModel\fP, \fBSH_BillsTableModel\fP, \fBSH_RoomsTableModel\fP, et \fBSH_ServicesTableModel\fP\&.
.PP
Référencé par fetch()\&.
.SS "SH_ExtendedProxyModel::filterAcceptsRow (intsource_row, const QModelIndex &source_parent) const\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIsource_row\fP 
.br
\fIsource_parent\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 92 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références notNullSet, et nullSet\&.
.PP
.nf
93 {
94     Q_UNUSED(source_parent);
95 
96     if (!this->notNullSet\&.isEmpty())
97     {
98         QSqlQueryModel *m = static_cast<QSqlQueryModel *>(sourceModel());
99         foreach(int column, this->notNullSet)
100         {
101             if (m->record(source_row)\&.isNull(column))
102             {
103                 return false;
104             }
105         }
106     }
107 
108     if (!this->nullSet\&.isEmpty())
109     {
110         QSqlQueryModel *m = static_cast<QSqlQueryModel *>(sourceModel());
111         foreach(int column, this->nullSet)
112         {
113             if (!m->record(source_row)\&.isNull(column))
114             {
115                 return false;
116             }
117         }
118     }
119     return true;
120 }
.fi
.SS "SH_ExtendedProxyModel::flags (const QModelIndex &index) const"

.PP
\fBParamètres:\fP
.RS 4
\fIindex\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
Qt::ItemFlags 
.RE
.PP

.PP
Définition à la ligne 179 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références booleanSet, et readonlySet\&.
.PP
.nf
180 {
181     if (!index\&.isValid())
182     {
183         return Qt::ItemIsEnabled;
184     }
185     if (!this->booleanSet\&.isEmpty())
186     {
187         return Qt::ItemIsUserCheckable | Qt::ItemIsSelectable | Qt::ItemIsEnabled;
188     }
189     else if (!this->readonlySet\&.isEmpty())
190     {
191         return Qt::ItemIsSelectable;
192     }
193     else
194     {
195         return QSortFilterProxyModel::flags(index);
196     }
197 
198 }
.fi
.SS "SH_ExtendedProxyModel::invalidateFilter ()"

.PP
Définition à la ligne 205 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références filters\&.
.PP
.nf
206 {
207     this->filters\&.clear();
208 }
.fi
.SS "SH_ExtendedProxyModel::isEmpty () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const bool 
.RE
.PP

.PP
Définition à la ligne 66 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::isEmpty(), et model\&.
.PP
.nf
66 { return this->model->isEmpty(); }
.fi
.SS "const QString SH_ExtendedProxyModel::lastError () const\fC [inline]\fP"

.PP
Définition à la ligne 59 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références SH_SqlDataModel::lastError, et model\&.
.PP
.nf
59 { return this->model->lastError(); }
.fi
.SS "SH_ExtendedProxyModel::removeFilterKeyColumn (intcolumn)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.RE
.PP

.PP
Définition à la ligne 215 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références filters\&.
.PP
.nf
216 {
217     this->filters\&.removeAt(this->filters\&.indexOf(column));
218 }
.fi
.SS "SH_ExtendedProxyModel::replaceSet (QList< int > &originalSet, QList< int >newSet)\fC [private]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoriginalSet\fP 
.br
\fInewSet\fP 
.RE
.PP

.PP
Définition à la ligne 27 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Référencé par setBooleanColumns(), setNotNullColumns(), setNullColumns(), setPasswordColumns(), et setReadOnlyColumns()\&.
.PP
.nf
27                                                                                  {
28     originalSet\&.clear();
29     foreach(int col, newSet) {
30         if(!originalSet\&.contains(col)) {
31             originalSet\&.append(col);
32         }
33     }
34 }
.fi
.SS "SH_ExtendedProxyModel::roleNames () const\fC [inline]\fP, \fC [virtual]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QHash<int, QByteArray> 
.RE
.PP

.PP
Définition à la ligne 165 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références model, et SH_SqlDataModel::roleNames()\&.
.PP
.nf
165 { return this->model->roleNames(); }
.fi
.SS "SH_ExtendedProxyModel::setBooleanColumns (QList< int >boolCols)"

.PP
\fBParamètres:\fP
.RS 4
\fIboolCols\fP 
.RE
.PP

.PP
Définition à la ligne 41 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références booleanSet, et replaceSet()\&.
.PP
.nf
41                                                                  {
42     replaceSet(this->booleanSet, boolCols);
43 }
.fi
.SS "SH_ExtendedProxyModel::setData (const QModelIndex &index, const QVariant &value, introle = \fCQt::EditRole\fP)"

.PP
\fBParamètres:\fP
.RS 4
\fIindex\fP 
.br
\fIvalue\fP 
.br
\fIrole\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 156 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références booleanSet, et data()\&.
.PP
.nf
157 {
158     if (!index\&.isValid())
159         return false;
160 
161     if (this->booleanSet\&.contains(role))
162     {
163         QVariant data = (value\&.toInt() == Qt::Checked) ? QVariant(1) : QVariant(0);
164         return QSortFilterProxyModel::setData(index, data, role);
165     }
166     else
167     {
168         return QSortFilterProxyModel::setData(index, value, role);
169     }
170 
171 }
.fi
.SS "SH_ExtendedProxyModel::setNotNullColumns (QList< int >notNullCols)"

.PP
\fBParamètres:\fP
.RS 4
\fInotNullCols\fP 
.RE
.PP

.PP
Définition à la ligne 80 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références notNullSet, et replaceSet()\&.
.PP
.nf
80                                                                     {
81     if (sourceModel()->inherits("QSqlQueryModel")) {
82         replaceSet(this->notNullSet, notNullCols);
83     }
84 }
.fi
.SS "SH_ExtendedProxyModel::setNullColumns (QList< int >nullCols)"

.PP
\fBParamètres:\fP
.RS 4
\fInullCols\fP 
.RE
.PP

.PP
Définition à la ligne 68 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références nullSet, et replaceSet()\&.
.PP
.nf
68                                                               {
69     if (sourceModel()->inherits("QSqlQueryModel")) {
70         replaceSet(this->nullSet, nullCols);
71     }
72 }
.fi
.SS "SH_ExtendedProxyModel::setPasswordColumns (QList< int >passwordCols)"

.PP
\fBParamètres:\fP
.RS 4
\fIpasswordCols\fP 
.RE
.PP

.PP
Définition à la ligne 59 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références passwordSet, et replaceSet()\&.
.PP
.nf
59                                                                       {
60     replaceSet(this->passwordSet, passwordCols);
61 }
.fi
.SS "SH_ExtendedProxyModel::setReadOnlyColumns (QList< int >readonlyCols)"

.PP
\fBParamètres:\fP
.RS 4
\fIreadonlyCols\fP 
.RE
.PP

.PP
Définition à la ligne 50 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références readonlySet, et replaceSet()\&.
.PP
.nf
50                                                                       {
51     replaceSet(this->readonlySet, readonlyCols);
52 }
.fi
.SS "SH_ExtendedProxyModel::setSortKeyColumn (intcolumn)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.RE
.PP

.PP
Définition à la ligne 246 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références SH_SqlDataModel::field(), model, SH_SqlDataModel::roleForField(), sortChanged(), sortIndex, et SH_SqlDataFields::sortOrder\&.
.PP
Référencé par sort()\&.
.PP
.nf
247 {
248     this->sortIndex = column;
249     QSortFilterProxyModel::setSortRole(this->model->roleForField(column));
250     QSortFilterProxyModel::sort(0, this->model->field(column)->sortOrder());
251     emit sortChanged();
252 }
.fi
.SS "SH_ExtendedProxyModel::sort (intcolumn, Qt::SortOrdernewOrder = \fCQt::AscendingOrder\fP)"

.PP
\fBParamètres:\fP
.RS 4
\fIcolumn\fP 
.br
\fInewOrder\fP 
.RE
.PP

.PP
Définition à la ligne 235 du fichier SH_ExtendedProxyModel\&.cpp\&.
.PP
Références SH_SqlDataModel::field(), model, setSortKeyColumn(), et SH_SqlDataFields::setSortOrder()\&.
.PP
Référencé par SH_RoomsTableModel::fillModel(), et SH_ServicesTableModel::fillModel()\&.
.PP
.nf
236 {
237     this->model->field(column)->setSortOrder(newOrder);
238     SH_ExtendedProxyModel::setSortKeyColumn(column);
239 }
.fi
.SS "SH_ExtendedProxyModel::sortChanged ()\fC [signal]\fP"

.PP
Référencé par setSortKeyColumn()\&.
.SS "SH_ExtendedProxyModel::tableName () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const QString 
.RE
.PP

.PP
Définition à la ligne 45 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Références model, et SH_SqlDataModel::tableName()\&.
.PP
.nf
45 { return this->model->tableName(); }
.fi
.SH "Documentation des données membres"
.PP 
.SS "QList<int> SH_ExtendedProxyModel::booleanSet\fC [private]\fP"

.PP
booleanSet 
.PP
Définition à la ligne 255 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par data(), flags(), setBooleanColumns(), et setData()\&.
.SS "QList<int> SH_ExtendedProxyModel::filters\fC [private]\fP"

.PP
filters 
.PP
Définition à la ligne 275 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par addFilterKeyColumn(), containsFilterKeyColumn(), data(), invalidateFilter(), et removeFilterKeyColumn()\&.
.SS "\fBSH_SqlDataModel\fP* SH_ExtendedProxyModel::model\fC [protected]\fP"

.PP
Définition à la ligne 241 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par data(), fetch(), field(), fields(), fieldsCount(), SH_BillingsTableModel::fillModel(), SH_RoomsTableModel::fillModel(), SH_BookingsTableModel::fillModel(), isEmpty(), lastError(), roleNames(), setSortKeyColumn(), SH_BillingsTableModel::SH_BillingsTableModel(), SH_BillsTableModel::SH_BillsTableModel(), SH_BookingsTableModel::SH_BookingsTableModel(), SH_ClientsTableModel::SH_ClientsTableModel(), SH_ExtendedProxyModel(), SH_GroupsTableModel::SH_GroupsTableModel(), SH_RoomsTableModel::SH_RoomsTableModel(), SH_ServicesTableModel::SH_ServicesTableModel(), sort(), et tableName()\&.
.SS "QList<int> SH_ExtendedProxyModel::notNullSet\fC [private]\fP"

.PP
notNullSet 
.PP
Définition à la ligne 267 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par filterAcceptsRow(), et setNotNullColumns()\&.
.SS "QList<int> SH_ExtendedProxyModel::nullSet\fC [private]\fP"

.PP
nullSet 
.PP
Définition à la ligne 271 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par filterAcceptsRow(), et setNullColumns()\&.
.SS "QList<int> SH_ExtendedProxyModel::passwordSet\fC [private]\fP"

.PP
passwordSet 
.PP
Définition à la ligne 259 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par data(), et setPasswordColumns()\&.
.SS "QList<int> SH_ExtendedProxyModel::readonlySet\fC [private]\fP"

.PP
readonlySet 
.PP
Définition à la ligne 263 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par flags(), et setReadOnlyColumns()\&.
.SS "int SH_ExtendedProxyModel::sortIndex\fC [private]\fP"

.PP
sortIndex 
.PP
Définition à la ligne 279 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.PP
Référencé par currentSortKeyColumn(), setSortKeyColumn(), et SH_ExtendedProxyModel()\&.
.SH "Documentation des propriétés"
.PP 
.SS "bool SH_ExtendedProxyModel::empty\fC [read]\fP"

.PP
Définition à la ligne 21 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SS "QString SH_ExtendedProxyModel::fieldsList\fC [read]\fP"

.PP
Définition à la ligne 18 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SS "SH_ExtendedProxyModel::lastError\fC [read]\fP"

.PP
\fBRenvoie:\fP
.RS 4
const QString 
.RE
.PP

.PP
Définition à la ligne 19 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SS "int SH_ExtendedProxyModel::sortKeyColumn\fC [read]\fP, \fC [write]\fP"

.PP
Définition à la ligne 20 du fichier SH_ExtendedSqlProxyModel\&.h\&.
.SS "QString SH_ExtendedProxyModel::table\fC [read]\fP"

.PP
Définition à la ligne 17 du fichier SH_ExtendedSqlProxyModel\&.h\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
