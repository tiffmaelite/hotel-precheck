.TH "SH_GenericStateMachine" 3 "Lundi Juin 24 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_GenericStateMachine \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_GenericDebugableStateMachine\&.h>\fP
.PP
Est dérivée de \fBQStateMachine\fP, et \fBSH_NamedObject\fP\&.
.PP
Dérivée par \fBSH_InOutStateMachine\fP\&.
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_GenericStateMachine\fP (QString \fBname\fP='', \fBQObject\fP *parent=0)"
.br
.ti -1c
.RI "virtual void \fBaddChildrenNextTransition\fP (QAbstractState *previousState, QAbstractState *nextState)"
.br
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.in -1c
.SS "Connecteurs protégés"

.in +1c
.ti -1c
.RI "void \fBemitGoNext\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.in -1c
.SS "Fonctions membres privées"

.in +1c
.ti -1c
.RI "virtual QString \fBname\fP () const "
.br
.ti -1c
.RI "QString \fBptraddress\fP () const "
.br
.ti -1c
.RI "virtual void \fBsetName\fP (const QString &\fBname\fP)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "\fBQState\fP * \fBm_errorState\fP"
.br
.ti -1c
.RI "bool \fBm_isRunning\fP"
.br
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 7 du fichier SH_GenericDebugableStateMachine\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_GenericStateMachine::SH_GenericStateMachine (QStringname = \fC''\fP, \fBQObject\fP *parent = \fC0\fP)"

.PP
\fBParamètres:\fP
.RS 4
\fIname\fP 
.br
\fIparent\fP 
.RE
.PP

.PP
Définition à la ligne 13 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références emitGoNext(), goNext(), m_errorState, m_isRunning, et toString()\&.
.PP
.nf
13                                                                             :
14     QStateMachine(parent), SH_NamedObject(name), m_isRunning(false)
15 {
16     connect(this, &SH_GenericStateMachine::goNext, this, &SH_GenericStateMachine::emitGoNext);
17     this->blockSignals(!m_isRunning);
18     m_errorState = new SH_GenericState("error state", this);
19     this->setErrorState(m_errorState);
20     connect(m_errorState, &QState::entered, [=]() { qDebug() << "Error in machine " << this->toString() << ": " << this->errorString(); });
21 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "SH_GenericStateMachine::addChildrenNextTransition (QAbstractState *previousState, QAbstractState *nextState)\fC [virtual]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIpreviousState\fP 
.br
\fInextState\fP 
.RE
.PP

.PP
Réimplémentée dans \fBSH_LoopingInOutStateMachine\fP\&.
.PP
Définition à la ligne 99 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références next(), toString(), et SH_GenericState::toString()\&.
.PP
Référencé par SH_LoopingInOutStateMachine::addChildrenNextTransition(), et SH_InOutStateMachine::addChildrenNextTransition()\&.
.PP
.nf
100 {
101     SH_GenericStateMachine* fsmPreviousState = qobject_cast<SH_GenericStateMachine*>(previousState);
102     SH_GenericState* genPreviousState = qobject_cast<SH_GenericState*>(previousState);
103     QFinalState* final = qobject_cast<QFinalState*>(nextState);
104     if(!final) {
105         if(genPreviousState) {
106             qDebug() << "next transition between " << genPreviousState->toString() << " and " << nextState;
107             genPreviousState->addTransition(genPreviousState, SIGNAL(next()), nextState);
108         }
109         if(fsmPreviousState) {
110             qDebug() << "next transition between " << fsmPreviousState->toString() << " and " << nextState;
111             fsmPreviousState->addTransition(fsmPreviousState, SIGNAL(next()), nextState);
112         }
113     }
114 }
.fi
.SS "void SH_GenericStateMachine::emitGoNext ()\fC [protected]\fP, \fC [slot]\fP"

.PP
Définition à la ligne 58 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références isRunning(), et next()\&.
.PP
Référencé par SH_GenericStateMachine()\&.
.PP
.nf
59 {
60     if(isRunning()) {
61         emit next();
62     }
63 }
.fi
.SS "SH_GenericStateMachine::goNext ()\fC [signal]\fP"

.PP
Référencé par SH_AddressCreationStateMachine::SH_AddressCreationStateMachine(), et SH_GenericStateMachine()\&.
.SS "SH_GenericStateMachine::isRunning ()"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 47 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références m_isRunning\&.
.PP
Référencé par SH_ApplicationCore::cancelRunningThread(), SH_ApplicationCore::connectRunningThread(), et emitGoNext()\&.
.PP
.nf
48 {
49     return m_isRunning;
50 }
.fi
.SS "SH_NamedObject::name () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 32 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SH_NamedObject::m_name\&.
.PP
Référencé par onEntry(), SH_GenericState::onEntry(), onExit(), SH_GenericState::onExit(), SH_GenericState::onTransitionTriggered(), SH_NamedObject::setName(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
33 {
34     return m_name;
35 }
.fi
.SS "SH_GenericStateMachine::next ()\fC [signal]\fP"

.PP
Référencé par addChildrenNextTransition(), SH_LoopingInOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addChildrenReplaceTransition(), emitGoNext(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.SS "SH_GenericStateMachine::onEntry (QEvent *event)\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 72 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références m_isRunning, et SH_NamedObject::name()\&.
.PP
.nf
73 {
74     m_isRunning = true;
75     this->blockSignals(!m_isRunning);
76     qDebug() << "Machine: " << machine()->objectName() << " entered " << this->name();
77 }
.fi
.SS "SH_GenericStateMachine::onExit (QEvent *event)\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 85 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références m_isRunning, et SH_NamedObject::name()\&.
.PP
.nf
86 {
87     m_isRunning = false;
88     this->blockSignals(!m_isRunning);
89     qDebug() << "Machine: " << machine()->objectName() << " exited  " << name();
90 }
.fi
.SS "SH_NamedObject::ptraddress () const\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 54 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SH_NamedObject::m_ptraddress\&.
.PP
.nf
55 {
56     return m_ptraddress;
57 }
.fi
.SS "SH_NamedObject::setName (const QString &name)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIname\fP 
.RE
.PP

.PP
Définition à la ligne 43 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SH_NamedObject::m_name, et SH_NamedObject::name()\&.
.PP
.nf
44 {
45     m_name = name;
46 }
.fi
.SS "SH_GenericStateMachine::toString ()\fC [virtual]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 30 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références SH_NamedObject::toString(), et SH_GenericState::toString()\&.
.PP
Référencé par addChildrenNextTransition(), SH_LoopingInOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addChildrenNextTransition(), SH_ApplicationCore::launchBillingsThread(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_GenericStateMachine(), et SH_GenericState::toString()\&.
.PP
.nf
31 {
32     QObject* parent = this->parent();
33     SH_GenericState* par = qobject_cast<SH_GenericState *>(parent);
34     if(par) {
35         return SH_NamedObject::toString()+ " [descending from "+par->toString()+"] ";
36     } else {
37         return SH_NamedObject::toString();
38     }
39 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "SH_GenericStateMachine::m_errorState\fC [private]\fP"

.PP
Définition à la ligne 83 du fichier SH_GenericDebugableStateMachine\&.h\&.
.PP
Référencé par SH_GenericStateMachine()\&.
.SS "SH_GenericStateMachine::m_isRunning\fC [private]\fP"

.PP
Définition à la ligne 77 du fichier SH_GenericDebugableStateMachine\&.h\&.
.PP
Référencé par isRunning(), onEntry(), onExit(), et SH_GenericStateMachine()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
