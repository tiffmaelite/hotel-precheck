.TH "SimpleHotel::SH_GenericState" 3 "Lundi Juin 24 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SimpleHotel::SH_GenericState \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_GenericDebugableState\&.h>\fP
.PP
Est dérivée de \fBQState\fP, et \fBSimpleHotel::SH_NamedObject\fP\&.
.PP
Dérivée par \fBSimpleHotel::SH_AdaptDatabaseState\fP, \fBSimpleHotel::SH_InOutState\fP, et \fBSimpleHotel::SH_PrintingState\fP\&.
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_GenericState\fP (QString \fBname\fP='', \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.in -1c
.SS "Connecteurs privés"

.in +1c
.ti -1c
.RI "void \fBemitGoNext\fP ()"
.br
.ti -1c
.RI "void \fBonTransitionTriggered\fP ()"
.br
.in -1c
.SS "Fonctions membres privées"

.in +1c
.ti -1c
.RI "virtual QString \fBname\fP () const "
.br
.ti -1c
.RI "QString \fBptraddress\fP () const "
.br
.ti -1c
.RI "virtual void \fBsetName\fP (const QString &\fBname\fP)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "bool \fBm_isRunning\fP"
.br
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 15 du fichier SH_GenericDebugableState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SimpleHotel::SH_GenericState::SH_GenericState (QStringname = \fC''\fP, \fBQState\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 14 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références emitGoNext(), goNext(), et m_isRunning\&.
.PP
.nf
14                                                              :
15     QState(parent), SH_NamedObject(name), m_isRunning(false)
16 {
17     this->setObjectName(name);
18     connect(this, &SH_GenericState::goNext, this, &SH_GenericState::emitGoNext);
19     this->blockSignals(!m_isRunning);
20 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void SimpleHotel::SH_GenericState::emitGoNext ()\fC [private]\fP, \fC [slot]\fP"

.PP
Définition à la ligne 38 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références isRunning(), et next()\&.
.PP
Référencé par SH_GenericState()\&.
.PP
.nf
39 {
40     if(this->isRunning()) {
41         emit next();
42     }
43 }
.fi
.SS "SimpleHotel::SH_GenericState::goNext ()\fC [signal]\fP"

.PP
Référencé par SimpleHotel::SH_QuestionState::checkValidity(), SimpleHotel::SH_ConfirmationState::confirmInput(), SimpleHotel::SH_AdaptDatabaseState::insertUpdate(), SimpleHotel::SH_StatementState::onEntry(), SimpleHotel::SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_GenericState(), et SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SimpleHotel::SH_GenericState::isRunning ()"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 95 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références m_isRunning\&.
.PP
Référencé par SimpleHotel::SH_InOutStateMachine::addChildrenReplaceTransition(), SimpleHotel::SH_InOutState::display(), emitGoNext(), SimpleHotel::SH_InOutState::setInput(), SimpleHotel::SH_InOutState::setOutput(), et SimpleHotel::SH_InOutState::setVisibility()\&.
.PP
.nf
96 {
97     return m_isRunning;
98 }
.fi
.SS "SimpleHotel::SH_NamedObject::name () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 34 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SimpleHotel::SH_NamedObject::m_name\&.
.PP
Référencé par SimpleHotel::SH_GenericStateMachine::onEntry(), onEntry(), SimpleHotel::SH_GenericStateMachine::onExit(), onExit(), SimpleHotel::SH_NamedObject::setName(), et SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
35 {
36     return m_name;
37 }
.fi
.SS "SimpleHotel::SH_GenericState::next ()\fC [signal]\fP"

.PP
Référencé par emitGoNext()\&.
.SS "SimpleHotel::SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 71 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_MessageManager::infoMessage(), m_isRunning, SimpleHotel::SH_NamedObject::name(), et onTransitionTriggered()\&.
.PP
Référencé par SimpleHotel::SH_StatementState::onEntry()\&.
.PP
.nf
72 {
73     Q_UNUSED(event);
74     foreach (QAbstractTransition* tr, transitions()) {
75         connect(tr, SIGNAL(triggered()), this, SLOT(onTransitionTriggered()));
76     }
77     m_isRunning = true;
78     this->blockSignals(!m_isRunning);
79     SH_MessageManager::infoMessage(QString("Machine: %1, entered state %2")\&.arg(machine()->objectName())\&.arg(name()));
80 }
.fi
.SS "SimpleHotel::SH_GenericState::onExit (QEvent *event)\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 87 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_MessageManager::infoMessage(), m_isRunning, et SimpleHotel::SH_NamedObject::name()\&.
.PP
Référencé par SimpleHotel::SH_InOutState::onExit()\&.
.PP
.nf
88 {
89     Q_UNUSED(event);
90     m_isRunning = false;
91     this->blockSignals(!m_isRunning);
92     SH_MessageManager::infoMessage(QString("Machine: %1, exited state %2")\&.arg(machine()->objectName())\&.arg(name()));
93 }
.fi
.SS "SimpleHotel::SH_GenericState::onTransitionTriggered ()\fC [private]\fP, \fC [slot]\fP"

.PP
Définition à la ligne 51 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_MessageManager::infoMessage()\&.
.PP
Référencé par onEntry()\&.
.PP
.nf
52 {
53     QAbstractTransition* tr = qobject_cast<QAbstractTransition*>(sender());
54     if (tr == 00) return;
55     QSignalTransition *str = qobject_cast<QSignalTransition*>(tr);
56     QString signal = "";
57     if(str) {
58         signal = QString(str->signal());
59     }
60     SH_GenericState* sourceState = qobject_cast<SH_GenericState*>(tr->sourceState());
61     SH_GenericState* targetState = qobject_cast<SH_GenericState*>(tr->targetState());
62     SH_MessageManager::infoMessage(QString("transition %4 triggered in %1 from %2 to %3 with thanks to event %5")\&.arg(machine()->objectName())\&.arg(sourceState->objectName())\&.arg(targetState->objectName())\&.arg(QString::number(senderSignalIndex()))\&.arg(signal));
63 }
.fi
.SS "SimpleHotel::SH_NamedObject::ptraddress () const\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 56 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SimpleHotel::SH_NamedObject::m_ptraddress\&.
.PP
.nf
57 {
58     return m_ptraddress;
59 }
.fi
.SS "SimpleHotel::SH_NamedObject::setName (const QString &name)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIname\fP 
.RE
.PP

.PP
Définition à la ligne 45 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SimpleHotel::SH_NamedObject::m_name, et SimpleHotel::SH_NamedObject::name()\&.
.PP
.nf
46 {
47     m_name = name;
48 }
.fi
.SS "SimpleHotel::SH_GenericState::toString ()\fC [virtual]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSimpleHotel::SH_NamedObject\fP\&.
.PP
Définition à la ligne 27 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_GenericStateMachine::toString(), et SimpleHotel::SH_NamedObject::toString()\&.
.PP
Référencé par SimpleHotel::SH_QuestionState::checkValidity(), SimpleHotel::SH_DateQuestionState::rawInput(), et SimpleHotel::SH_GenericStateMachine::toString()\&.
.PP
.nf
28 {
29     QStateMachine* machine = this->machine();
30     SH_InOutStateMachine* mach = qobject_cast<SH_InOutStateMachine *>(machine);
31     if(mach) {
32         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
33     } else {
34         return SH_NamedObject::toString();
35     }
36 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "SimpleHotel::SH_GenericState::m_isRunning\fC [private]\fP"

.PP
Définition à la ligne 90 du fichier SH_GenericDebugableState\&.h\&.
.PP
Référencé par isRunning(), onEntry(), onExit(), et SH_GenericState()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
