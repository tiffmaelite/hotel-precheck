.TH "SH_StringQuestionState" 3 "Mardi Juillet 2 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_StringQuestionState \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_StringQuestionState\&.h>\fP
.PP
Est dérivée de \fBSH_QuestionState\fP\&.
.PP
Dérivée par \fBSH_RegExpQuestionState\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "virtual void \fBsetOutput\fP (const QString &\fBoutput\fP)"
.br
.ti -1c
.RI "virtual void \fBsetVisibility\fP (bool isVisible)"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBanswerInvalid\fP ()"
.br
.RI "\fIanswerInvalid \fP"
.ti -1c
.RI "void \fBanswerValid\fP ()"
.br
.RI "\fIanswerValid \fP"
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.ti -1c
.RI "void \fBresendInput\fP (QVariant \fBinput\fP)"
.br
.ti -1c
.RI "void \fBsendOutput\fP (QVariant \fBoutput\fP)"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_StringQuestionState\fP (QString question, QString \fBname\fP, int minLength=0, int maxLength=-1, \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "bool \fBcheckValidity\fP ()"
.br
.ti -1c
.RI "void \fBdisplay\fP (bool canDisplay)"
.br
.ti -1c
.RI "void \fBemitResendInput\fP ()"
.br
.ti -1c
.RI "void \fBemitSendOutput\fP ()"
.br
.ti -1c
.RI "virtual QVariant \fBgivenAnswer\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBinput\fP () const "
.br
.ti -1c
.RI "virtual bool \fBisAnswerValid\fP (const QVariant &\fBgivenAnswer\fP)"
.br
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "int \fBmaxLen\fP () const "
.br
.ti -1c
.RI "int \fBminLen\fP () const "
.br
.ti -1c
.RI "virtual QString \fBoutput\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBrawInput\fP () const "
.br
.ti -1c
.RI "virtual void \fBsetGivenAnswer\fP (const QVariant &\fBgivenAnswer\fP)"
.br
.ti -1c
.RI "virtual void \fBsetInput\fP (const QVariant &\fBinput\fP)"
.br
.ti -1c
.RI "void \fBsetMaxLen\fP (int \fBmaxLen\fP)"
.br
.ti -1c
.RI "void \fBsetMinLen\fP (int \fBminLen\fP)"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.ti -1c
.RI "bool \fBvisibility\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "int \fBm_maxLen\fP"
.br
.RI "\fIm_maxLen \fP"
.ti -1c
.RI "int \fBm_minLen\fP"
.br
.RI "\fIm_minLen \fP"
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 10 du fichier SH_StringQuestionState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_StringQuestionState::SH_StringQuestionState (QStringquestion, QStringname, intminLength = \fC0\fP, intmaxLength = \fC-1\fP, \fBQState\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 8 du fichier SH_StringQuestionState\&.cpp\&.
.PP
.nf
8                                                                                                                            :
9     SH_QuestionState(question, name, parent), m_minLen(minLength), m_maxLen(maxLength)
10 {
11 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void SH_QuestionState::answerInvalid ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
answerInvalid 
.PP
Référencé par SH_QuestionState::checkValidity(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "void SH_QuestionState::answerValid ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
answerValid 
.PP
Référencé par SH_QuestionState::checkValidity(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_QuestionState::checkValidity ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 17 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::answerInvalid(), SH_QuestionState::answerValid(), SH_QuestionState::givenAnswer(), SH_GenericState::goNext(), SH_MessageManager::infoMessage(), SH_QuestionState::isAnswerValid(), SH_GenericState::isRunning(), SH_InOutState::output(), SH_InOutState::setInput(), et SH_GenericState::toString()\&.
.PP
Référencé par SH_QuestionState::setGivenAnswer()\&.
.PP
.nf
18 {
19     bool ok = false;
20     if(isRunning()) {
21         ok = this->isAnswerValid(this->givenAnswer());
22         if(ok) {
23             SH_MessageManager::infoMessage(QString("%1 is a VALID answer for question '%2'!")\&.arg(this->givenAnswer()\&.toString())\&.arg(this->output()));
24             SH_InOutState::setInput(this->givenAnswer());
25             emit answerValid();
26             emit goNext();
27         } else {
28             SH_MessageManager::infoMessage(QString("%1 is an INvalid :-( answer for question '%2'")\&.arg(this->givenAnswer()\&.toString())\&.arg(this->output()));
29             emit answerInvalid();
30         }
31     }
32     return ok;
33 }
.fi
.SS "SH_InOutState::display (boolcanDisplay)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIcanDisplay\fP 
.RE
.PP

.PP
Définition à la ligne 80 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::emitSendOutput(), et SH_InOutState::m_display\&.
.PP
.nf
81 {
82         m_display=canDisplay;
83         emitSendOutput();
84 }
.fi
.SS "void SH_InOutState::emitResendInput ()\fC [inherited]\fP"

.PP
Définition à la ligne 92 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_input, SH_InOutState::m_isVisible, et SH_InOutState::resendInput()\&.
.PP
Référencé par SH_InOutState::setInput(), et SH_InOutState::SH_InOutState()\&.
.PP
.nf
92                                     {
93     if(isRunning() && m_isVisible) {
94         emit resendInput(m_input);
95     }
96 }
.fi
.SS "void SH_InOutState::emitSendOutput ()\fC [inherited]\fP"

.PP
Définition à la ligne 86 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_display, SH_InOutState::m_isVisible, SH_InOutState::m_output, et SH_InOutState::sendOutput()\&.
.PP
Référencé par SH_InOutState::display(), SH_InOutState::setOutput(), et SH_InOutState::SH_InOutState()\&.
.PP
.nf
86                                    {
87     if(isRunning() && m_display && !m_output\&.isEmpty() && m_isVisible) {
88         emit sendOutput(QVariant(m_output));
89     }
90 }
.fi
.SS "SH_QuestionState::givenAnswer () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 48 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::m_givenAnswer\&.
.PP
Référencé par SH_QuestionState::checkValidity(), SH_DatabaseContentQuestionState::rawInput(), SH_QuestionState::setGivenAnswer(), SH_QuestionState::setInput(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
49 {
50     return this->m_givenAnswer;
51 }
.fi
.SS "SH_GenericState::goNext ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), SH_AdaptDatabaseState::insertUpdate(), SH_StatementState::onEntry(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_GenericState::SH_GenericState(), SH_InOutState::SH_InOutState(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_InOutState::input () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 19 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_input\&.
.PP
Référencé par SH_InOutState::rawInput(), SH_DateQuestionState::rawInput(), et SH_InOutState::setInput()\&.
.PP
.nf
20 {
21     return m_input;
22 }
.fi
.SS "SH_StringQuestionState::isAnswerValid (const QVariant &givenAnswer)\fC [virtual]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIgivenAnswer\fP 
.RE
.PP

.PP
Implémente \fBSH_QuestionState\fP\&.
.PP
Réimplémentée dans \fBSH_RegExpQuestionState\fP\&.
.PP
Définition à la ligne 16 du fichier SH_StringQuestionState\&.cpp\&.
.PP
Références m_maxLen, et m_minLen\&.
.PP
.nf
17 {
18     QString answer = givenAnswer\&.toString();
19     if(!answer\&.isEmpty()) {
20         int answerLength= answer\&.length();
21         return ((m_maxLen <= m_minLen || answerLength <= m_maxLen) && answerLength >= m_minLen);
22     } else {
23         return false;
24     }
25 }
.fi
.SS "SH_GenericState::isRunning ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 81 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_GenericState::m_isRunning\&.
.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), SH_GenericState::emitGoNext(), SH_InOutState::emitResendInput(), SH_InOutState::emitSendOutput(), SH_InOutState::setInput(), SH_InOutState::setOutput(), et SH_InOutState::setVisibility()\&.
.PP
.nf
82 {
83     return m_isRunning;
84 }
.fi
.SS "SH_StringQuestionState::maxLen () const"

.PP
\fBRenvoie:\fP
.RS 4
int 
.RE
.PP

.PP
Définition à la ligne 30 du fichier SH_StringQuestionState\&.cpp\&.
.PP
Références m_maxLen\&.
.PP
Référencé par setMaxLen()\&.
.PP
.nf
31 {
32     return m_maxLen;
33 }
.fi
.SS "SH_StringQuestionState::minLen () const"

.PP
\fBRenvoie:\fP
.RS 4
int 
.RE
.PP

.PP
Définition à la ligne 46 du fichier SH_StringQuestionState\&.cpp\&.
.PP
Références m_minLen\&.
.PP
Référencé par setMinLen()\&.
.PP
.nf
47 {
48     return m_minLen;
49 }
.fi
.SS "SH_GenericState::next ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_GenericState::emitGoNext()\&.
.SS "SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 60 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), SH_GenericState::m_isRunning, SH_NamedObject::name(), et SH_GenericState::onTransitionTriggered()\&.
.PP
Référencé par SH_StatementState::onEntry()\&.
.PP
.nf
61 {
62     Q_UNUSED(event);
63     foreach (QAbstractTransition* tr, transitions()) {
64         connect(tr, SIGNAL(triggered()), this, SLOT(onTransitionTriggered()));
65     }
66     m_isRunning = true;
67     this->blockSignals(!m_isRunning);
68     SH_MessageManager::debugMessage(QString("Machine: %1, entered state %2")\&.arg(machine()->objectName())\&.arg(name()));
69 }
.fi
.SS "SH_GenericState::onExit (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 74 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), SH_GenericState::m_isRunning, et SH_NamedObject::name()\&.
.PP
.nf
75 {
76     Q_UNUSED(event);
77     m_isRunning = false;
78     this->blockSignals(!m_isRunning);
79     SH_MessageManager::debugMessage(QString("Machine: %1, exited state %2")\&.arg(machine()->objectName())\&.arg(name()));
80 }
.fi
.SS "SH_InOutState::output () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 47 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_output\&.
.PP
Référencé par SH_QuestionState::checkValidity(), et SH_InOutState::setOutput()\&.
.PP
.nf
48 {
49     return m_output;
50 }
.fi
.SS "SH_InOutState::rawInput () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Réimplémentée dans \fBSH_DateQuestionState\fP, et \fBSH_DatabaseContentQuestionState\fP\&.
.PP
Définition à la ligne 27 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::input()\&.
.PP
Référencé par SH_InOutStateMachine::addIOState()\&.
.PP
.nf
28 {
29     return input();
30 }
.fi
.SS "SH_InOutState::resendInput (QVariantinput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), et SH_InOutState::emitResendInput()\&.
.SS "SH_InOutState::sendOutput (QVariantoutput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), et SH_InOutState::emitSendOutput()\&.
.SS "SH_QuestionState::setGivenAnswer (const QVariant &givenAnswer)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIgivenAnswer\fP 
.RE
.PP

.PP
Définition à la ligne 56 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::checkValidity(), SH_QuestionState::givenAnswer(), et SH_QuestionState::m_givenAnswer\&.
.PP
Référencé par SH_QuestionState::setInput()\&.
.PP
.nf
57 {
58     if(givenAnswer != this->givenAnswer()) {
59         this->m_givenAnswer = givenAnswer;
60         this->checkValidity();
61     }
62 }
.fi
.SS "SH_QuestionState::setInput (const QVariant &input)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_InOutState\fP\&.
.PP
Définition à la ligne 38 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::givenAnswer(), et SH_QuestionState::setGivenAnswer()\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
39 {
40     if(input != this->givenAnswer()) {
41         this->setGivenAnswer(input);
42     }
43 }
.fi
.SS "SH_StringQuestionState::setMaxLen (intmaxLen)"

.PP
\fBParamètres:\fP
.RS 4
\fImaxLen\fP 
.RE
.PP

.PP
Définition à la ligne 38 du fichier SH_StringQuestionState\&.cpp\&.
.PP
Références m_maxLen, et maxLen()\&.
.PP
.nf
39 {
40     m_maxLen = maxLen;
41 }
.fi
.SS "SH_StringQuestionState::setMinLen (intminLen)"

.PP
\fBParamètres:\fP
.RS 4
\fIminLen\fP 
.RE
.PP

.PP
Définition à la ligne 54 du fichier SH_StringQuestionState\&.cpp\&.
.PP
Références m_minLen, et minLen()\&.
.PP
.nf
55 {
56     m_minLen = minLen;
57 }
.fi
.SS "SH_InOutState::setOutput (const QString &output)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Réimplémentée dans \fBSH_DatabaseContentQuestionState\fP\&.
.PP
Définition à la ligne 55 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::emitSendOutput(), SH_GenericState::isRunning(), SH_InOutState::m_output, et SH_InOutState::output()\&.
.PP
Référencé par SH_DatabaseContentQuestionState::setOutput(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
56 {
57     if(isRunning() && output != this->output()) {
58         m_output = output;
59         emitSendOutput();
60     }
61 }
.fi
.SS "SH_InOutState::setVisibility (boolisVisible)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIisVisible\fP 
.RE
.PP

.PP
Définition à la ligne 66 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_isVisible, et SH_InOutState::visibility()\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
67 {
68     if(isRunning() && isVisible!=this->visibility()) {
69         m_isVisible = isVisible;
70     }
71 }
.fi
.SS "SH_GenericState::toString ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 23 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_NamedObject::toString(), et SH_GenericState::toString()\&.
.PP
Référencé par SH_QuestionState::checkValidity(), SH_DateQuestionState::rawInput(), SH_GenericStateMachine::toString(), et SH_GenericState::toString()\&.
.PP
.nf
24 {
25     QStateMachine* machine = this->machine();
26     SH_GenericState* mach = qobject_cast<SH_GenericState *>(machine);
27     if(mach) {
28         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
29     } else {
30         return SH_NamedObject::toString();
31     }
32 }
.fi
.SS "SH_InOutState::visibility ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 76 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_isVisible\&.
.PP
Référencé par SH_InOutState::setVisibility()\&.
.PP
.nf
76                                {
77     return m_isVisible;
78 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "int SH_StringQuestionState::m_maxLen\fC [private]\fP"

.PP
m_maxLen 
.PP
Définition à la ligne 64 du fichier SH_StringQuestionState\&.h\&.
.PP
Référencé par isAnswerValid(), maxLen(), et setMaxLen()\&.
.SS "int SH_StringQuestionState::m_minLen\fC [private]\fP"

.PP
m_minLen 
.PP
Définition à la ligne 60 du fichier SH_StringQuestionState\&.h\&.
.PP
Référencé par isAnswerValid(), minLen(), et setMinLen()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
