.TH "SH_MessageManager" 3 "Mardi Juillet 2 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_MessageManager \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_MessageManager\&.h>\fP
.PP
Est dérivée de \fBQObject\fP\&.
.SS "Types publics"

.in +1c
.ti -1c
.RI "enum \fBErrorMode\fP { \fBERROR\fP, \fBTEST\fP, \fBDEBUG\fP, \fBDEBUG_VERBOSE\fP, \fBRELEASE\fP }"
.br
.in -1c
.SS "Fonctions membres publiques statiques"

.in +1c
.ti -1c
.RI "static void \fBdebugMessage\fP (QString message, QString title='Trace')"
.br
.ti -1c
.RI "static void \fBerrorMessage\fP (QString message, QString title='Erreur')"
.br
.ti -1c
.RI "static void \fBinfoMessage\fP (QString message, QString title='Info')"
.br
.ti -1c
.RI "static void \fBsuccessMessage\fP (QString message, QString title='Réussite')"
.br
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 15 du fichier SH_MessageManager\&.h\&.
.SH "Documentation des énumérations membres"
.PP 
.SS "enum \fBSH_MessageManager::ErrorMode\fP"

.PP
\fBValeurs énumérées\fP
.in +1c
.TP
\fB\fIERROR \fP\fP
.TP
\fB\fITEST \fP\fP
.TP
\fB\fIDEBUG \fP\fP
.TP
\fB\fIDEBUG_VERBOSE \fP\fP
.TP
\fB\fIRELEASE \fP\fP
.PP
Définition à la ligne 27 du fichier SH_MessageManager\&.h\&.
.PP
.nf
27 { ERROR, TEST, DEBUG, DEBUG_VERBOSE, RELEASE };
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "SH_MessageManager::debugMessage (QStringmessage, QStringtitle = \fC'Trace'\fP)\fC [static]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fImessage\fP 
.br
\fItitle\fP 
.RE
.PP

.PP
Définition à la ligne 32 du fichier SH_MessageManager\&.cpp\&.
.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addState(), SH_InOutStateMachine::addStateMachine(), SH_ConfirmationState::confirmInput(), SH_SqlDataModel::data(), SH_SqlDataModel::datas(), SH_DatabaseManager::execSelectQuery(), SH_SqlDataModel::fetch(), SH_NumericQuestionState::isAnswerValid(), SH_DateQuestionState::isAnswerValid(), SH_GenericStateMachine::onEntry(), SH_GenericState::onEntry(), SH_GenericStateMachine::onExit(), SH_GenericState::onExit(), SH_GenericState::onTransitionTriggered(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_DatabaseContentQuestionState::SH_DatabaseContentQuestionState()\&.
.PP
.nf
33 {
34     if(!message\&.isEmpty()) {
35 //#ifdef DEBUG
36     qDebug() << QObject::tr("%L1 : %L2")\&.arg(title)\&.arg(message);
37 //#endif
38     }
39 }
.fi
.SS "SH_MessageManager::errorMessage (QStringmessage, QStringtitle = \fC'Erreur'\fP)\fC [static]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fImessage\fP 
.br
\fItitle\fP 
.RE
.PP

.PP
Définition à la ligne 17 du fichier SH_MessageManager\&.cpp\&.
.PP
Référencé par SH_SqlDataModel::data(), SH_DatabaseManager::dbConnect(), SH_SqlDataModel::fetch(), main(), SH_DatabaseManager::SH_DatabaseManager(), et SH_GenericStateMachine::SH_GenericStateMachine()\&.
.PP
.nf
18 {
19     if(!message\&.isEmpty()) {
20 #ifdef DEBUG
21     qWarning() << QObject::tr("%L1 : %L2")\&.arg(title)\&.arg(message);
22 #else
23     QMessageBox::critical(0,QObject::tr("%L1")\&.arg(title),QObject::tr("%L2")\&.arg(message));
24 #endif
25     }
26 }
.fi
.SS "SH_MessageManager::infoMessage (QStringmessage, QStringtitle = \fC'Info'\fP)\fC [static]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fImessage\fP 
.br
\fItitle\fP 
.RE
.PP

.PP
Définition à la ligne 61 du fichier SH_MessageManager\&.cpp\&.
.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_QuestionState::checkValidity(), et SH_ApplicationCore::receiveInput()\&.
.PP
.nf
62 {
63     if(!message\&.isEmpty()) {
64 #ifdef DEBUG
65     qDebug() << QObject::tr("%L1 : %L2")\&.arg(title)\&.arg(message);
66 #else
67     QMessageBox::warning(0, QObject::tr("%L1")\&.arg(title), QObject::tr("%L1 : %L2")\&.arg(title)\&.arg(message));
68 #endif
69     }
70 }
.fi
.SS "SH_MessageManager::successMessage (QStringmessage, QStringtitle = \fC'Réussite'\fP)\fC [static]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fImessage\fP 
.br
\fItitle\fP 
.RE
.PP

.PP
Définition à la ligne 46 du fichier SH_MessageManager\&.cpp\&.
.PP
.nf
47 {
48     if(!message\&.isEmpty()) {
49 #ifdef DEBUG
50     qDebug() << QObject::tr("%L1 : %L2")\&.arg(title)\&.arg(message);
51 #else
52     QMessageBox::information(0,QObject::tr("%L1")\&.arg(title),QObject::tr("%L2")\&.arg(message));
53 #endif
54     }
55 }
.fi


.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
