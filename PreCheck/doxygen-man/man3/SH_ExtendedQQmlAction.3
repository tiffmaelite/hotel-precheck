.TH "SH_ExtendedQQmlAction" 3 "Mardi Juillet 2 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_ExtendedQQmlAction \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_ExtendedQQmlAction\&.h>\fP
.PP
Est dérivée de \fBQObject\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "void \fBtrigger\fP ()"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBenabledChanged\fP ()"
.br
.ti -1c
.RI "void \fBiconChanged\fP ()"
.br
.ti -1c
.RI "void \fBiconNameChanged\fP ()"
.br
.ti -1c
.RI "void \fBiconSourceChanged\fP ()"
.br
.ti -1c
.RI "void \fBkeyShortcutChanged\fP (Qt::Key \fBkeyShortcut\fP)"
.br
.ti -1c
.RI "void \fBshortcutChanged\fP (QString \fBshortcut\fP)"
.br
.ti -1c
.RI "void \fBtextChanged\fP ()"
.br
.ti -1c
.RI "void \fBtoggled\fP (bool checked)"
.br
.ti -1c
.RI "void \fBtooltipChanged\fP (QString arg)"
.br
.ti -1c
.RI "void \fBtriggered\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_ExtendedQQmlAction\fP (\fBQObject\fP *parent=0)"
.br
.ti -1c
.RI "\fB~SH_ExtendedQQmlAction\fP ()"
.br
.ti -1c
.RI "bool \fBevent\fP (QEvent *e)"
.br
.ti -1c
.RI "QIcon \fBicon\fP () const "
.br
.ti -1c
.RI "QString \fBiconName\fP () const "
.br
.ti -1c
.RI "QUrl \fBiconSource\fP () const "
.br
.ti -1c
.RI "QVariant \fBiconVariant\fP () const "
.br
.ti -1c
.RI "bool \fBisEnabled\fP () const "
.br
.ti -1c
.RI "QKeySequence \fBkeyShortcut\fP () const "
.br
.ti -1c
.RI "void \fBsetEnabled\fP (bool e)"
.br
.ti -1c
.RI "void \fBsetIcon\fP (QIcon \fBicon\fP)"
.br
.ti -1c
.RI "void \fBsetIconName\fP (const QString &\fBiconName\fP)"
.br
.ti -1c
.RI "void \fBsetIconSource\fP (const QUrl &\fBiconSource\fP)"
.br
.ti -1c
.RI "void \fBsetKeyShortcut\fP (const Qt::Key &\fBshortcut\fP)"
.br
.ti -1c
.RI "void \fBsetMnemonicFromText\fP (const QString &mnemonic)"
.br
.ti -1c
.RI "void \fBsetShortcut\fP (const QString &\fBshortcut\fP)"
.br
.ti -1c
.RI "void \fBsetText\fP (const QString &\fBtext\fP)"
.br
.ti -1c
.RI "void \fBsetTooltip\fP (const QString &\fBtooltip\fP)"
.br
.ti -1c
.RI "QString \fBshortcut\fP () const "
.br
.ti -1c
.RI "QString \fBtext\fP () const "
.br
.ti -1c
.RI "QString \fBtooltip\fP () const "
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBsetKeySequence\fP (const QKeySequence &sequence)"
.br
.in -1c
.SS "Propriétés"

.in +1c
.ti -1c
.RI "QVariant \fB__icon\fP"
.br
.ti -1c
.RI "bool \fBenabled\fP"
.br
.ti -1c
.RI "QString \fBiconName\fP"
.br
.ti -1c
.RI "QUrl \fBiconSource\fP"
.br
.ti -1c
.RI "Qt::Key \fBkeyShortcut\fP"
.br
.ti -1c
.RI "QString \fBshortcut\fP"
.br
.ti -1c
.RI "QString \fBtext\fP"
.br
.ti -1c
.RI "QString \fBtooltip\fP"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "bool \fBm_enabled\fP"
.br
.RI "\fIm_enabled \fP"
.ti -1c
.RI "QIcon \fBm_icon\fP"
.br
.RI "\fIm_icon \fP"
.ti -1c
.RI "QString \fBm_iconName\fP"
.br
.RI "\fIm_iconName \fP"
.ti -1c
.RI "QUrl \fBm_iconSource\fP"
.br
.RI "\fIm_iconSource \fP"
.ti -1c
.RI "QKeySequence \fBm_mnemonic\fP"
.br
.RI "\fIm_mnemonic \fP"
.ti -1c
.RI "QKeySequence \fBm_shortcut\fP"
.br
.RI "\fIm_shortcut \fP"
.ti -1c
.RI "QString \fBm_text\fP"
.br
.RI "\fIm_text \fP"
.ti -1c
.RI "QString \fBm_tooltip\fP"
.br
.RI "\fIm_tooltip \fP"
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 15 du fichier SH_ExtendedQQmlAction\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_ExtendedQQmlAction::SH_ExtendedQQmlAction (\fBQObject\fP *parent = \fC0\fP)\fC [explicit]\fP"

.PP
Définition à la ligne 12 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
.nf
13     : QObject(parent)
14     , m_enabled(true)
15 {
16 }
.fi
.SS "SH_ExtendedQQmlAction::~SH_ExtendedQQmlAction ()"

.PP
Définition à la ligne 21 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références setKeyShortcut(), et setMnemonicFromText()\&.
.PP
.nf
22 {
23     setKeyShortcut(Qt::Key_unknown);
24     setMnemonicFromText(QString());
25 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "SH_ExtendedQQmlAction::enabledChanged ()\fC [signal]\fP"

.PP
Référencé par setEnabled()\&.
.SS "SH_ExtendedQQmlAction::event (QEvent *e)"

.PP
\fBParamètres:\fP
.RS 4
\fIe\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 192 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références m_enabled, m_mnemonic, m_shortcut, et trigger()\&.
.PP
.nf
193 {
194     if (!m_enabled)
195     return false;
196     if (e->type() != QEvent::Shortcut)
197     return false;
198     QShortcutEvent *se = static_cast<QShortcutEvent *>(e);
199     Q_ASSERT_X(se->key() == m_shortcut || se->key() == m_mnemonic,
200     "QQQuickAction::event",
201     "Received shortcut event from incorrect shortcut");
202     if (se->isAmbiguous()) {
203     qWarning("QQQuickAction::event: Ambiguous shortcut overload: %s", se->key()\&.toString(QKeySequence::NativeText)\&.toLatin1()\&.constData());
204     return false;
205     }
206     trigger();
207     return true;
208 }
.fi
.SS "SH_ExtendedQQmlAction::icon () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QIcon 
.RE
.PP

.PP
Définition à la ligne 153 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Références m_icon\&.
.PP
Référencé par setIcon()\&.
.PP
.nf
153 { return m_icon; }
.fi
.SS "SH_ExtendedQQmlAction::iconChanged ()\fC [signal]\fP"

.PP
Référencé par setIcon(), setIconName(), et setIconSource()\&.
.SS "QString SH_ExtendedQQmlAction::iconName () const"

.PP
Référencé par setIconName()\&.
.SS "SH_ExtendedQQmlAction::iconNameChanged ()\fC [signal]\fP"

.PP
Référencé par setIconName()\&.
.SS "QUrl SH_ExtendedQQmlAction::iconSource () const\fC [inline]\fP"

.PP
Définition à la ligne 111 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Références m_iconSource\&.
.PP
Référencé par setIconSource()\&.
.PP
.nf
111 { return m_iconSource; }
.fi
.SS "SH_ExtendedQQmlAction::iconSourceChanged ()\fC [signal]\fP"

.PP
Référencé par setIconSource()\&.
.SS "SH_ExtendedQQmlAction::iconVariant () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 160 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Références m_icon\&.
.PP
.nf
160 { return QVariant(m_icon); }
.fi
.SS "SH_ExtendedQQmlAction::isEnabled () const\fC [inline]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 139 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Références m_enabled\&.
.PP
.nf
139 { return m_enabled; }
.fi
.SS "QKeySequence SH_ExtendedQQmlAction::keyShortcut () const\fC [inline]\fP"

.PP
Définition à la ligne 76 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Références m_shortcut\&.
.PP
.nf
76 { return m_shortcut; }
.fi
.SS "SH_ExtendedQQmlAction::keyShortcutChanged (Qt::KeykeyShortcut)\fC [signal]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIkeyShortcut\fP 
.RE
.PP

.SS "SH_ExtendedQQmlAction::setEnabled (boole)"

.PP
\fBParamètres:\fP
.RS 4
\fIe\fP 
.RE
.PP

.PP
Définition à la ligne 180 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références enabledChanged(), et m_enabled\&.
.PP
.nf
181 {
182     if (e == m_enabled)
183     return;
184     m_enabled = e;
185     emit enabledChanged();
186 }
.fi
.SS "SH_ExtendedQQmlAction::setIcon (QIconicon)\fC [inline]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIicon\fP 
.RE
.PP

.PP
Définition à la ligne 167 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Références icon(), iconChanged(), et m_icon\&.
.PP
.nf
167 { m_icon = icon; emit iconChanged(); }
.fi
.SS "SH_ExtendedQQmlAction::setIconName (const QString &iconName)"

.PP
\fBParamètres:\fP
.RS 4
\fIiconName\fP 
.RE
.PP

.PP
Définition à la ligne 156 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références iconChanged(), iconName(), iconNameChanged(), m_icon, m_iconName, et m_iconSource\&.
.PP
.nf
157 {
158     if (iconName == m_iconName)
159     return;
160     m_iconName = iconName;
161     m_icon = QIcon::fromTheme(m_iconName, QIcon(QQmlFile::urlToLocalFileOrQrc(m_iconSource)));
162     emit iconNameChanged();
163     emit iconChanged();
164 }
.fi
.SS "SH_ExtendedQQmlAction::setIconSource (const QUrl &iconSource)"

.PP
\fBParamètres:\fP
.RS 4
\fIiconSource\fP 
.RE
.PP

.PP
Définition à la ligne 132 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références iconChanged(), iconSource(), iconSourceChanged(), m_icon, m_iconName, et m_iconSource\&.
.PP
.nf
133 {
134     if (iconSource == m_iconSource)
135     return;
136     m_iconSource = iconSource;
137     if (m_iconName\&.isEmpty() || m_icon\&.isNull()) {
138     QString fileString = QQmlFile::urlToLocalFileOrQrc(iconSource);
139     m_icon = QIcon(fileString);
140     emit iconChanged();
141     }
142     emit iconSourceChanged();
143 }
.fi
.SS "SH_ExtendedQQmlAction::setKeySequence (const QKeySequence &sequence)\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIsequence\fP 
.RE
.PP

.PP
Définition à la ligne 67 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références m_shortcut, shortcut(), et shortcutChanged()\&.
.PP
Référencé par setKeyShortcut(), et setShortcut()\&.
.PP
.nf
67                                                                        {
68     if (sequence == m_shortcut)
69     return;
70     
71 /*if (!m_shortcut\&.isEmpty())
72     QGuiApplicationPrivate::instance()->shortcutMap\&.removeShortcut(0, this, m_shortcut);
73     */
74     m_shortcut = sequence;
75     
76 /*if (!m_shortcut\&.isEmpty()) {
77     Qt::ShortcutContext context = Qt::WindowShortcut;
78     QGuiApplicationPrivate::instance()->shortcutMap\&.addShortcut(this, m_shortcut, context, qShortcutContextMatcher);
79     }*/
80     emit shortcutChanged(shortcut());
81 }
.fi
.SS "SH_ExtendedQQmlAction::setKeyShortcut (const Qt::Key &shortcut)"

.PP
\fBParamètres:\fP
.RS 4
\fIshortcut\fP 
.RE
.PP

.PP
Définition à la ligne 86 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références setKeySequence()\&.
.PP
Référencé par ~SH_ExtendedQQmlAction()\&.
.PP
.nf
87 {
88     setKeySequence(QKeySequence(shortcut));
89 }
.fi
.SS "SH_ExtendedQQmlAction::setMnemonicFromText (const QString &mnemonic)"

.PP
\fBParamètres:\fP
.RS 4
\fImnemonic\fP 
.RE
.PP

.PP
Définition à la ligne 112 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références m_mnemonic\&.
.PP
Référencé par setText(), et ~SH_ExtendedQQmlAction()\&.
.PP
.nf
113 {
114     QKeySequence sequence = QKeySequence::mnemonic(text);
115     if (m_mnemonic == sequence)
116     return;
117     
118 /*if (!m_mnemonic\&.isEmpty())
119     QGuiApplicationPrivate::instance()->shortcutMap\&.removeShortcut(0, this, m_mnemonic);
120     */
121     m_mnemonic = sequence;
122     
123 /*if (!m_mnemonic\&.isEmpty()) {
124     Qt::ShortcutContext context = Qt::WindowShortcut;
125     QGuiApplicationPrivate::instance()->shortcutMap\&.addShortcut(this, m_mnemonic, context, qShortcutContextMatcher);
126     }*/
127 }
.fi
.SS "SH_ExtendedQQmlAction::setShortcut (const QString &shortcut)"

.PP
\fBParamètres:\fP
.RS 4
\fIshortcut\fP 
.RE
.PP

.PP
Définition à la ligne 102 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références setKeySequence(), et shortcut()\&.
.PP
.nf
103 {
104     if(shortcut() == arg)
105     return;
106     setKeySequence(QKeySequence::fromString(arg));
107 }
.fi
.SS "SH_ExtendedQQmlAction::setText (const QString &text)"

.PP
\fBParamètres:\fP
.RS 4
\fItext\fP 
.RE
.PP

.PP
Définition à la ligne 30 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références m_text, setMnemonicFromText(), text(), et textChanged()\&.
.PP
.nf
31 {
32     if (text == m_text)
33     return;
34     m_text = text;
35     setMnemonicFromText(m_text);
36     emit textChanged();
37 }
.fi
.SS "SH_ExtendedQQmlAction::setTooltip (const QString &tooltip)"

.PP
\fBParamètres:\fP
.RS 4
\fItooltip\fP 
.RE
.PP

.PP
Définition à la ligne 169 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références m_tooltip, et tooltipChanged()\&.
.PP
.nf
170 {
171     if (m_tooltip != arg) {
172     m_tooltip = arg;
173     emit tooltipChanged(arg);
174     }
175 }
.fi
.SS "QString SH_ExtendedQQmlAction::shortcut () const"

.PP
Référencé par setKeySequence(), et setShortcut()\&.
.SS "SH_ExtendedQQmlAction::shortcutChanged (QStringshortcut)\fC [signal]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIshortcut\fP 
.RE
.PP

.PP
Référencé par setKeySequence()\&.
.SS "QString SH_ExtendedQQmlAction::text () const\fC [inline]\fP"

.PP
Définition à la ligne 48 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Références m_text\&.
.PP
Référencé par setText()\&.
.PP
.nf
48 { return m_text; }
.fi
.SS "SH_ExtendedQQmlAction::textChanged ()\fC [signal]\fP"

.PP
Référencé par setText()\&.
.SS "SH_ExtendedQQmlAction::toggled (boolchecked)\fC [signal]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIchecked\fP 
.RE
.PP

.SS "QString SH_ExtendedQQmlAction::tooltip () const\fC [inline]\fP"

.PP
Définition à la ligne 125 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Références m_tooltip\&.
.PP
.nf
125 { return m_tooltip; }
.fi
.SS "SH_ExtendedQQmlAction::tooltipChanged (QStringarg)\fC [signal]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIarg\fP 
.RE
.PP

.PP
Référencé par setTooltip()\&.
.SS "SH_ExtendedQQmlAction::trigger ()\fC [slot]\fP"

.PP
Définition à la ligne 213 du fichier SH_ExtendedQQmlAction\&.cpp\&.
.PP
Références m_enabled, et triggered()\&.
.PP
Référencé par event()\&.
.PP
.nf
214 {
215     if (!m_enabled)
216     return;
217     emit triggered();
218 }
.fi
.SS "SH_ExtendedQQmlAction::triggered ()\fC [signal]\fP"

.PP
Référencé par trigger()\&.
.SH "Documentation des données membres"
.PP 
.SS "bool SH_ExtendedQQmlAction::m_enabled\fC [private]\fP"

.PP
m_enabled 
.PP
Définition à la ligne 281 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Référencé par event(), isEnabled(), setEnabled(), et trigger()\&.
.SS "QIcon SH_ExtendedQQmlAction::m_icon\fC [private]\fP"

.PP
m_icon 
.PP
Définition à la ligne 276 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Référencé par icon(), iconVariant(), setIcon(), setIconName(), et setIconSource()\&.
.SS "QString SH_ExtendedQQmlAction::m_iconName\fC [private]\fP"

.PP
m_iconName 
.PP
Définition à la ligne 271 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Référencé par setIconName(), et setIconSource()\&.
.SS "QUrl SH_ExtendedQQmlAction::m_iconSource\fC [private]\fP"

.PP
m_iconSource 
.PP
Définition à la ligne 266 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Référencé par iconSource(), setIconName(), et setIconSource()\&.
.SS "QKeySequence SH_ExtendedQQmlAction::m_mnemonic\fC [private]\fP"

.PP
m_mnemonic 
.PP
Définition à la ligne 291 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Référencé par event(), et setMnemonicFromText()\&.
.SS "QKeySequence SH_ExtendedQQmlAction::m_shortcut\fC [private]\fP"

.PP
m_shortcut 
.PP
Définition à la ligne 286 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Référencé par event(), keyShortcut(), et setKeySequence()\&.
.SS "QString SH_ExtendedQQmlAction::m_text\fC [private]\fP"

.PP
m_text 
.PP
Définition à la ligne 261 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Référencé par setText(), et text()\&.
.SS "QString SH_ExtendedQQmlAction::m_tooltip\fC [private]\fP"

.PP
m_tooltip 
.PP
Définition à la ligne 296 du fichier SH_ExtendedQQmlAction\&.h\&.
.PP
Référencé par setTooltip(), et tooltip()\&.
.SH "Documentation des propriétés"
.PP 
.SS "QVariant SH_ExtendedQQmlAction::__icon\fC [read]\fP"

.PP
Définition à la ligne 21 du fichier SH_ExtendedQQmlAction\&.h\&.
.SS "bool SH_ExtendedQQmlAction::enabled\fC [read]\fP, \fC [write]\fP"

.PP
Définition à la ligne 23 du fichier SH_ExtendedQQmlAction\&.h\&.
.SS "SH_ExtendedQQmlAction::iconName\fC [read]\fP, \fC [write]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 20 du fichier SH_ExtendedQQmlAction\&.h\&.
.SS "SH_ExtendedQQmlAction::iconSource\fC [read]\fP, \fC [write]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QUrl 
.RE
.PP

.PP
Définition à la ligne 19 du fichier SH_ExtendedQQmlAction\&.h\&.
.SS "SH_ExtendedQQmlAction::keyShortcut\fC [write]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QKeySequence 
.RE
.PP

.PP
Définition à la ligne 26 du fichier SH_ExtendedQQmlAction\&.h\&.
.SS "SH_ExtendedQQmlAction::shortcut\fC [read]\fP, \fC [write]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 25 du fichier SH_ExtendedQQmlAction\&.h\&.
.SS "SH_ExtendedQQmlAction::text\fC [read]\fP, \fC [write]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 18 du fichier SH_ExtendedQQmlAction\&.h\&.
.SS "SH_ExtendedQQmlAction::tooltip\fC [read]\fP, \fC [write]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 22 du fichier SH_ExtendedQQmlAction\&.h\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
