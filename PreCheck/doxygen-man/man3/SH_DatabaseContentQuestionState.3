.TH "SH_DatabaseContentQuestionState" 3 "Lundi Juin 24 2013" "Version 0.3" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_DatabaseContentQuestionState \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_DatabaseContentQuestionState\&.h>\fP
.PP
Est dérivée de \fBSH_QuestionState\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "virtual void \fBsetVisibility\fP (bool isVisible)"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBanswerInvalid\fP ()"
.br
.RI "\fIanswerInvalid \fP"
.ti -1c
.RI "void \fBanswerValid\fP ()"
.br
.RI "\fIanswerValid \fP"
.ti -1c
.RI "void \fBdisplayChoiceList\fP ()"
.br
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.ti -1c
.RI "void \fBresendInput\fP (QVariant \fBinput\fP)"
.br
.ti -1c
.RI "void \fBsendOutput\fP (QVariant \fBoutput\fP)"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_DatabaseContentQuestionState\fP (QString question, QString \fBname\fP, QString databaseTable, QString tableField, QString databaseCondition='', \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "bool \fBcheckValidity\fP ()"
.br
.ti -1c
.RI "QMap< int, QVariant > \fBchoiceList\fP ()"
.br
.ti -1c
.RI "void \fBdisplay\fP (bool canDisplay)"
.br
.ti -1c
.RI "virtual QVariant \fBgivenAnswer\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBinput\fP () const "
.br
.ti -1c
.RI "virtual bool \fBisAnswerValid\fP (const QVariant &\fBgivenAnswer\fP)"
.br
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.ti -1c
.RI "virtual QString \fBoutput\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBrawInput\fP () const "
.br
.ti -1c
.RI "virtual void \fBsetGivenAnswer\fP (const QVariant &\fBgivenAnswer\fP)"
.br
.ti -1c
.RI "virtual void \fBsetInput\fP (const QVariant &\fBinput\fP)"
.br
.ti -1c
.RI "void \fBsetOutput\fP (const QString &\fBoutput\fP)"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.ti -1c
.RI "bool \fBvisibility\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "QMap< int, QVariant > \fBm_choices\fP"
.br
.RI "\fIm_choices \fP"
.ti -1c
.RI "bool \fBm_choicesDisplayed\fP"
.br
.RI "\fIm_choicesDisplayed \fP"
.ti -1c
.RI "QString \fBm_condition\fP"
.br
.RI "\fIm_condition \fP"
.ti -1c
.RI "QString \fBm_field\fP"
.br
.RI "\fIm_field \fP"
.ti -1c
.RI "QString \fBm_table\fP"
.br
.RI "\fIm_table \fP"
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 10 du fichier SH_DatabaseContentQuestionState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_DatabaseContentQuestionState::SH_DatabaseContentQuestionState (QStringquestion, QStringname, QStringdatabaseTable, QStringtableField, QStringdatabaseCondition = \fC''\fP, \fBQState\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 10 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références SH_SqlDataModel::datas(), SH_SqlDataModel::fetch(), m_choices, m_condition, m_field, et m_table\&.
.PP
.nf
10                                                                                                                                                                                      :
11     SH_QuestionState(question, name, parent), m_table(databaseTable), m_condition(databaseCondition), m_field(tableField)
12 {
13     qDebug() << "multiple choice list with datas from " << databaseTable << "!";
14     SH_SqlDataModel *sqlDatas = new SH_SqlDataModel();
15     QStringList fields;
16     fields << "ID" << m_field;
17     sqlDatas->fetch(m_table, m_condition, "", fields);
18     QVariantMap results = sqlDatas->datas();
19     QVariantList idValues = results\&.values("ID");
20     QVariantList fieldsValues = results\&.values(m_field);
21     for(int i = 0; i < idValues\&.length(); i++) {
22         qDebug() << "new choice " << idValues\&.at(i)\&.toString() <<  ": " << fieldsValues\&.at(i)\&.toString();
23         m_choices\&.insert(idValues\&.at(i)\&.toInt(), fieldsValues\&.at(i));
24     }
25 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void SH_QuestionState::answerInvalid ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
answerInvalid 
.PP
Référencé par SH_QuestionState::checkValidity(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "void SH_QuestionState::answerValid ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
answerValid 
.PP
Référencé par SH_QuestionState::checkValidity(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_QuestionState::checkValidity ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 20 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::answerInvalid(), SH_QuestionState::answerValid(), SH_QuestionState::givenAnswer(), SH_GenericState::goNext(), SH_QuestionState::isAnswerValid(), et SH_InOutState::setInput()\&.
.PP
Référencé par SH_QuestionState::setGivenAnswer()\&.
.PP
.nf
21 {
22     bool ok = this->isAnswerValid(this->givenAnswer());
23     if(ok) {
24         qDebug() << this->givenAnswer() << " answer valid !";
25         qDebug() << this->givenAnswer();
26         SH_InOutState::setInput(this->givenAnswer());
27         emit answerValid();
28         emit goNext();
29     } else {
30         qDebug() << this->givenAnswer() << " answer invalid :-(";
31         qDebug() << this->givenAnswer();
32         emit answerInvalid();
33     }
34     return ok;
35 }
.fi
.SS "SH_DatabaseContentQuestionState::choiceList ()"

.PP
\fBRenvoie:\fP
.RS 4
QMap<int, QVariant> 
.RE
.PP

.PP
Définition à la ligne 67 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références m_choices, et m_choicesDisplayed\&.
.PP
.nf
67                                                                 {
68     if(m_choicesDisplayed) {
69         return m_choices;
70     }
71     return QMap<int,QVariant>();
72 }
.fi
.SS "SH_InOutState::display (boolcanDisplay)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIcanDisplay\fP 
.RE
.PP

.PP
Définition à la ligne 101 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_display, SH_InOutState::m_isVisible, SH_InOutState::m_output, et SH_InOutState::sendOutput()\&.
.PP
Référencé par SH_InOutStateMachine::addIOState(), et SH_StatementState::onEntry()\&.
.PP
.nf
102 {
103     if(isRunning()) {
104         m_display=canDisplay;
105         if(m_display && !m_output\&.isEmpty() && m_isVisible) {
106             qDebug() << "resalut !" << QVariant(m_output);
107             emit sendOutput(QVariant(m_output));
108         }
109     }
110 }
.fi
.SS "SH_DatabaseContentQuestionState::displayChoiceList ()\fC [signal]\fP"

.PP
Référencé par setOutput()\&.
.SS "SH_QuestionState::givenAnswer () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 55 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::m_givenAnswer\&.
.PP
Référencé par SH_QuestionState::checkValidity(), rawInput(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
56 {
57     return this->m_givenAnswer;
58 }
.fi
.SS "SH_GenericState::goNext ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), SH_AdaptDatabaseState::insertUpdate(), SH_StatementState::onEntry(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_GenericState::SH_GenericState(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_InOutState::input () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 20 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_input\&.
.PP
Référencé par SH_InOutState::rawInput(), SH_DateQuestionState::rawInput(), et SH_InOutState::setInput()\&.
.PP
.nf
21 {
22     return m_input;
23 }
.fi
.SS "SH_DatabaseContentQuestionState::isAnswerValid (const QVariant &givenAnswer)\fC [virtual]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIgivenAnswer\fP 
.RE
.PP

.PP
Implémente \fBSH_QuestionState\fP\&.
.PP
Définition à la ligne 33 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références m_choices\&.
.PP
.nf
34 {
35     qDebug() << m_choices\&.values();
36     return m_choices\&.isEmpty() || m_choices\&.values()\&.contains(givenAnswer);
37 }
.fi
.SS "SH_GenericState::isRunning ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 92 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_GenericState::m_isRunning\&.
.PP
Référencé par SH_InOutStateMachine::addChildrenReplaceTransition(), SH_InOutState::display(), SH_GenericState::emitGoNext(), SH_InOutState::setInput(), SH_InOutState::setOutput(), et SH_InOutState::setVisibility()\&.
.PP
.nf
93 {
94     return m_isRunning;
95 }
.fi
.SS "SH_GenericState::next ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_GenericState::emitGoNext()\&.
.SS "SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 71 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_GenericState::m_isRunning, et SH_NamedObject::name()\&.
.PP
Référencé par SH_StatementState::onEntry()\&.
.PP
.nf
72 {
73     Q_UNUSED(event);
74     m_isRunning = true;
75     this->blockSignals(!m_isRunning);
76     qDebug() << "Machine: " << machine()->objectName() << " entered " << name();
77 }
.fi
.SS "SH_InOutState::onExit (QEvent *event)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 118 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_input, SH_InOutState::m_isVisible, SH_GenericState::onExit(), et SH_InOutState::resendInput()\&.
.PP
.nf
119 {
120     if(m_isVisible) {
121         emit resendInput(m_input);
122     }
123     SH_GenericState::onExit(event);
124 }
.fi
.SS "SH_InOutState::output () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 58 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_output\&.
.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutState::setOutput(), et SH_StatementState::SH_StatementState()\&.
.PP
.nf
59 {
60     return m_output;
61 }
.fi
.SS "SH_DatabaseContentQuestionState::rawInput () const\fC [virtual]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_InOutState\fP\&.
.PP
Définition à la ligne 57 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références SH_QuestionState::givenAnswer(), et m_choices\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
58 {
59     return m_choices\&.key(this->givenAnswer());
60 }
.fi
.SS "SH_InOutState::resendInput (QVariantinput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutState::onExit(), et SH_InOutState::setInput()\&.
.SS "SH_InOutState::sendOutput (QVariantoutput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutState::display(), et SH_InOutState::setOutput()\&.
.SS "SH_QuestionState::setGivenAnswer (const QVariant &givenAnswer)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIgivenAnswer\fP 
.RE
.PP

.PP
Définition à la ligne 66 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::checkValidity(), et SH_QuestionState::m_givenAnswer\&.
.PP
Référencé par SH_QuestionState::setInput()\&.
.PP
.nf
67 {
68     this->m_givenAnswer = givenAsnwer;
69     this->checkValidity();
70 }
.fi
.SS "SH_QuestionState::setInput (const QVariant &input)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_InOutState\fP\&.
.PP
Définition à la ligne 43 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::setGivenAnswer()\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
44 {
45     qDebug() << "new answer " << input\&.toString();
46     this->setGivenAnswer(input);
47 }
.fi
.SS "SH_DatabaseContentQuestionState::setOutput (const QString &output)\fC [virtual]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_InOutState\fP\&.
.PP
Définition à la ligne 43 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références displayChoiceList(), m_choices, m_choicesDisplayed, et SH_InOutState::setOutput()\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
44 {
45     SH_QuestionState::setOutput(output);
46     if(m_choices\&.size() < 8) {
47         m_choicesDisplayed = true;
48         emit displayChoiceList();
49     }
50 }
.fi
.SS "SH_InOutState::setVisibility (boolisVisible)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIisVisible\fP 
.RE
.PP

.PP
Définition à la ligne 85 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), et SH_InOutState::m_isVisible\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
86 {
87     if(isRunning()) {
88         m_isVisible = isVisible;
89     }
90 }
.fi
.SS "SH_GenericState::toString ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 22 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_GenericStateMachine::toString(), et SH_NamedObject::toString()\&.
.PP
Référencé par SH_GenericStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addIOState(), SH_DateQuestionState::rawInput(), et SH_GenericStateMachine::toString()\&.
.PP
.nf
23 {
24     QStateMachine* machine = this->machine();
25     SH_InOutStateMachine* mach = qobject_cast<SH_InOutStateMachine *>(machine);
26     if(mach) {
27         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
28     } else {
29         return SH_NamedObject::toString();
30     }
31 }
.fi
.SS "SH_InOutState::visibility ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 97 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_isVisible\&.
.PP
Référencé par SH_InOutStateMachine::addIOState()\&.
.PP
.nf
97                                {
98     return m_isVisible;
99 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "QMap<int, QVariant> SH_DatabaseContentQuestionState::m_choices\fC [private]\fP"

.PP
m_choices 
.PP
Définition à la ligne 80 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par choiceList(), isAnswerValid(), rawInput(), setOutput(), et SH_DatabaseContentQuestionState()\&.
.SS "bool SH_DatabaseContentQuestionState::m_choicesDisplayed\fC [private]\fP"

.PP
m_choicesDisplayed 
.PP
Définition à la ligne 84 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par choiceList(), et setOutput()\&.
.SS "QString SH_DatabaseContentQuestionState::m_condition\fC [private]\fP"

.PP
m_condition 
.PP
Définition à la ligne 72 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par SH_DatabaseContentQuestionState()\&.
.SS "QString SH_DatabaseContentQuestionState::m_field\fC [private]\fP"

.PP
m_field 
.PP
Définition à la ligne 76 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par SH_DatabaseContentQuestionState()\&.
.SS "QString SH_DatabaseContentQuestionState::m_table\fC [private]\fP"

.PP
m_table 
.PP
Définition à la ligne 68 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par SH_DatabaseContentQuestionState()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
