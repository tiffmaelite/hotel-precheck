.TH "SimpleHotel::SH_AdaptDatabaseState" 3 "Lundi Juin 24 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SimpleHotel::SH_AdaptDatabaseState \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_AdaptDatabaseState\&.h>\fP
.PP
Est dérivée de \fBSimpleHotel::SH_GenericState\fP\&.
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_AdaptDatabaseState\fP (QString \fBname\fP, \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "QVariant \fBinsertUpdate\fP (QString table, QVariantMap content)"
.br
.RI "\fIEnregistre dans la base de données les valeurs données\&. \fP"
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 13 du fichier SH_AdaptDatabaseState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SimpleHotel::SH_AdaptDatabaseState::SH_AdaptDatabaseState (QStringname, \fBQState\fP *parent = \fC0\fP)"
Construit une instance de la classe \fBSH_AdaptDatabaseState\fP 
.PP
Définition à la ligne 11 du fichier SH_AdaptDatabaseState\&.cpp\&.
.PP
.nf
11                                                                          :
12     SH_GenericState(name, parent)
13 {
14 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "SimpleHotel::SH_GenericState::goNext ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SimpleHotel::SH_QuestionState::checkValidity(), SimpleHotel::SH_ConfirmationState::confirmInput(), insertUpdate(), SimpleHotel::SH_StatementState::onEntry(), SimpleHotel::SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SimpleHotel::SH_GenericState::SH_GenericState(), et SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SimpleHotel::SH_AdaptDatabaseState::insertUpdate (QStringtable, QVariantMapcontent)"

.PP
Enregistre dans la base de données les valeurs données\&. Enregistre dans la base de données les valeurs données, sous forme d'une insertion ou d'une mise à jour, selon le besoin
.PP
\fBParamètres:\fP
.RS 4
\fItable\fP Le nom de la table à modifier 
.br
\fIcontent\fP Le contenu à enregistrer, sous la forme d'une \fIQVariantMap\fP associant les champs de la table aux valeurs à insérer/modifier 
.RE
.PP
\fBRenvoie:\fP
.RS 4
bool Retourne \fItrue\fP si l'enregistrement a réussi, \fIfalse\fP sinon 
.RE
.PP

.PP
Définition à la ligne 20 du fichier SH_AdaptDatabaseState\&.cpp\&.
.PP
Références SimpleHotel::SH_DatabaseManager::execInsertReturningQuery(), SimpleHotel::SH_DatabaseManager::getInstance(), et SimpleHotel::SH_GenericState::goNext()\&.
.PP
Référencé par SimpleHotel::SH_LoopingInOutStateMachine::addChildrenNextTransition(), SimpleHotel::SH_InOutStateMachine::addChildrenNextTransition(), et SimpleHotel::SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
21 {
22     QVariant id = SH_DatabaseManager::getInstance()->execInsertReturningQuery(table, content, "id");
23     if(id\&.isValid()) {
24         emit goNext();
25     }
26     return id;
27 }
.fi
.SS "SimpleHotel::SH_GenericState::isRunning ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 95 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_GenericState::m_isRunning\&.
.PP
Référencé par SimpleHotel::SH_InOutStateMachine::addChildrenReplaceTransition(), SimpleHotel::SH_InOutState::display(), SimpleHotel::SH_GenericState::emitGoNext(), SimpleHotel::SH_InOutState::setInput(), SimpleHotel::SH_InOutState::setOutput(), et SimpleHotel::SH_InOutState::setVisibility()\&.
.PP
.nf
96 {
97     return m_isRunning;
98 }
.fi
.SS "SimpleHotel::SH_GenericState::next ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SimpleHotel::SH_GenericState::emitGoNext()\&.
.SS "SimpleHotel::SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 71 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_MessageManager::infoMessage(), SimpleHotel::SH_GenericState::m_isRunning, SimpleHotel::SH_NamedObject::name(), et SimpleHotel::SH_GenericState::onTransitionTriggered()\&.
.PP
Référencé par SimpleHotel::SH_StatementState::onEntry()\&.
.PP
.nf
72 {
73     Q_UNUSED(event);
74     foreach (QAbstractTransition* tr, transitions()) {
75         connect(tr, SIGNAL(triggered()), this, SLOT(onTransitionTriggered()));
76     }
77     m_isRunning = true;
78     this->blockSignals(!m_isRunning);
79     SH_MessageManager::infoMessage(QString("Machine: %1, entered state %2")\&.arg(machine()->objectName())\&.arg(name()));
80 }
.fi
.SS "SimpleHotel::SH_GenericState::onExit (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 87 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_MessageManager::infoMessage(), SimpleHotel::SH_GenericState::m_isRunning, et SimpleHotel::SH_NamedObject::name()\&.
.PP
Référencé par SimpleHotel::SH_InOutState::onExit()\&.
.PP
.nf
88 {
89     Q_UNUSED(event);
90     m_isRunning = false;
91     this->blockSignals(!m_isRunning);
92     SH_MessageManager::infoMessage(QString("Machine: %1, exited state %2")\&.arg(machine()->objectName())\&.arg(name()));
93 }
.fi
.SS "SimpleHotel::SH_GenericState::toString ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSimpleHotel::SH_NamedObject\fP\&.
.PP
Définition à la ligne 27 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_GenericStateMachine::toString(), et SimpleHotel::SH_NamedObject::toString()\&.
.PP
Référencé par SimpleHotel::SH_QuestionState::checkValidity(), SimpleHotel::SH_DateQuestionState::rawInput(), et SimpleHotel::SH_GenericStateMachine::toString()\&.
.PP
.nf
28 {
29     QStateMachine* machine = this->machine();
30     SH_InOutStateMachine* mach = qobject_cast<SH_InOutStateMachine *>(machine);
31     if(mach) {
32         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
33     } else {
34         return SH_NamedObject::toString();
35     }
36 }
.fi


.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
