.TH "SH_DateQuestionState" 3 "Mardi Juillet 2 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_DateQuestionState \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_DateQuestionState\&.h>\fP
.PP
Est dérivée de \fBSH_QuestionState\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "virtual void \fBsetOutput\fP (const QString &\fBoutput\fP)"
.br
.ti -1c
.RI "virtual void \fBsetVisibility\fP (bool isVisible)"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBanswerInvalid\fP ()"
.br
.RI "\fIanswerInvalid \fP"
.ti -1c
.RI "void \fBanswerValid\fP ()"
.br
.RI "\fIanswerValid \fP"
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.ti -1c
.RI "void \fBresendInput\fP (QVariant \fBinput\fP)"
.br
.ti -1c
.RI "void \fBsendOutput\fP (QVariant \fBoutput\fP)"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_DateQuestionState\fP (QString question, QString \fBname\fP, bool past=true, bool future=false, \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "bool \fBcheckValidity\fP ()"
.br
.ti -1c
.RI "void \fBdisplay\fP (bool canDisplay)"
.br
.ti -1c
.RI "void \fBemitResendInput\fP ()"
.br
.ti -1c
.RI "void \fBemitSendOutput\fP ()"
.br
.ti -1c
.RI "virtual QVariant \fBgivenAnswer\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBinput\fP () const "
.br
.ti -1c
.RI "virtual bool \fBisAnswerValid\fP (const QVariant &\fBgivenAnswer\fP)"
.br
.ti -1c
.RI "bool \fBisFuture\fP () const "
.br
.ti -1c
.RI "bool \fBisPast\fP () const "
.br
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "virtual QString \fBoutput\fP () const "
.br
.ti -1c
.RI "QVariant \fBrawInput\fP () const "
.br
.ti -1c
.RI "void \fBsetFuture\fP (bool value)"
.br
.ti -1c
.RI "virtual void \fBsetGivenAnswer\fP (const QVariant &\fBgivenAnswer\fP)"
.br
.ti -1c
.RI "virtual void \fBsetInput\fP (const QVariant &\fBinput\fP)"
.br
.ti -1c
.RI "void \fBsetMaximumDate\fP (QDate before)"
.br
.ti -1c
.RI "void \fBsetMinimumDate\fP (QDate after)"
.br
.ti -1c
.RI "void \fBsetPast\fP (bool value)"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.ti -1c
.RI "bool \fBvisibility\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "QDate \fBm_maximum\fP"
.br
.ti -1c
.RI "QDate \fBm_minimum\fP"
.br
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 10 du fichier SH_DateQuestionState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_DateQuestionState::SH_DateQuestionState (QStringquestion, QStringname, boolpast = \fCtrue\fP, boolfuture = \fCfalse\fP, \fBQState\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 10 du fichier SH_DateQuestionState\&.cpp\&.
.PP
Références setFuture(), et setPast()\&.
.PP
.nf
10                                                                                                                  :
11     SH_QuestionState(question+" (au format jj-mm-aaaa)", name, parent), m_maximum(QDate()), m_minimum(QDate())
12 {
13     setPast(past);
14     setFuture(future);
15 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void SH_QuestionState::answerInvalid ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
answerInvalid 
.PP
Référencé par SH_QuestionState::checkValidity(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "void SH_QuestionState::answerValid ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
answerValid 
.PP
Référencé par SH_QuestionState::checkValidity(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_QuestionState::checkValidity ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 17 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::answerInvalid(), SH_QuestionState::answerValid(), SH_QuestionState::givenAnswer(), SH_GenericState::goNext(), SH_MessageManager::infoMessage(), SH_QuestionState::isAnswerValid(), SH_GenericState::isRunning(), SH_InOutState::output(), SH_InOutState::setInput(), et SH_GenericState::toString()\&.
.PP
Référencé par SH_QuestionState::setGivenAnswer()\&.
.PP
.nf
18 {
19     bool ok = false;
20     if(isRunning()) {
21         ok = this->isAnswerValid(this->givenAnswer());
22         if(ok) {
23             SH_MessageManager::infoMessage(QString("%1 is a VALID answer for question '%2'!")\&.arg(this->givenAnswer()\&.toString())\&.arg(this->output()));
24             SH_InOutState::setInput(this->givenAnswer());
25             emit answerValid();
26             emit goNext();
27         } else {
28             SH_MessageManager::infoMessage(QString("%1 is an INvalid :-( answer for question '%2'")\&.arg(this->givenAnswer()\&.toString())\&.arg(this->output()));
29             emit answerInvalid();
30         }
31     }
32     return ok;
33 }
.fi
.SS "SH_InOutState::display (boolcanDisplay)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIcanDisplay\fP 
.RE
.PP

.PP
Définition à la ligne 80 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::emitSendOutput(), et SH_InOutState::m_display\&.
.PP
.nf
81 {
82         m_display=canDisplay;
83         emitSendOutput();
84 }
.fi
.SS "void SH_InOutState::emitResendInput ()\fC [inherited]\fP"

.PP
Définition à la ligne 92 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_input, SH_InOutState::m_isVisible, et SH_InOutState::resendInput()\&.
.PP
Référencé par SH_InOutState::setInput(), et SH_InOutState::SH_InOutState()\&.
.PP
.nf
92                                     {
93     if(isRunning() && m_isVisible) {
94         emit resendInput(m_input);
95     }
96 }
.fi
.SS "void SH_InOutState::emitSendOutput ()\fC [inherited]\fP"

.PP
Définition à la ligne 86 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_display, SH_InOutState::m_isVisible, SH_InOutState::m_output, et SH_InOutState::sendOutput()\&.
.PP
Référencé par SH_InOutState::display(), SH_InOutState::setOutput(), et SH_InOutState::SH_InOutState()\&.
.PP
.nf
86                                    {
87     if(isRunning() && m_display && !m_output\&.isEmpty() && m_isVisible) {
88         emit sendOutput(QVariant(m_output));
89     }
90 }
.fi
.SS "SH_QuestionState::givenAnswer () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 48 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::m_givenAnswer\&.
.PP
Référencé par SH_QuestionState::checkValidity(), SH_DatabaseContentQuestionState::rawInput(), SH_QuestionState::setGivenAnswer(), SH_QuestionState::setInput(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
49 {
50     return this->m_givenAnswer;
51 }
.fi
.SS "SH_GenericState::goNext ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), SH_AdaptDatabaseState::insertUpdate(), SH_StatementState::onEntry(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_GenericState::SH_GenericState(), SH_InOutState::SH_InOutState(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_InOutState::input () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 19 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_input\&.
.PP
Référencé par SH_InOutState::rawInput(), rawInput(), et SH_InOutState::setInput()\&.
.PP
.nf
20 {
21     return m_input;
22 }
.fi
.SS "SH_DateQuestionState::isAnswerValid (const QVariant &givenAnswer)\fC [virtual]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIgivenAnswer\fP 
.RE
.PP

.PP
Implémente \fBSH_QuestionState\fP\&.
.PP
Définition à la ligne 31 du fichier SH_DateQuestionState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), m_maximum, et m_minimum\&.
.PP
.nf
32 {
33     QDate answer = QDate::fromString(givenAnswer\&.toString(),QString("dd-MM-yyyy")); //FIXME ajouter autres formats
34     if(answer\&.isValid()) {
35         SH_MessageManager::debugMessage("date conforme");
36         if(m_maximum\&.isValid()) {
37             SH_MessageManager::debugMessage(QString("date max (%1) valide")\&.arg(m_maximum\&.toString()));
38             if(answer <= m_maximum) {
39                 SH_MessageManager::debugMessage(QString("%1 avant date max")\&.arg(answer\&.toString()));
40             }
41         }
42         if(m_minimum\&.isValid()) {
43             SH_MessageManager::debugMessage(QString("date min (%1) valide")\&.arg(m_minimum\&.toString()));
44             if(answer >= m_maximum) {
45                 SH_MessageManager::debugMessage(QString("%1 avant après min")\&.arg(answer\&.toString()));
46             }
47         }
48     }
49     return (
50                 (answer\&.isValid())
51                 && ((m_maximum\&.isValid() && answer <= m_maximum)||(m_minimum\&.isValid() && answer >= m_minimum))
52                 );
53 }
.fi
.SS "bool SH_DateQuestionState::isFuture () const"

.PP
Définition à la ligne 78 du fichier SH_DateQuestionState\&.cpp\&.
.PP
Références m_minimum\&.
.PP
.nf
79 {
80     return (m_minimum\&.isValid() && m_minimum <= QDate::currentDate());
81 }
.fi
.SS "bool SH_DateQuestionState::isPast () const"

.PP
Définition à la ligne 58 du fichier SH_DateQuestionState\&.cpp\&.
.PP
Références m_maximum\&.
.PP
.nf
59 {
60     return (m_maximum\&.isValid() && m_maximum >= QDate::currentDate());
61 }
.fi
.SS "SH_GenericState::isRunning ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 81 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_GenericState::m_isRunning\&.
.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), SH_GenericState::emitGoNext(), SH_InOutState::emitResendInput(), SH_InOutState::emitSendOutput(), SH_InOutState::setInput(), SH_InOutState::setOutput(), et SH_InOutState::setVisibility()\&.
.PP
.nf
82 {
83     return m_isRunning;
84 }
.fi
.SS "SH_GenericState::next ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_GenericState::emitGoNext()\&.
.SS "SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 60 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), SH_GenericState::m_isRunning, SH_NamedObject::name(), et SH_GenericState::onTransitionTriggered()\&.
.PP
Référencé par SH_StatementState::onEntry()\&.
.PP
.nf
61 {
62     Q_UNUSED(event);
63     foreach (QAbstractTransition* tr, transitions()) {
64         connect(tr, SIGNAL(triggered()), this, SLOT(onTransitionTriggered()));
65     }
66     m_isRunning = true;
67     this->blockSignals(!m_isRunning);
68     SH_MessageManager::debugMessage(QString("Machine: %1, entered state %2")\&.arg(machine()->objectName())\&.arg(name()));
69 }
.fi
.SS "SH_GenericState::onExit (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 74 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), SH_GenericState::m_isRunning, et SH_NamedObject::name()\&.
.PP
.nf
75 {
76     Q_UNUSED(event);
77     m_isRunning = false;
78     this->blockSignals(!m_isRunning);
79     SH_MessageManager::debugMessage(QString("Machine: %1, exited state %2")\&.arg(machine()->objectName())\&.arg(name()));
80 }
.fi
.SS "SH_InOutState::output () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 47 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_output\&.
.PP
Référencé par SH_QuestionState::checkValidity(), et SH_InOutState::setOutput()\&.
.PP
.nf
48 {
49     return m_output;
50 }
.fi
.SS "SH_DateQuestionState::rawInput () const\fC [virtual]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_InOutState\fP\&.
.PP
Définition à la ligne 98 du fichier SH_DateQuestionState\&.cpp\&.
.PP
Références SH_InOutState::input(), et SH_GenericState::toString()\&.
.PP
.nf
99 {
100     return QVariant(input()\&.toDate()\&.toString());
101     /*TODO set format*/
102 }
.fi
.SS "SH_InOutState::resendInput (QVariantinput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), et SH_InOutState::emitResendInput()\&.
.SS "SH_InOutState::sendOutput (QVariantoutput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), et SH_InOutState::emitSendOutput()\&.
.SS "SH_DateQuestionState::setFuture (boolvalue)"

.PP
\fBParamètres:\fP
.RS 4
\fIvalue\fP 
.RE
.PP

.PP
Définition à la ligne 86 du fichier SH_DateQuestionState\&.cpp\&.
.PP
Références setMinimumDate()\&.
.PP
Référencé par SH_DateQuestionState()\&.
.PP
.nf
87 {
88     if(value) {
89         setMinimumDate(QDate::currentDate());
90     } else{
91         setMinimumDate(QDate());
92     }
93 }
.fi
.SS "SH_QuestionState::setGivenAnswer (const QVariant &givenAnswer)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIgivenAnswer\fP 
.RE
.PP

.PP
Définition à la ligne 56 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::checkValidity(), SH_QuestionState::givenAnswer(), et SH_QuestionState::m_givenAnswer\&.
.PP
Référencé par SH_QuestionState::setInput()\&.
.PP
.nf
57 {
58     if(givenAnswer != this->givenAnswer()) {
59         this->m_givenAnswer = givenAnswer;
60         this->checkValidity();
61     }
62 }
.fi
.SS "SH_QuestionState::setInput (const QVariant &input)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_InOutState\fP\&.
.PP
Définition à la ligne 38 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SH_QuestionState::givenAnswer(), et SH_QuestionState::setGivenAnswer()\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
39 {
40     if(input != this->givenAnswer()) {
41         this->setGivenAnswer(input);
42     }
43 }
.fi
.SS "void SH_DateQuestionState::setMaximumDate (QDatebefore)"

.PP
Définition à la ligne 22 du fichier SH_DateQuestionState\&.cpp\&.
.PP
Références m_maximum\&.
.PP
Référencé par setPast()\&.
.PP
.nf
23 {
24     m_maximum = before;
25 }
.fi
.SS "void SH_DateQuestionState::setMinimumDate (QDateafter)"

.PP
Définition à la ligne 17 du fichier SH_DateQuestionState\&.cpp\&.
.PP
Références m_minimum\&.
.PP
Référencé par setFuture(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
18 {
19     m_minimum = after;
20 }
.fi
.SS "SH_InOutState::setOutput (const QString &output)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Réimplémentée dans \fBSH_DatabaseContentQuestionState\fP\&.
.PP
Définition à la ligne 55 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::emitSendOutput(), SH_GenericState::isRunning(), SH_InOutState::m_output, et SH_InOutState::output()\&.
.PP
Référencé par SH_DatabaseContentQuestionState::setOutput(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
56 {
57     if(isRunning() && output != this->output()) {
58         m_output = output;
59         emitSendOutput();
60     }
61 }
.fi
.SS "SH_DateQuestionState::setPast (boolvalue)"

.PP
\fBParamètres:\fP
.RS 4
\fIvalue\fP 
.RE
.PP

.PP
Définition à la ligne 66 du fichier SH_DateQuestionState\&.cpp\&.
.PP
Références setMaximumDate()\&.
.PP
Référencé par SH_DateQuestionState()\&.
.PP
.nf
67 {
68     if(value) {
69         setMaximumDate(QDate::currentDate());
70     } else{
71         setMaximumDate(QDate());
72     }
73 }
.fi
.SS "SH_InOutState::setVisibility (boolisVisible)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIisVisible\fP 
.RE
.PP

.PP
Définition à la ligne 66 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_GenericState::isRunning(), SH_InOutState::m_isVisible, et SH_InOutState::visibility()\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
67 {
68     if(isRunning() && isVisible!=this->visibility()) {
69         m_isVisible = isVisible;
70     }
71 }
.fi
.SS "SH_GenericState::toString ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 23 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_NamedObject::toString(), et SH_GenericState::toString()\&.
.PP
Référencé par SH_QuestionState::checkValidity(), rawInput(), SH_GenericStateMachine::toString(), et SH_GenericState::toString()\&.
.PP
.nf
24 {
25     QStateMachine* machine = this->machine();
26     SH_GenericState* mach = qobject_cast<SH_GenericState *>(machine);
27     if(mach) {
28         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
29     } else {
30         return SH_NamedObject::toString();
31     }
32 }
.fi
.SS "SH_InOutState::visibility ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 76 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_isVisible\&.
.PP
Référencé par SH_InOutState::setVisibility()\&.
.PP
.nf
76                                {
77     return m_isVisible;
78 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "QDate SH_DateQuestionState::m_maximum\fC [private]\fP"

.PP
Définition à la ligne 68 du fichier SH_DateQuestionState\&.h\&.
.PP
Référencé par isAnswerValid(), isPast(), et setMaximumDate()\&.
.SS "QDate SH_DateQuestionState::m_minimum\fC [private]\fP"

.PP
Définition à la ligne 69 du fichier SH_DateQuestionState\&.h\&.
.PP
Référencé par isAnswerValid(), isFuture(), et setMinimumDate()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
