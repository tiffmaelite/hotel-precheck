.TH "SimpleHotel::SH_DatabaseContentQuestionState" 3 "Lundi Juin 24 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SimpleHotel::SH_DatabaseContentQuestionState \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_DatabaseContentQuestionState\&.h>\fP
.PP
Est dérivée de \fBSimpleHotel::SH_QuestionState\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "virtual void \fBsetVisibility\fP (bool isVisible)"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBanswerInvalid\fP ()"
.br
.RI "\fIanswerInvalid \fP"
.ti -1c
.RI "void \fBanswerValid\fP ()"
.br
.RI "\fIanswerValid \fP"
.ti -1c
.RI "void \fBdisplayChoiceList\fP ()"
.br
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.ti -1c
.RI "void \fBresendInput\fP (QVariant \fBinput\fP)"
.br
.ti -1c
.RI "void \fBsendOutput\fP (QVariant \fBoutput\fP)"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_DatabaseContentQuestionState\fP (QString question, QString \fBname\fP, QString databaseTable, QString tableField, QString databaseCondition='', \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "bool \fBcheckValidity\fP ()"
.br
.ti -1c
.RI "QMap< int, QVariant > \fBchoiceList\fP ()"
.br
.ti -1c
.RI "void \fBdisplay\fP (bool canDisplay)"
.br
.ti -1c
.RI "virtual QVariant \fBgivenAnswer\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBinput\fP () const "
.br
.ti -1c
.RI "virtual bool \fBisAnswerValid\fP (const QVariant &\fBgivenAnswer\fP)"
.br
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.ti -1c
.RI "virtual QString \fBoutput\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBrawInput\fP () const "
.br
.ti -1c
.RI "virtual void \fBsetGivenAnswer\fP (const QVariant &\fBgivenAnswer\fP)"
.br
.ti -1c
.RI "virtual void \fBsetInput\fP (const QVariant &\fBinput\fP)"
.br
.ti -1c
.RI "void \fBsetOutput\fP (const QString &\fBoutput\fP)"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.ti -1c
.RI "bool \fBvisibility\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "QMap< int, QVariant > \fBm_choices\fP"
.br
.RI "\fIm_choices \fP"
.ti -1c
.RI "bool \fBm_choicesDisplayed\fP"
.br
.RI "\fIm_choicesDisplayed \fP"
.ti -1c
.RI "QString \fBm_condition\fP"
.br
.RI "\fIm_condition \fP"
.ti -1c
.RI "QString \fBm_field\fP"
.br
.RI "\fIm_field \fP"
.ti -1c
.RI "QString \fBm_table\fP"
.br
.RI "\fIm_table \fP"
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 12 du fichier SH_DatabaseContentQuestionState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SimpleHotel::SH_DatabaseContentQuestionState::SH_DatabaseContentQuestionState (QStringquestion, QStringname, QStringdatabaseTable, QStringtableField, QStringdatabaseCondition = \fC''\fP, \fBQState\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 13 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références SimpleHotel::SH_SqlDataModel::datas(), SimpleHotel::SH_MessageManager::debugMessage(), SimpleHotel::SH_SqlDataModel::fetch(), m_choices, m_condition, m_field, et m_table\&.
.PP
.nf
13                                                                                                                                                                                      :
14     SH_QuestionState(question, name, parent), m_table(databaseTable), m_condition(databaseCondition), m_field(tableField)
15 {
16     SH_MessageManager::debugMessage(QString("multiple choice list with datas from %1!")\&.arg(databaseTable));
17     SH_SqlDataModel *sqlDatas = new SH_SqlDataModel();
18     QStringList fields;
19     fields << "ID" << m_field;
20     sqlDatas->fetch(m_table, m_condition, "", fields);
21     QVariantMap results = sqlDatas->datas();
22     QVariantList idValues = results\&.values("ID");
23     QVariantList fieldsValues = results\&.values(m_field);
24     for(int i = 0; i < idValues\&.length(); i++) {
25          SH_MessageManager::debugMessage(QString("new choice %1: %2")\&.arg(idValues\&.at(i)\&.toString())\&.arg(fieldsValues\&.at(i)\&.toString()));
26         m_choices\&.insert(idValues\&.at(i)\&.toInt(), fieldsValues\&.at(i));
27     }
28 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void SimpleHotel::SH_QuestionState::answerInvalid ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
answerInvalid 
.PP
Référencé par SimpleHotel::SH_QuestionState::checkValidity(), SimpleHotel::SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "void SimpleHotel::SH_QuestionState::answerValid ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
answerValid 
.PP
Référencé par SimpleHotel::SH_QuestionState::checkValidity(), et SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SimpleHotel::SH_QuestionState::checkValidity ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 23 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SimpleHotel::SH_QuestionState::answerInvalid(), SimpleHotel::SH_QuestionState::answerValid(), SimpleHotel::SH_QuestionState::givenAnswer(), SimpleHotel::SH_GenericState::goNext(), SimpleHotel::SH_MessageManager::infoMessage(), SimpleHotel::SH_QuestionState::isAnswerValid(), SimpleHotel::SH_InOutState::setInput(), et SimpleHotel::SH_GenericState::toString()\&.
.PP
Référencé par SimpleHotel::SH_QuestionState::setGivenAnswer()\&.
.PP
.nf
24 {
25     bool ok = this->isAnswerValid(this->givenAnswer());
26     if(ok) {
27         SH_MessageManager::infoMessage(QString("%1 is a VALID answer!")\&.arg(this->givenAnswer()\&.toString()));
28         SH_InOutState::setInput(this->givenAnswer());
29         emit answerValid();
30         emit goNext();
31     } else {
32         SH_MessageManager::infoMessage(QString("%1 is an INvalid :-( answer")\&.arg(this->givenAnswer()\&.toString()));
33         emit answerInvalid();
34     }
35     return ok;
36 }
.fi
.SS "SimpleHotel::SH_DatabaseContentQuestionState::choiceList ()"

.PP
\fBRenvoie:\fP
.RS 4
QMap<int, QVariant> 
.RE
.PP

.PP
Définition à la ligne 69 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références m_choices, et m_choicesDisplayed\&.
.PP
.nf
69                                                                 {
70     if(m_choicesDisplayed) {
71         return m_choices;
72     }
73     return QMap<int,QVariant>();
74 }
.fi
.SS "SimpleHotel::SH_InOutState::display (boolcanDisplay)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIcanDisplay\fP 
.RE
.PP

.PP
Définition à la ligne 104 du fichier SH_IOState\&.cpp\&.
.PP
Références SimpleHotel::SH_GenericState::isRunning(), SimpleHotel::SH_InOutState::m_display, SimpleHotel::SH_InOutState::m_isVisible, SimpleHotel::SH_InOutState::m_output, et SimpleHotel::SH_InOutState::sendOutput()\&.
.PP
Référencé par SimpleHotel::SH_InOutStateMachine::addIOState(), et SimpleHotel::SH_StatementState::onEntry()\&.
.PP
.nf
105 {
106     if(isRunning()) {
107         m_display=canDisplay;
108         if(m_display && !m_output\&.isEmpty() && m_isVisible) {
109             emit sendOutput(QVariant(m_output));
110         }
111     }
112 }
.fi
.SS "SimpleHotel::SH_DatabaseContentQuestionState::displayChoiceList ()\fC [signal]\fP"

.PP
Référencé par setOutput()\&.
.SS "SimpleHotel::SH_QuestionState::givenAnswer () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 55 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SimpleHotel::SH_QuestionState::m_givenAnswer\&.
.PP
Référencé par SimpleHotel::SH_QuestionState::checkValidity(), rawInput(), et SimpleHotel::SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
56 {
57     return this->m_givenAnswer;
58 }
.fi
.SS "SimpleHotel::SH_GenericState::goNext ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SimpleHotel::SH_QuestionState::checkValidity(), SimpleHotel::SH_ConfirmationState::confirmInput(), SimpleHotel::SH_AdaptDatabaseState::insertUpdate(), SimpleHotel::SH_StatementState::onEntry(), SimpleHotel::SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SimpleHotel::SH_GenericState::SH_GenericState(), et SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SimpleHotel::SH_InOutState::input () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 23 du fichier SH_IOState\&.cpp\&.
.PP
Références SimpleHotel::SH_InOutState::m_input\&.
.PP
Référencé par SimpleHotel::SH_InOutState::rawInput(), SimpleHotel::SH_DateQuestionState::rawInput(), et SimpleHotel::SH_InOutState::setInput()\&.
.PP
.nf
24 {
25     return m_input;
26 }
.fi
.SS "SimpleHotel::SH_DatabaseContentQuestionState::isAnswerValid (const QVariant &givenAnswer)\fC [virtual]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIgivenAnswer\fP 
.RE
.PP

.PP
Implémente \fBSimpleHotel::SH_QuestionState\fP\&.
.PP
Définition à la ligne 36 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références m_choices\&.
.PP
.nf
37 {
38     return m_choices\&.isEmpty() || m_choices\&.values()\&.contains(givenAnswer);
39 }
.fi
.SS "SimpleHotel::SH_GenericState::isRunning ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 95 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_GenericState::m_isRunning\&.
.PP
Référencé par SimpleHotel::SH_InOutStateMachine::addChildrenReplaceTransition(), SimpleHotel::SH_InOutState::display(), SimpleHotel::SH_GenericState::emitGoNext(), SimpleHotel::SH_InOutState::setInput(), SimpleHotel::SH_InOutState::setOutput(), et SimpleHotel::SH_InOutState::setVisibility()\&.
.PP
.nf
96 {
97     return m_isRunning;
98 }
.fi
.SS "SimpleHotel::SH_GenericState::next ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SimpleHotel::SH_GenericState::emitGoNext()\&.
.SS "SimpleHotel::SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 71 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_MessageManager::infoMessage(), SimpleHotel::SH_GenericState::m_isRunning, SimpleHotel::SH_NamedObject::name(), et SimpleHotel::SH_GenericState::onTransitionTriggered()\&.
.PP
Référencé par SimpleHotel::SH_StatementState::onEntry()\&.
.PP
.nf
72 {
73     Q_UNUSED(event);
74     foreach (QAbstractTransition* tr, transitions()) {
75         connect(tr, SIGNAL(triggered()), this, SLOT(onTransitionTriggered()));
76     }
77     m_isRunning = true;
78     this->blockSignals(!m_isRunning);
79     SH_MessageManager::infoMessage(QString("Machine: %1, entered state %2")\&.arg(machine()->objectName())\&.arg(name()));
80 }
.fi
.SS "SimpleHotel::SH_InOutState::onExit (QEvent *event)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 120 du fichier SH_IOState\&.cpp\&.
.PP
Références SimpleHotel::SH_InOutState::m_input, SimpleHotel::SH_InOutState::m_isVisible, SimpleHotel::SH_GenericState::onExit(), et SimpleHotel::SH_InOutState::resendInput()\&.
.PP
.nf
121 {
122     if(m_isVisible) {
123         emit resendInput(m_input);
124     }
125     SH_GenericState::onExit(event);
126 }
.fi
.SS "SimpleHotel::SH_InOutState::output () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 61 du fichier SH_IOState\&.cpp\&.
.PP
Références SimpleHotel::SH_InOutState::m_output\&.
.PP
Référencé par SimpleHotel::SH_InOutStateMachine::addIOState(), et SimpleHotel::SH_InOutState::setOutput()\&.
.PP
.nf
62 {
63     return m_output;
64 }
.fi
.SS "SimpleHotel::SH_DatabaseContentQuestionState::rawInput () const\fC [virtual]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Réimplémentée à partir de \fBSimpleHotel::SH_InOutState\fP\&.
.PP
Définition à la ligne 59 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références SimpleHotel::SH_QuestionState::givenAnswer(), et m_choices\&.
.PP
Référencé par SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
60 {
61     return m_choices\&.key(this->givenAnswer());
62 }
.fi
.SS "SimpleHotel::SH_InOutState::resendInput (QVariantinput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Référencé par SimpleHotel::SH_InOutStateMachine::addIOState(), SimpleHotel::SH_InOutState::onExit(), et SimpleHotel::SH_InOutState::setInput()\&.
.SS "SimpleHotel::SH_InOutState::sendOutput (QVariantoutput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Référencé par SimpleHotel::SH_InOutStateMachine::addIOState(), SimpleHotel::SH_InOutState::display(), et SimpleHotel::SH_InOutState::setOutput()\&.
.SS "SimpleHotel::SH_QuestionState::setGivenAnswer (const QVariant &givenAnswer)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIgivenAnswer\fP 
.RE
.PP

.PP
Définition à la ligne 66 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SimpleHotel::SH_QuestionState::checkValidity(), et SimpleHotel::SH_QuestionState::m_givenAnswer\&.
.PP
Référencé par SimpleHotel::SH_QuestionState::setInput()\&.
.PP
.nf
67 {
68     this->m_givenAnswer = givenAsnwer;
69     this->checkValidity();
70 }
.fi
.SS "SimpleHotel::SH_QuestionState::setInput (const QVariant &input)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Réimplémentée à partir de \fBSimpleHotel::SH_InOutState\fP\&.
.PP
Définition à la ligne 44 du fichier SH_QuestionState\&.cpp\&.
.PP
Références SimpleHotel::SH_QuestionState::setGivenAnswer()\&.
.PP
Référencé par SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
45 {
46     this->setGivenAnswer(input);
47 }
.fi
.SS "SimpleHotel::SH_DatabaseContentQuestionState::setOutput (const QString &output)\fC [virtual]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIoutput\fP 
.RE
.PP

.PP
Réimplémentée à partir de \fBSimpleHotel::SH_InOutState\fP\&.
.PP
Définition à la ligne 45 du fichier SH_DatabaseContentQuestionState\&.cpp\&.
.PP
Références displayChoiceList(), m_choices, m_choicesDisplayed, et SimpleHotel::SH_InOutState::setOutput()\&.
.PP
Référencé par SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
46 {
47     SH_QuestionState::setOutput(output);
48     if(m_choices\&.size() < 8) {
49         m_choicesDisplayed = true;
50         emit displayChoiceList();
51     }
52 }
.fi
.SS "SimpleHotel::SH_InOutState::setVisibility (boolisVisible)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIisVisible\fP 
.RE
.PP

.PP
Définition à la ligne 88 du fichier SH_IOState\&.cpp\&.
.PP
Références SimpleHotel::SH_GenericState::isRunning(), et SimpleHotel::SH_InOutState::m_isVisible\&.
.PP
Référencé par SimpleHotel::SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
89 {
90     if(isRunning()) {
91         m_isVisible = isVisible;
92     }
93 }
.fi
.SS "SimpleHotel::SH_GenericState::toString ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSimpleHotel::SH_NamedObject\fP\&.
.PP
Définition à la ligne 27 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SimpleHotel::SH_GenericStateMachine::toString(), et SimpleHotel::SH_NamedObject::toString()\&.
.PP
Référencé par SimpleHotel::SH_QuestionState::checkValidity(), SimpleHotel::SH_DateQuestionState::rawInput(), et SimpleHotel::SH_GenericStateMachine::toString()\&.
.PP
.nf
28 {
29     QStateMachine* machine = this->machine();
30     SH_InOutStateMachine* mach = qobject_cast<SH_InOutStateMachine *>(machine);
31     if(mach) {
32         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
33     } else {
34         return SH_NamedObject::toString();
35     }
36 }
.fi
.SS "SimpleHotel::SH_InOutState::visibility ()\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 100 du fichier SH_IOState\&.cpp\&.
.PP
Références SimpleHotel::SH_InOutState::m_isVisible\&.
.PP
Référencé par SimpleHotel::SH_InOutStateMachine::addIOState()\&.
.PP
.nf
100                                {
101     return m_isVisible;
102 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "QMap<int, QVariant> SimpleHotel::SH_DatabaseContentQuestionState::m_choices\fC [private]\fP"

.PP
m_choices 
.PP
Définition à la ligne 82 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par choiceList(), isAnswerValid(), rawInput(), setOutput(), et SH_DatabaseContentQuestionState()\&.
.SS "bool SimpleHotel::SH_DatabaseContentQuestionState::m_choicesDisplayed\fC [private]\fP"

.PP
m_choicesDisplayed 
.PP
Définition à la ligne 86 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par choiceList(), et setOutput()\&.
.SS "QString SimpleHotel::SH_DatabaseContentQuestionState::m_condition\fC [private]\fP"

.PP
m_condition 
.PP
Définition à la ligne 74 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par SH_DatabaseContentQuestionState()\&.
.SS "QString SimpleHotel::SH_DatabaseContentQuestionState::m_field\fC [private]\fP"

.PP
m_field 
.PP
Définition à la ligne 78 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par SH_DatabaseContentQuestionState()\&.
.SS "QString SimpleHotel::SH_DatabaseContentQuestionState::m_table\fC [private]\fP"

.PP
m_table 
.PP
Définition à la ligne 70 du fichier SH_DatabaseContentQuestionState\&.h\&.
.PP
Référencé par SH_DatabaseContentQuestionState()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
