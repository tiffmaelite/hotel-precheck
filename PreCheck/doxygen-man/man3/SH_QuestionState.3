.TH "SH_QuestionState" 3 "Jeudi Juin 20 2013" "Version 0.3" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_QuestionState \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_QuestionState\&.h>\fP
.PP
Est dérivée de \fBSH_InOutState\fP\&.
.PP
Dérivée par \fBSH_DatabaseContentQuestionState\fP, \fBSH_DateQuestionState\fP, \fBSH_DecimalQuestionState\fP, \fBSH_NumericQuestionState\fP, et \fBSH_StringQuestionState\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "virtual void \fBsetOutput\fP (const QString &\fBoutput\fP)"
.br
.ti -1c
.RI "virtual void \fBsetVisibility\fP (bool isVisible)"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBanswerInvalid\fP ()"
.br
.RI "\fIanswerInvalid \fP"
.ti -1c
.RI "void \fBanswerValid\fP ()"
.br
.RI "\fIanswerValid \fP"
.ti -1c
.RI "void \fBnext\fP ()"
.br
.ti -1c
.RI "void \fBresendInput\fP (QVariant \fBinput\fP)"
.br
.ti -1c
.RI "void \fBsendOutput\fP (QVariant \fBoutput\fP)"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_QuestionState\fP (QString question, QString \fBname\fP, \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "bool \fBcheckValidity\fP ()"
.br
.ti -1c
.RI "void \fBdisplay\fP (bool canDisplay)"
.br
.ti -1c
.RI "virtual QVariant \fBgivenAnswer\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBinput\fP () const "
.br
.ti -1c
.RI "virtual bool \fBisAnswerValid\fP (const QVariant &\fBgivenAnswer\fP)=0"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.ti -1c
.RI "virtual QString \fBoutput\fP () const "
.br
.ti -1c
.RI "virtual QVariant \fBrawInput\fP () const "
.br
.ti -1c
.RI "virtual void \fBsetGivenAnswer\fP (const QVariant &\fBgivenAnswer\fP)"
.br
.ti -1c
.RI "virtual void \fBsetInput\fP (const QVariant &\fBinput\fP)"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.ti -1c
.RI "bool \fBvisibility\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "QVariant \fBm_givenAnswer\fP"
.br
.RI "\fIm_givenAnswer \fP"
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 11 du fichier SH_QuestionState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_QuestionState::SH_QuestionState (QStringquestion, QStringname, \fBQState\fP *parent = \fC0\fP)"

.PP
\fBParamètres:\fP
.RS 4
\fIquestion\fP 
.br
\fIname\fP 
.br
\fIparent\fP 
.RE
.PP

.PP
Définition à la ligne 9 du fichier SH_QuestionState\&.cpp\&.
.PP
.nf
9                                                                                  :
10     SH_InOutState(question, name, parent)
11 {
12 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void SH_QuestionState::answerInvalid ()\fC [signal]\fP"

.PP
answerInvalid 
.PP
Référencé par checkValidity(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "void SH_QuestionState::answerValid ()\fC [signal]\fP"

.PP
answerValid 
.PP
Référencé par checkValidity(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "bool SH_QuestionState::checkValidity ()"

.PP
Définition à la ligne 20 du fichier SH_QuestionState\&.cpp\&.
.PP
Références answerInvalid(), answerValid(), givenAnswer(), isAnswerValid(), SH_GenericState::next(), et SH_InOutState::setInput()\&.
.PP
Référencé par setGivenAnswer()\&.
.PP
.nf
21 {
22     bool ok = this->isAnswerValid(this->givenAnswer());
23     if(ok) {
24         qDebug() << this->givenAnswer() << " answer valid !";
25         qDebug() << this->givenAnswer();
26         SH_InOutState::setInput(this->givenAnswer());
27         emit answerValid();
28         emit next();
29     } else {
30         qDebug() << this->givenAnswer() << " answer invalid :-(";
31         qDebug() << this->givenAnswer();
32         emit answerInvalid();
33     }
34     return ok;
35 }
.fi
.SS "void SH_InOutState::display (boolcanDisplay)\fC [inherited]\fP"

.PP
Définition à la ligne 95 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_display, SH_InOutState::m_isVisible, SH_InOutState::m_output, et SH_InOutState::sendOutput()\&.
.PP
Référencé par SH_InOutStateMachine::addIOState(), et SH_StatementState::onEntry()\&.
.PP
.nf
96 {
97     m_display=canDisplay;
98     if(m_display && !m_output\&.isEmpty() && m_isVisible) {
99         qDebug() << "resalut !" << QVariant(m_output);
100         emit sendOutput(QVariant(m_output));
101     }
102 }
.fi
.SS "QVariant SH_QuestionState::givenAnswer () const\fC [virtual]\fP"

.PP
Définition à la ligne 55 du fichier SH_QuestionState\&.cpp\&.
.PP
Références m_givenAnswer\&.
.PP
Référencé par checkValidity(), SH_DatabaseContentQuestionState::rawInput(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
56 {
57     return this->m_givenAnswer;
58 }
.fi
.SS "QVariant SH_InOutState::input () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 20 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_input\&.
.PP
Référencé par SH_InOutState::rawInput(), SH_DateQuestionState::rawInput(), et SH_InOutState::setInput()\&.
.PP
.nf
21 {
22     return m_input;
23 }
.fi
.SS "virtual bool SH_QuestionState::isAnswerValid (const QVariant &givenAnswer)\fC [pure virtual]\fP"

.PP
Implémenté dans \fBSH_DatabaseContentQuestionState\fP, \fBSH_DecimalQuestionState\fP, \fBSH_DateQuestionState\fP, \fBSH_NumericQuestionState\fP, \fBSH_StringQuestionState\fP, et \fBSH_RegExpQuestionState\fP\&.
.PP
Référencé par checkValidity()\&.
.SS "void SH_GenericState::next ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par checkValidity(), SH_ConfirmationState::confirmInput(), SH_AdaptDatabaseState::insertUpdate(), SH_StatementState::onEntry(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "void SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 62 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_NamedObject::name()\&.
.PP
Référencé par SH_StatementState::onEntry()\&.
.PP
.nf
63 {
64     Q_UNUSED(event);
65     qDebug() << "Machine: " << machine()->objectName() << " entered " << name();
66 }
.fi
.SS "void SH_InOutState::onExit (QEvent *event)\fC [inherited]\fP"

.PP
Définition à la ligne 110 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_input, SH_InOutState::m_isVisible, SH_GenericState::onExit(), et SH_InOutState::resendInput()\&.
.PP
.nf
111 {
112     SH_GenericState::onExit(event);
113     if(m_isVisible) {
114         emit resendInput(m_input);
115     }
116 }
.fi
.SS "QString SH_InOutState::output () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 56 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_output\&.
.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutState::setOutput(), et SH_StatementState::SH_StatementState()\&.
.PP
.nf
57 {
58     return m_output;
59 }
.fi
.SS "QVariant SH_InOutState::rawInput () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Réimplémentée dans \fBSH_DateQuestionState\fP, et \fBSH_DatabaseContentQuestionState\fP\&.
.PP
Définition à la ligne 30 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::input()\&.
.PP
Référencé par SH_InOutStateMachine::addIOState()\&.
.PP
.nf
31 {
32     return input();
33 }
.fi
.SS "void SH_InOutState::resendInput (QVariantinput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutState::onExit(), et SH_InOutState::setInput()\&.
.SS "void SH_InOutState::sendOutput (QVariantoutput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutState::display(), et SH_InOutState::setOutput()\&.
.SS "void SH_QuestionState::setGivenAnswer (const QVariant &givenAnswer)\fC [virtual]\fP"

.PP
Définition à la ligne 66 du fichier SH_QuestionState\&.cpp\&.
.PP
Références checkValidity(), et m_givenAnswer\&.
.PP
Référencé par setInput()\&.
.PP
.nf
67 {
68     this->m_givenAnswer = givenAsnwer;
69     this->checkValidity();
70 }
.fi
.SS "void SH_QuestionState::setInput (const QVariant &input)\fC [virtual]\fP"

.PP
Réimplémentée à partir de \fBSH_InOutState\fP\&.
.PP
Définition à la ligne 43 du fichier SH_QuestionState\&.cpp\&.
.PP
Références setGivenAnswer()\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
44 {
45     qDebug() << "new answer " << input\&.toString();
46     this->setGivenAnswer(input);
47 }
.fi
.SS "void SH_InOutState::setOutput (const QString &output)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
Réimplémentée dans \fBSH_DatabaseContentQuestionState\fP\&.
.PP
Définition à la ligne 68 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_isVisible, SH_InOutState::m_output, SH_InOutState::output(), et SH_InOutState::sendOutput()\&.
.PP
Référencé par SH_DatabaseContentQuestionState::setOutput(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
69 {
70     m_output = output;
71     if(m_isVisible) {
72         emit sendOutput(QVariant(m_output));
73     }
74 }
.fi
.SS "void SH_InOutState::setVisibility (boolisVisible)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 81 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_isVisible\&.
.PP
Référencé par SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
82 {
83     m_isVisible = isVisible;
84 }
.fi
.SS "QString SH_GenericState::toString ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 21 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_NamedObject::toString(), et SH_InOutStateMachine::toString()\&.
.PP
Référencé par SH_InOutStateMachine::addChildrenNextTransition(), SH_DateQuestionState::rawInput(), et SH_InOutStateMachine::toString()\&.
.PP
.nf
22 {
23     QStateMachine* machine = this->machine();
24     SH_InOutStateMachine* mach = qobject_cast<SH_InOutStateMachine *>(machine);
25     if(mach) {
26         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
27     } else {
28         return SH_NamedObject::toString();
29     }
30 }
.fi
.SS "bool SH_InOutState::visibility ()\fC [inherited]\fP"

.PP
Définition à la ligne 91 du fichier SH_IOState\&.cpp\&.
.PP
Références SH_InOutState::m_isVisible\&.
.PP
Référencé par SH_InOutStateMachine::addIOState()\&.
.PP
.nf
91                                {
92     return m_isVisible;
93 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "QVariant SH_QuestionState::m_givenAnswer\fC [private]\fP"

.PP
m_givenAnswer 
.PP
Définition à la ligne 80 du fichier SH_QuestionState\&.h\&.
.PP
Référencé par givenAnswer(), et setGivenAnswer()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
