.TH "SH_GenericState" 3 "Mardi Juillet 2 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_GenericState \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_GenericDebugableState\&.h>\fP
.PP
Est dérivée de \fBQState\fP, et \fBSH_NamedObject\fP\&.
.PP
Dérivée par \fBSH_AdaptDatabaseState\fP, \fBSH_InOutState\fP, et \fBSH_PrintingState\fP\&.
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_GenericState\fP (QString \fBname\fP='', \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.in -1c
.SS "Connecteurs privés"

.in +1c
.ti -1c
.RI "void \fBemitGoNext\fP ()"
.br
.ti -1c
.RI "void \fBonTransitionTriggered\fP ()"
.br
.in -1c
.SS "Fonctions membres privées"

.in +1c
.ti -1c
.RI "virtual QString \fBname\fP () const "
.br
.ti -1c
.RI "QString \fBptraddress\fP () const "
.br
.ti -1c
.RI "virtual void \fBsetName\fP (const QString &\fBname\fP)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "bool \fBm_isRunning\fP"
.br
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 12 du fichier SH_GenericDebugableState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_GenericState::SH_GenericState (QStringname = \fC''\fP, \fBQState\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 12 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références emitGoNext(), goNext(), et m_isRunning\&.
.PP
.nf
12                                                              :
13     QState(parent), SH_NamedObject(name), m_isRunning(false)
14 {
15     this->setObjectName(name);
16     connect(this, &SH_GenericState::goNext, this, &SH_GenericState::emitGoNext);
17     this->blockSignals(!m_isRunning);
18 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void SH_GenericState::emitGoNext ()\fC [private]\fP, \fC [slot]\fP"

.PP
Définition à la ligne 33 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références isRunning(), et next()\&.
.PP
Référencé par SH_GenericState()\&.
.PP
.nf
34 {
35     if(this->isRunning()) {
36         emit next();
37     }
38 }
.fi
.SS "SH_GenericState::goNext ()\fC [signal]\fP"

.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), SH_AdaptDatabaseState::insertUpdate(), SH_StatementState::onEntry(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_GenericState(), SH_InOutState::SH_InOutState(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_GenericState::isRunning ()"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 81 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références m_isRunning\&.
.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), emitGoNext(), SH_InOutState::emitResendInput(), SH_InOutState::emitSendOutput(), SH_InOutState::setInput(), SH_InOutState::setOutput(), et SH_InOutState::setVisibility()\&.
.PP
.nf
82 {
83     return m_isRunning;
84 }
.fi
.SS "SH_NamedObject::name () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 26 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SH_NamedObject::m_name\&.
.PP
Référencé par SH_GenericStateMachine::onEntry(), onEntry(), SH_GenericStateMachine::onExit(), onExit(), SH_NamedObject::setName(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
27 {
28     return m_name;
29 }
.fi
.SS "SH_GenericState::next ()\fC [signal]\fP"

.PP
Référencé par emitGoNext()\&.
.SS "SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 60 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), m_isRunning, SH_NamedObject::name(), et onTransitionTriggered()\&.
.PP
Référencé par SH_StatementState::onEntry()\&.
.PP
.nf
61 {
62     Q_UNUSED(event);
63     foreach (QAbstractTransition* tr, transitions()) {
64         connect(tr, SIGNAL(triggered()), this, SLOT(onTransitionTriggered()));
65     }
66     m_isRunning = true;
67     this->blockSignals(!m_isRunning);
68     SH_MessageManager::debugMessage(QString("Machine: %1, entered state %2")\&.arg(machine()->objectName())\&.arg(name()));
69 }
.fi
.SS "SH_GenericState::onExit (QEvent *event)\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 74 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), m_isRunning, et SH_NamedObject::name()\&.
.PP
.nf
75 {
76     Q_UNUSED(event);
77     m_isRunning = false;
78     this->blockSignals(!m_isRunning);
79     SH_MessageManager::debugMessage(QString("Machine: %1, exited state %2")\&.arg(machine()->objectName())\&.arg(name()));
80 }
.fi
.SS "SH_GenericState::onTransitionTriggered ()\fC [private]\fP, \fC [slot]\fP"

.PP
Définition à la ligne 43 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage()\&.
.PP
Référencé par onEntry()\&.
.PP
.nf
44 {
45     QAbstractTransition* tr = qobject_cast<QAbstractTransition*>(sender());
46     if (tr == 00) return;
47     QSignalTransition *str = qobject_cast<QSignalTransition*>(tr);
48     QString signal = "";
49     if(str) {
50         signal = QString(str->signal());
51     }
52     SH_GenericState* sourceState = qobject_cast<SH_GenericState*>(tr->sourceState());
53     SH_GenericState* targetState = qobject_cast<SH_GenericState*>(tr->targetState());
54     SH_MessageManager::debugMessage(QString("transition triggered in %1 from %2 to %3 with thanks to event %4")\&.arg(machine()->objectName())\&.arg(sourceState->objectName())\&.arg(targetState->objectName())\&.arg(signal));
55 }
.fi
.SS "SH_NamedObject::ptraddress () const\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 42 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SH_NamedObject::m_ptraddress\&.
.PP
.nf
43 {
44     return m_ptraddress;
45 }
.fi
.SS "SH_NamedObject::setName (const QString &name)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIname\fP 
.RE
.PP

.PP
Définition à la ligne 34 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SH_NamedObject::m_name, et SH_NamedObject::name()\&.
.PP
.nf
35 {
36     m_name = name;
37 }
.fi
.SS "SH_GenericState::toString ()\fC [virtual]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 23 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_NamedObject::toString(), et toString()\&.
.PP
Référencé par SH_QuestionState::checkValidity(), SH_DateQuestionState::rawInput(), SH_GenericStateMachine::toString(), et toString()\&.
.PP
.nf
24 {
25     QStateMachine* machine = this->machine();
26     SH_GenericState* mach = qobject_cast<SH_GenericState *>(machine);
27     if(mach) {
28         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
29     } else {
30         return SH_NamedObject::toString();
31     }
32 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "SH_GenericState::m_isRunning\fC [private]\fP"

.PP
Définition à la ligne 86 du fichier SH_GenericDebugableState\&.h\&.
.PP
Référencé par isRunning(), onEntry(), onExit(), et SH_GenericState()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
