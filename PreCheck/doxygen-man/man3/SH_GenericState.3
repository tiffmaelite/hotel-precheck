.TH "SH_GenericState" 3 "Lundi Juin 24 2013" "Version 0.3" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_GenericState \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_GenericDebugableState\&.h>\fP
.PP
Est dérivée de \fBQState\fP, et \fBSH_NamedObject\fP\&.
.PP
Dérivée par \fBSH_AdaptDatabaseState\fP, \fBSH_InOutState\fP, et \fBSH_PrintingState\fP\&.
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_GenericState\fP (QString \fBname\fP='', \fBQState\fP *parent=0)"
.br
.ti -1c
.RI "bool \fBisRunning\fP ()"
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.in -1c
.SS "Connecteurs privés"

.in +1c
.ti -1c
.RI "void \fBemitGoNext\fP ()"
.br
.ti -1c
.RI "void \fBonMachineStarted\fP ()"
.br
.ti -1c
.RI "void \fBonTransitionTriggered\fP ()"
.br
.in -1c
.SS "Fonctions membres privées"

.in +1c
.ti -1c
.RI "virtual QString \fBname\fP () const "
.br
.ti -1c
.RI "QString \fBptraddress\fP () const "
.br
.ti -1c
.RI "virtual void \fBsetName\fP (const QString &\fBname\fP)"
.br
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "bool \fBm_isRunning\fP"
.br
.in -1c
.SH "Description détaillée"
.PP 
Définition à la ligne 12 du fichier SH_GenericDebugableState\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_GenericState::SH_GenericState (QStringname = \fC''\fP, \fBQState\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 10 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références emitGoNext(), goNext(), et m_isRunning\&.
.PP
.nf
10                                                              :
11     QState(parent), SH_NamedObject(name), m_isRunning(false)
12 {
13     connect(this, &SH_GenericState::goNext, this, &SH_GenericState::emitGoNext);
14     this->blockSignals(!m_isRunning);
15 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void SH_GenericState::emitGoNext ()\fC [private]\fP, \fC [slot]\fP"

.PP
Définition à la ligne 33 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références isRunning(), et next()\&.
.PP
Référencé par SH_GenericState()\&.
.PP
.nf
34 {
35     if(this->isRunning()) {
36         emit next();
37     }
38 }
.fi
.SS "SH_GenericState::goNext ()\fC [signal]\fP"

.PP
Référencé par SH_QuestionState::checkValidity(), SH_ConfirmationState::confirmInput(), SH_AdaptDatabaseState::insertUpdate(), SH_StatementState::onEntry(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_GenericState(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_GenericState::isRunning ()"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.PP
Définition à la ligne 92 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références m_isRunning\&.
.PP
Référencé par SH_InOutStateMachine::addChildrenReplaceTransition(), SH_InOutState::display(), emitGoNext(), SH_InOutState::setInput(), SH_InOutState::setOutput(), et SH_InOutState::setVisibility()\&.
.PP
.nf
93 {
94     return m_isRunning;
95 }
.fi
.SS "SH_NamedObject::name () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 32 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SH_NamedObject::m_name\&.
.PP
Référencé par SH_GenericStateMachine::onEntry(), onEntry(), SH_GenericStateMachine::onExit(), onExit(), onTransitionTriggered(), SH_NamedObject::setName(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
33 {
34     return m_name;
35 }
.fi
.SS "SH_GenericState::next ()\fC [signal]\fP"

.PP
Référencé par emitGoNext()\&.
.SS "SH_GenericState::onEntry (QEvent *event)\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 71 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références m_isRunning, et SH_NamedObject::name()\&.
.PP
Référencé par SH_StatementState::onEntry()\&.
.PP
.nf
72 {
73     Q_UNUSED(event);
74     m_isRunning = true;
75     this->blockSignals(!m_isRunning);
76     qDebug() << "Machine: " << machine()->objectName() << " entered " << name();
77 }
.fi
.SS "SH_GenericState::onExit (QEvent *event)\fC [protected]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 84 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références m_isRunning, et SH_NamedObject::name()\&.
.PP
Référencé par SH_InOutState::onExit()\&.
.PP
.nf
85 {
86     Q_UNUSED(event);
87     m_isRunning = false;
88     this->blockSignals(!m_isRunning);
89     qDebug() << "Machine: " << machine()->objectName() << " exited  " << name();
90 }
.fi
.SS "SH_GenericState::onMachineStarted ()\fC [private]\fP, \fC [slot]\fP"

.PP
Définition à la ligne 101 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références onTransitionTriggered()\&.
.PP
.nf
102 {
103     foreach (QAbstractTransition* tr, transitions())
104         connect(tr, SIGNAL(triggered()), this, SLOT(onTransitionTriggered()));
105 }
.fi
.SS "SH_GenericState::onTransitionTriggered ()\fC [private]\fP, \fC [slot]\fP"

.PP
Définition à la ligne 46 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_NamedObject::name()\&.
.PP
Référencé par onMachineStarted()\&.
.PP
.nf
47 {
48     QAbstractTransition* tr = qobject_cast<QAbstractTransition*>(sender());
49     if (tr == 00) return;
50     SH_GenericState* sourceState = qobject_cast<SH_GenericState*>(tr->sourceState());
51     SH_GenericState* targetState = qobject_cast<SH_GenericState*>(tr->targetState());
52 
53     QString log;
54     QTextStream logStream(&log);
55     logStream << machine()->objectName() << " transition from ";
56     if (sourceState) logStream << sourceState->name();
57     else logStream << tr->sourceState();
58     logStream << " to ";
59     if (targetState) logStream << targetState->name();
60     else logStream << tr->targetState();
61     logStream\&.flush();
62     qDebug() << "Machine: " << log;
63 }
.fi
.SS "SH_NamedObject::ptraddress () const\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 54 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SH_NamedObject::m_ptraddress\&.
.PP
.nf
55 {
56     return m_ptraddress;
57 }
.fi
.SS "SH_NamedObject::setName (const QString &name)\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIname\fP 
.RE
.PP

.PP
Définition à la ligne 43 du fichier SH_NamedObject\&.cpp\&.
.PP
Références SH_NamedObject::m_name, et SH_NamedObject::name()\&.
.PP
.nf
44 {
45     m_name = name;
46 }
.fi
.SS "SH_GenericState::toString ()\fC [virtual]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 22 du fichier SH_GenericDebugableState\&.cpp\&.
.PP
Références SH_GenericStateMachine::toString(), et SH_NamedObject::toString()\&.
.PP
Référencé par SH_GenericStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addIOState(), SH_DateQuestionState::rawInput(), et SH_GenericStateMachine::toString()\&.
.PP
.nf
23 {
24     QStateMachine* machine = this->machine();
25     SH_InOutStateMachine* mach = qobject_cast<SH_InOutStateMachine *>(machine);
26     if(mach) {
27         return SH_NamedObject::toString()+ " [in "+mach->toString()+"] ";
28     } else {
29         return SH_NamedObject::toString();
30     }
31 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "SH_GenericState::m_isRunning\fC [private]\fP"

.PP
Définition à la ligne 91 du fichier SH_GenericDebugableState\&.h\&.
.PP
Référencé par isRunning(), onEntry(), onExit(), et SH_GenericState()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
