.TH "SH_AddressCreationStateMachine" 3 "Mardi Juillet 2 2013" "Version 0.4" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_AddressCreationStateMachine \- 
.PP
La classe \fBSH_AddressCreationStateMachine\fP fournit une machine d'états finis permettant la création d'un entité 'adresse' à enregistrer dans la base de données\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_AddressCreation\&.h>\fP
.PP
Est dérivée de \fBSH_InOutStateMachine\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "virtual void \fBaddChildrenReplaceTransition\fP (QAbstractState *previousState, QAbstractState *nextState)"
.br
.ti -1c
.RI "void \fBaddIOState\fP (\fBSH_InOutState\fP *state, QString field='')"
.br
.ti -1c
.RI "virtual void \fBaddState\fP (QAbstractState *state)"
.br
.ti -1c
.RI "virtual void \fBaddState\fP (\fBSH_InOutState\fP *astate, QString field='')"
.br
.ti -1c
.RI "virtual void \fBaddState\fP (\fBSH_InOutStateMachine\fP *astate, QString table='')"
.br
.ti -1c
.RI "void \fBaddStateMachine\fP (\fBSH_InOutStateMachine\fP *fsm, QString table='')"
.br
.ti -1c
.RI "void \fBsetContentValue\fP (QVariant content, QString field)"
.br
.ti -1c
.RI "virtual void \fBsetStatesNextTransition\fP (QAbstractState *previousState, QAbstractState *nextState)"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBcancelReplacement\fP ()"
.br
.ti -1c
.RI "void \fBclearAll\fP ()"
.br
.ti -1c
.RI "void \fBconfirmInput\fP ()"
.br
.ti -1c
.RI "void \fBdisplayCalendar\fP ()"
.br
.ti -1c
.RI "void \fBdisplayChoiceList\fP (QVariantList choices)"
.br
.ti -1c
.RI "void \fBdisplayFileDialog\fP ()"
.br
.ti -1c
.RI "void \fBgoNext\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.ti -1c
.RI "void \fBreceiveInput\fP (QString input)"
.br
.ti -1c
.RI "void \fBreplaceInput\fP (QString field)"
.br
.ti -1c
.RI "void \fBresendText\fP (QString text, bool editable=false)"
.br
.ti -1c
.RI "void \fBsendText\fP (QString text, bool editable=false)"
.br
.ti -1c
.RI "void \fBvalidateInput\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_AddressCreationStateMachine\fP (QString \fBname\fP, \fBQObject\fP *parent=0)"
.br
.ti -1c
.RI "QVariant \fBgetContentValue\fP (QString field)"
.br
.ti -1c
.RI "QHistoryState * \fBhistoryValue\fP (QString field)"
.br
.ti -1c
.RI "QVariantMap \fBioContent\fP () const "
.br
.ti -1c
.RI "void \fBsetIOcontent\fP (const QVariantMap &\fBioContent\fP)"
.br
.ti -1c
.RI "void \fBsetIOStateHistory\fP (QHistoryState *state, QString field)"
.br
.ti -1c
.RI "void \fBsetTableName\fP (const QString &\fBtableName\fP)"
.br
.ti -1c
.RI "QString \fBtableName\fP () const "
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.in -1c
.SS "Connecteurs protégés"

.in +1c
.ti -1c
.RI "void \fBemitGoNext\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "QMap< QString, QHistoryState * > \fBioStatesHistory\fP () const "
.br
.ti -1c
.RI "bool \fBisERunning\fP ()"
.br
.ti -1c
.RI "void \fBonEntry\fP (QEvent *event)"
.br
.ti -1c
.RI "void \fBonExit\fP (QEvent *event)"
.br
.in -1c
.SS "Attributs protégés"

.in +1c
.ti -1c
.RI "QVariantMap \fBm_ioContent\fP"
.br
.ti -1c
.RI "QMap< QString, QHistoryState * > \fBm_ioStatesHistory\fP"
.br
.ti -1c
.RI "QString \fBm_tableName\fP"
.br
.in -1c
.SH "Description détaillée"
.PP 
La classe \fBSH_AddressCreationStateMachine\fP fournit une machine d'états finis permettant la création d'un entité 'adresse' à enregistrer dans la base de données\&. 


.IP "\(bu" 2

.IP "\(bu" 2

.PP

.PP
Définition à la ligne 11 du fichier SH_AddressCreation\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_AddressCreationStateMachine::SH_AddressCreationStateMachine (QStringname, \fBQObject\fP *parent = \fC0\fP)"
Construit une instance de la classe \fBSH_AddressCreationStateMachine\fP 
.PP
Définition à la ligne 8 du fichier SH_AddressCreation\&.cpp\&.
.PP
Références SH_GenericStateMachine::goNext()\&.
.PP
.nf
8                                                                                             :
9     SH_InOutStateMachine("ADDRESSES",name, parent)
10 {
11     /*TODO: rue, numéro, code postal, ville, pays, destinataire*/
12     emit goNext();
13 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "SH_InOutStateMachine::addChildrenReplaceTransition (QAbstractState *previousState, QAbstractState *nextState)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIpreviousState\fP 
.br
\fInextState\fP 
.RE
.PP

.PP
Définition à la ligne 227 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::historyValue(), SH_GenericStateMachine::next(), et SH_InOutStateMachine::replaceInput()\&.
.PP
Référencé par SH_LoopingInOutStateMachine::setStatesNextTransition()\&.
.PP
.nf
228 {
229     SH_GenericState* genPreviousState = qobject_cast<SH_GenericState*>(previousState);
230     if(genPreviousState) {
231         /*connect(this, &SH_GenericStateMachine::entered, [=]() {*/
232         /*à faire au moment de l'entrée dans l'état previousState*/
233         /*connect(genPreviousState, &QAbstractState::entered, [=]() {*/
234         connect(this, &SH_InOutStateMachine::replaceInput, [=](QString field) {
235             /*après avoir demandé à revenir sur un état précédent, on attend la fin de l'état actuel puis on retourne à l'historique de l'état désiré; celui-ci fini, on passe à l'état qui aurait du suivre celui pendant lequel on a demandé à revenir sur un état précédent*/
236             QHistoryState* hState = historyValue(field);
237             if(hState) {
238                 /*si l'historique existe (on a déjà quitté l'état voulu)*/
239                 hState->parentState()->addTransition(hState->parentState(), SIGNAL(next()), nextState);
240                 genPreviousState->addTransition(genPreviousState, SIGNAL(next()), hState);
241             }
242         });
243         /*});*/
244         /*});*/
245     }
246 }
.fi
.SS "SH_InOutStateMachine::addIOState (\fBSH_InOutState\fP *state, QStringfield = \fC''\fP)\fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIstate\fP 
.br
\fIfield\fP 
.RE
.PP

.PP
Définition à la ligne 84 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::addState(), SH_ConfirmationState::confirmInput(), SH_MessageManager::debugMessage(), SH_InOutStateMachine::displayCalendar(), SH_DatabaseContentQuestionState::displayChoiceList(), SH_InOutStateMachine::displayChoiceList(), SH_InOutStateMachine::displayFileDialog(), SH_MessageManager::infoMessage(), SH_InOutState::rawInput(), SH_InOutStateMachine::receiveInput(), SH_InOutState::resendInput(), SH_InOutStateMachine::resendText(), SH_InOutState::sendOutput(), SH_InOutStateMachine::sendText(), SH_InOutStateMachine::setContentValue(), SH_InOutState::setInput(), SH_InOutStateMachine::setIOStateHistory(), et SH_InOutStateMachine::validateInput()\&.
.PP
Référencé par SH_InOutStateMachine::addState()\&.
.PP
.nf
85 {
86     SH_InOutState* state = qobject_cast<SH_InOutState *>(astate);
87     if(state) {
88         /*connect(this, &SH_GenericStateMachine::entered, [=]() {*/
89         /*à faire au moment de l'entrée dans l'état state*/
90         /*connect(state, &QAbstractState::entered, [=]() {*/
91         /* la réception d'une valeur entraîne son enregistrement comme entrée de l'utilisateur auprès de l'état*/
92         connect(state, &SH_InOutState::sendOutput, [=](QVariant out) { if(out\&.isValid()) {
93                 SH_MessageManager::infoMessage(out\&.toString(),"reçu de l'état");
94                 emit this->sendText(out\&.toString(), false);
95             }});
96         connect(this, &SH_InOutStateMachine::receiveInput, state, &SH_InOutState::setInput, Qt::QueuedConnection);
97         connect(state, &SH_InOutState::resendInput, [=](QVariant in) {  if(in\&.isValid()) {
98                 SH_MessageManager::infoMessage(in\&.toString(),"envoyé par l'état");
99                 emit this->resendText(in\&.toString(), true);
100             }});
101         SH_MessageManager::debugMessage("salioute");
102         SH_ValidationState *validationState = qobject_cast<SH_ValidationState*>(astate);
103         if(validationState) {
104             connect(this, &SH_InOutStateMachine::validateInput, validationState, &SH_ValidationState::confirmInput, Qt::QueuedConnection);
105         }
106 
107         SH_ConfirmationState *confirmationState = qobject_cast<SH_ConfirmationState*>(astate);
108         if(confirmationState) {
109             connect(this, &SH_InOutStateMachine::validateInput, confirmationState, &SH_ConfirmationState::confirmInput, Qt::QueuedConnection);
110         }
111 
112         SH_DateQuestionState *dateState = qobject_cast<SH_DateQuestionState*>(astate);
113         if(dateState) {
114             emit this->displayCalendar();
115         }
116 
117         SH_DatabaseContentQuestionState *choiceState = qobject_cast<SH_DatabaseContentQuestionState*>(astate);
118         if(choiceState) {
119             connect(this, &SH_InOutStateMachine::displayChoiceList, choiceState, &SH_DatabaseContentQuestionState::displayChoiceList, Qt::QueuedConnection);
120         }
121 
122         SH_FileSelectionState *fileState = qobject_cast<SH_FileSelectionState*>(astate);
123         if(fileState) {
124             emit this->displayFileDialog();
125         }
126         SH_MessageManager::debugMessage("salioute bis");
127         /*});*/
128         connect(state, &QAbstractState::exited, [=]() {
129             if(!field\&.isEmpty()) {
130                 setContentValue(state->rawInput(), field);
131 
132                 /*gestion de l'historique des états pour pouvoir revenir à l'état state après l'avoir quitté*/
133                 QHistoryState* hState = new QHistoryState(state);
134                 setIOStateHistory(hState, field);
135             }
136             /*plus aucune action sur l'état ne pourra être provoquée par la machine*/
137             state->disconnect(this);
138         });
139         /*});*/
140     }
141     SH_MessageManager::debugMessage("salioute bis bis");
142     QAbstractState* abstate = qobject_cast<QAbstractState *>(astate);
143     if(abstate) {
144         SH_InOutStateMachine::addState(abstate);
145     }
146 }
.fi
.SS "void SH_InOutStateMachine::addState (QAbstractState *state)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 68 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_GenericStateMachine::addState(), et SH_MessageManager::debugMessage()\&.
.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addStateMachine(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_ClientCreationStateMachine::SH_ClientCreationStateMachine(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
69 {
70     SH_MessageManager::debugMessage("chalut");
71     SH_GenericStateMachine::addState(state);
72 }
.fi
.SS "void SH_InOutStateMachine::addState (\fBSH_InOutState\fP *astate, QStringfield = \fC''\fP)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 74 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::addIOState(), et SH_MessageManager::debugMessage()\&.
.PP
.nf
75 {
76     SH_MessageManager::debugMessage("salioute state");
77     SH_InOutStateMachine::addIOState(state, field);
78 }
.fi
.SS "void SH_InOutStateMachine::addState (\fBSH_InOutStateMachine\fP *astate, QStringtable = \fC''\fP)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 152 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::addStateMachine()\&.
.PP
.nf
153 {
154     SH_InOutStateMachine::addStateMachine(fsm, table);
155 }
.fi
.SS "SH_InOutStateMachine::addStateMachine (\fBSH_InOutStateMachine\fP *fsm, QStringtable = \fC''\fP)\fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIfsm\fP 
.RE
.PP

.PP
Définition à la ligne 157 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::addState(), SH_InOutStateMachine::cancelReplacement(), SH_InOutStateMachine::confirmInput(), SH_MessageManager::debugMessage(), SH_InOutStateMachine::displayCalendar(), SH_InOutStateMachine::displayChoiceList(), SH_InOutStateMachine::receiveInput(), SH_InOutStateMachine::replaceInput(), SH_InOutStateMachine::resendText(), SH_InOutStateMachine::sendText(), SH_InOutStateMachine::setTableName(), et SH_InOutStateMachine::validateInput()\&.
.PP
Référencé par SH_InOutStateMachine::addState()\&.
.PP
.nf
157                                                                                       {
158     SH_MessageManager::debugMessage("salioute machine");
159     SH_InOutStateMachine* fsm = qobject_cast<SH_InOutStateMachine *>(astate);
160     if(fsm) {
161         if(!table\&.isEmpty()) {
162             fsm->setTableName(table);
163         }
164         /*connect(this, &SH_InOutStateMachine::entered, [=]() {*/
165         /*à faire au moment de l'entrée dans la machine d'état fsm*/
166         /*connect(fsm, &SH_InOutStateMachine::entered, [=]() {*/
167         connect(this, &SH_InOutStateMachine::receiveInput, fsm, &SH_InOutStateMachine::receiveInput,Qt::QueuedConnection);
168         connect(this, &SH_InOutStateMachine::sendText, fsm, &SH_InOutStateMachine::sendText,Qt::QueuedConnection);
169         connect(this, &SH_InOutStateMachine::resendText, fsm, &SH_InOutStateMachine::resendText,Qt::QueuedConnection);
170         connect(this, &SH_InOutStateMachine::confirmInput, fsm, &SH_InOutStateMachine::confirmInput,Qt::QueuedConnection);
171         connect(this, &SH_InOutStateMachine::validateInput, fsm, &SH_InOutStateMachine::validateInput,Qt::QueuedConnection);
172         connect(this, &SH_InOutStateMachine::replaceInput, fsm, &SH_InOutStateMachine::replaceInput,Qt::QueuedConnection);
173         connect(this, &SH_InOutStateMachine::cancelReplacement, fsm, &SH_InOutStateMachine::cancelReplacement,Qt::QueuedConnection);
174         connect(this, &SH_InOutStateMachine::displayCalendar, fsm, &SH_InOutStateMachine::displayCalendar,Qt::QueuedConnection);
175         connect(this, &SH_InOutStateMachine::displayChoiceList, fsm, &SH_InOutStateMachine::displayChoiceList,Qt::QueuedConnection);
176         /* });*/
177 
178         /*à faire au moment de la sortie de la machine d'état fsm*/
179         /*connect(fsm, &SH_InOutStateMachine::exited, [=]() {*/
180         /*plus aucune action sur la machine d'état fille ne pourra être provoquée par la machine mère*/
181         /*fsm->disconnect(this);*/
182         /*});*/
183         /*});*/
184     }
185     QAbstractState* abstate = qobject_cast<QAbstractState *>(astate);
186     if(abstate) {
187         SH_InOutStateMachine::addState(abstate);
188     }
189 }
.fi
.SS "SH_InOutStateMachine::cancelReplacement ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addStateMachine(), et SH_ApplicationCore::cancelReplacement()\&.
.SS "SH_InOutStateMachine::clearAll ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_ApplicationCore::launchStateMachine(), et SH_InOutStateMachine::setStatesNextTransition()\&.
.SS "SH_InOutStateMachine::confirmInput ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addStateMachine(), SH_ApplicationCore::receiveConfirmation(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_InOutStateMachine::displayCalendar ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addStateMachine(), et SH_ApplicationCore::launchStateMachine()\&.
.SS "void SH_InOutStateMachine::displayChoiceList (QVariantListchoices)\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addStateMachine(), et SH_ApplicationCore::launchStateMachine()\&.
.SS "SH_InOutStateMachine::displayFileDialog ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), et SH_ApplicationCore::launchStateMachine()\&.
.SS "void SH_GenericStateMachine::emitGoNext ()\fC [protected]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 52 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références SH_GenericStateMachine::next()\&.
.PP
Référencé par SH_GenericStateMachine::SH_GenericStateMachine()\&.
.PP
.nf
53 {
54     if(isRunning()) {
55         emit next();
56     }
57 }
.fi
.SS "SH_InOutStateMachine::getContentValue (QStringfield)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIfield\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
QVariant 
.RE
.PP

.PP
Définition à la ligne 39 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioContent\&.
.PP
Référencé par SH_ApplicationCore::billOpened(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
40 {
41     return m_ioContent\&.value(field);
42 }
.fi
.SS "SH_GenericStateMachine::goNext ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_AddressCreationStateMachine(), et SH_GenericStateMachine::SH_GenericStateMachine()\&.
.SS "SH_InOutStateMachine::historyValue (QStringfield)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIfield\fP 
.RE
.PP
\fBRenvoie:\fP
.RS 4
QHistoryState 
.RE
.PP

.PP
Définition à la ligne 219 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioStatesHistory\&.
.PP
Référencé par SH_InOutStateMachine::addChildrenReplaceTransition(), et SH_LoopingInOutStateMachine::setStatesNextTransition()\&.
.PP
.nf
220 {
221     return m_ioStatesHistory\&.value(field);
222 }
.fi
.SS "SH_InOutStateMachine::ioContent () const\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QVariantMap 
.RE
.PP

.PP
Définition à la ligne 23 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioContent\&.
.PP
Référencé par SH_InOutStateMachine::setIOcontent()\&.
.PP
.nf
24 {
25     return m_ioContent;
26 }
.fi
.SS "SH_InOutStateMachine::ioStatesHistory () const\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QMap<QString, QHistoryState *> 
.RE
.PP

.PP
Définition à la ligne 194 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioStatesHistory\&.
.PP
Référencé par SH_InOutStateMachine::setIOStatesHistory()\&.
.PP
.nf
195 {
196     return m_ioStatesHistory;
197 }
.fi
.SS "SH_InOutStateMachine::isERunning ()\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
bool 
.RE
.PP

.SS "SH_GenericStateMachine::next ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addChildrenReplaceTransition(), SH_GenericStateMachine::emitGoNext(), SH_GenericStateMachine::setStatesNextTransition(), et SH_LoopingInOutStateMachine::setStatesNextTransition()\&.
.SS "SH_GenericStateMachine::onEntry (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 77 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), et SH_NamedObject::name()\&.
.PP
.nf
78 {
79     Q_UNUSED(event);
80     SH_MessageManager::debugMessage(this->name() + " entered");
81 }
.fi
.SS "SH_GenericStateMachine::onExit (QEvent *event)\fC [protected]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIevent\fP 
.RE
.PP

.PP
Définition à la ligne 87 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références SH_MessageManager::debugMessage(), et SH_NamedObject::name()\&.
.PP
.nf
88 {
89     Q_UNUSED(event);
90     SH_MessageManager::debugMessage(this->name() + " exited");
91 }
.fi
.SS "SH_InOutStateMachine::receiveInput (QStringinput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIinput\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addStateMachine(), SH_ApplicationCore::receiveInput(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "SH_InOutStateMachine::replaceInput (QStringfield)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIfield\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addChildrenReplaceTransition(), SH_InOutStateMachine::addStateMachine(), SH_ApplicationCore::replaceInput(), et SH_LoopingInOutStateMachine::setStatesNextTransition()\&.
.SS "void SH_InOutStateMachine::resendText (QStringtext, booleditable = \fCfalse\fP)\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addStateMachine(), et SH_ApplicationCore::launchStateMachine()\&.
.SS "SH_InOutStateMachine::sendText (QStringtext, booleditable = \fCfalse\fP)\fC [signal]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fItext\fP 
.br
\fIeditable\fP 
.RE
.PP

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addStateMachine(), SH_ApplicationCore::launchStateMachine(), et SH_InOutStateMachine::setStatesNextTransition()\&.
.SS "SH_InOutStateMachine::setContentValue (QVariantcontent, QStringfield)\fC [slot]\fP, \fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIcontent\fP 
.br
\fIfield\fP 
.RE
.PP

.PP
Définition à la ligne 63 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioContent\&.
.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_ApplicationCore::launchServiceCharging(), SH_LoopingInOutStateMachine::setStatesNextTransition(), SH_InOutStateMachine::setStatesNextTransition(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
64 {
65     m_ioContent\&.insert(field, content);
66 }
.fi
.SS "SH_InOutStateMachine::setIOcontent (const QVariantMap &ioContent)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIioContent\fP 
.RE
.PP

.PP
Définition à la ligne 31 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::ioContent(), et SH_InOutStateMachine::m_ioContent\&.
.PP
.nf
32 {
33     m_ioContent = ioContent;
34 }
.fi
.SS "SH_InOutStateMachine::setIOStateHistory (QHistoryState *state, QStringfield)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fIstate\fP 
.br
\fIfield\fP 
.RE
.PP

.PP
Définition à la ligne 210 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioStatesHistory\&.
.PP
Référencé par SH_InOutStateMachine::addIOState()\&.
.PP
.nf
211 {
212     /*remplacement si plusieurs fois, ajout sinon*/
213     m_ioStatesHistory\&.insert(field, state);
214 }
.fi
.SS "void SH_InOutStateMachine::setStatesNextTransition (QAbstractState *previousState, QAbstractState *nextState)\fC [virtual]\fP, \fC [slot]\fP, \fC [inherited]\fP"

.PP
Réimplémentée dans \fBSH_LoopingInOutStateMachine\fP\&.
.PP
Définition à la ligne 251 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::clearAll(), SH_AdaptDatabaseState::insertUpdate(), SH_InOutStateMachine::m_ioContent, SH_InOutStateMachine::m_tableName, SH_InOutStateMachine::sendText(), SH_InOutStateMachine::setContentValue(), SH_GenericStateMachine::setStatesNextTransition(), et SH_GenericStateMachine::toString()\&.
.PP
Référencé par SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ClientCreationStateMachine::SH_ClientCreationStateMachine()\&.
.PP
.nf
252 {
253     SH_GenericStateMachine* fsmPreviousState = qobject_cast<SH_GenericStateMachine*>(previousState);
254     SH_GenericState* genPreviousState = qobject_cast<SH_GenericState*>(previousState);
255     QFinalState* final = qobject_cast<QFinalState*>(nextState);
256     if(final) {
257         SH_AdaptDatabaseState* saveState = new SH_AdaptDatabaseState("enregistrement de la machine "+toString());
258         if(genPreviousState) {
259             /*connect(this, &SH_GenericStateMachine::entered, [=]() {*/
260             connect(genPreviousState, &QAbstractState::exited, [=]() {
261                 emit this->sendText("Merci !");
262                 setContentValue(saveState->insertUpdate(m_tableName, m_ioContent), "ID");
263             });
264             /*});*/
265         }
266         if(fsmPreviousState) {
267             /*connect(this, &SH_GenericStateMachine::entered, [=]() {*/
268             connect(genPreviousState, &QAbstractState::exited, [=]() {
269                 emit this->sendText("Merci !");
270                 setContentValue(saveState->insertUpdate(m_tableName, m_ioContent), "ID");
271             });
272             /*});*/
273         }
274         if(genPreviousState || fsmPreviousState) {
275             /*connect(this, &SH_GenericStateMachine::entered, [=]() {*/
276             connect(saveState, &QAbstractState::exited, [=]() {
277                 emit this->clearAll();
278             });
279             /*});*/
280         }
281         SH_GenericStateMachine::setStatesNextTransition(previousState, saveState);
282         SH_GenericStateMachine::setStatesNextTransition(saveState, final);
283     } else {
284         SH_GenericStateMachine::setStatesNextTransition(previousState, nextState);
285     }
286 }
.fi
.SS "SH_InOutStateMachine::setTableName (const QString &tableName)\fC [inherited]\fP"

.PP
\fBParamètres:\fP
.RS 4
\fItableName\fP 
.RE
.PP

.PP
Définition à la ligne 55 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_tableName, et SH_InOutStateMachine::tableName()\&.
.PP
Référencé par SH_InOutStateMachine::addStateMachine()\&.
.PP
.nf
56 {
57     m_tableName = tableName;
58 }
.fi
.SS "SH_InOutStateMachine::tableName () const\fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Définition à la ligne 47 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_tableName\&.
.PP
Référencé par SH_InOutStateMachine::setTableName()\&.
.PP
.nf
48 {
49     return m_tableName;
50 }
.fi
.SS "SH_GenericStateMachine::toString ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
\fBRenvoie:\fP
.RS 4
QString 
.RE
.PP

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 37 du fichier SH_GenericDebugableStateMachine\&.cpp\&.
.PP
Références SH_NamedObject::toString(), et SH_GenericState::toString()\&.
.PP
Référencé par SH_LoopingInOutStateMachine::setStatesNextTransition(), SH_InOutStateMachine::setStatesNextTransition(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_GenericStateMachine::SH_GenericStateMachine()\&.
.PP
.nf
38 {
39     QObject* parent = this->parent();
40     SH_GenericState* par = qobject_cast<SH_GenericState *>(parent);
41     if(par) {
42         return SH_NamedObject::toString()+ " [descending from "+par->toString()+"] ";
43     } else {
44         return SH_NamedObject::toString();
45     }
46 }
.fi
.SS "SH_InOutStateMachine::validateInput ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addStateMachine(), SH_ApplicationCore::receiveValidation(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SH "Documentation des données membres"
.PP 
.SS "SH_InOutStateMachine::m_ioContent\fC [protected]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 222 du fichier SH_IOStateMachine\&.h\&.
.PP
Référencé par SH_InOutStateMachine::getContentValue(), SH_InOutStateMachine::ioContent(), SH_InOutStateMachine::setContentValue(), SH_InOutStateMachine::setIOcontent(), SH_LoopingInOutStateMachine::setStatesNextTransition(), SH_InOutStateMachine::setStatesNextTransition(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.SS "SH_InOutStateMachine::m_ioStatesHistory\fC [protected]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 234 du fichier SH_IOStateMachine\&.h\&.
.PP
Référencé par SH_InOutStateMachine::historyValue(), SH_InOutStateMachine::ioStatesHistory(), SH_InOutStateMachine::setIOStateHistory(), et SH_InOutStateMachine::setIOStatesHistory()\&.
.SS "SH_InOutStateMachine::m_tableName\fC [protected]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 228 du fichier SH_IOStateMachine\&.h\&.
.PP
Référencé par SH_LoopingInOutStateMachine::setStatesNextTransition(), SH_InOutStateMachine::setStatesNextTransition(), SH_InOutStateMachine::setTableName(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_InOutStateMachine::tableName()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
