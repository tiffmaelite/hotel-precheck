.TH "SH_AddressCreationStateMachine" 3 "Vendredi Juin 21 2013" "Version 0.3" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
SH_AddressCreationStateMachine \- 
.PP
The \fBSH_AddressCreationStateMachine\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <SH_AddressCreation\&.h>\fP
.PP
Est dérivée de \fBSH_InOutStateMachine\fP\&.
.SS "Connecteurs publics"

.in +1c
.ti -1c
.RI "void \fBaddChildrenNextTransition\fP (QAbstractState *previousState, QAbstractState *nextState)"
.br
.ti -1c
.RI "void \fBaddIOState\fP (\fBSH_InOutState\fP *state, QString field)"
.br
.ti -1c
.RI "void \fBaddIOStateMachine\fP (\fBSH_InOutStateMachine\fP *fsm)"
.br
.ti -1c
.RI "void \fBsetContentValue\fP (QVariant content, QString field)"
.br
.in -1c
.SS "Signaux"

.in +1c
.ti -1c
.RI "void \fBcancelReplacement\fP ()"
.br
.ti -1c
.RI "void \fBclearAll\fP ()"
.br
.ti -1c
.RI "void \fBconfirmInput\fP ()"
.br
.ti -1c
.RI "void \fBdisplayCalendar\fP ()"
.br
.ti -1c
.RI "void \fBdisplayFileDialog\fP ()"
.br
.ti -1c
.RI "void \fBnext\fP ()"
.br
.ti -1c
.RI "void \fBreceiveInput\fP (QString input)"
.br
.ti -1c
.RI "void \fBreplaceInput\fP (QString field)"
.br
.ti -1c
.RI "void \fBresendText\fP (QString text, bool editable=false)"
.br
.ti -1c
.RI "void \fBsendText\fP (QString text, bool editable=false)"
.br
.ti -1c
.RI "void \fBvalidateInput\fP ()"
.br
.in -1c
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSH_AddressCreationStateMachine\fP (QString \fBname\fP, \fBQObject\fP *parent=0)"
.br
.ti -1c
.RI "QVariant \fBgetContentValue\fP (QString field)"
.br
.ti -1c
.RI "QHistoryState * \fBhistoryValue\fP (QString field)"
.br
.ti -1c
.RI "QVariantMap \fBioContent\fP () const "
.br
.ti -1c
.RI "void \fBsetIOcontent\fP (const QVariantMap &\fBioContent\fP)"
.br
.ti -1c
.RI "void \fBsetIOStateHistory\fP (QHistoryState *state, QString field)"
.br
.ti -1c
.RI "void \fBsetTableName\fP (const QString &\fBtableName\fP)"
.br
.ti -1c
.RI "QString \fBtableName\fP () const "
.br
.ti -1c
.RI "QString \fBtoString\fP ()"
.br
.in -1c
.SS "Fonctions membres protégées"

.in +1c
.ti -1c
.RI "QMap< QString, QHistoryState * > \fBioStatesHistory\fP () const "
.br
.in -1c
.SS "Attributs protégés"

.in +1c
.ti -1c
.RI "QVariantMap \fBm_ioContent\fP"
.br
.RI "\fIm_ioContent \fP"
.ti -1c
.RI "QMap< QString, QHistoryState * > \fBm_ioStatesHistory\fP"
.br
.RI "\fIm_ioStatesHistory \fP"
.ti -1c
.RI "QString \fBm_tableName\fP"
.br
.RI "\fIm_tableName \fP"
.in -1c
.SH "Description détaillée"
.PP 
The \fBSH_AddressCreationStateMachine\fP class\&. 
.PP
Définition à la ligne 7 du fichier SH_AddressCreation\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "SH_AddressCreationStateMachine::SH_AddressCreationStateMachine (QStringname, \fBQObject\fP *parent = \fC0\fP)"

.PP
Définition à la ligne 8 du fichier SH_AddressCreation\&.cpp\&.
.PP
Références SH_InOutStateMachine::next()\&.
.PP
.nf
8                                                                                             :
9     SH_InOutStateMachine("ADDRESSES",name, parent)
10 {
11 /*TODO: rue, numéro, code postal, ville, pays, destinataire*/
12 emit next();
13 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void SH_InOutStateMachine::addChildrenNextTransition (QAbstractState *previousState, QAbstractState *nextState)\fC [slot]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 250 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::clearAll(), SH_InOutStateMachine::historyValue(), SH_AdaptDatabaseState::insertUpdate(), SH_InOutStateMachine::m_ioContent, SH_InOutStateMachine::m_tableName, SH_InOutStateMachine::next(), SH_InOutStateMachine::replaceInput(), SH_InOutStateMachine::sendText(), SH_InOutStateMachine::setContentValue(), SH_GenericState::toString(), et SH_InOutStateMachine::toString()\&.
.PP
Référencé par SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ClientCreationStateMachine::SH_ClientCreationStateMachine()\&.
.PP
.nf
251 {
252     SH_InOutStateMachine* fsmPreviousState = qobject_cast<SH_InOutStateMachine*>(previousState);
253     SH_GenericState* genPreviousState = qobject_cast<SH_GenericState*>(previousState);
254     QFinalState* final = qobject_cast<QFinalState*>(nextState);
255     if(final) {
256         SH_AdaptDatabaseState* saveState = new SH_AdaptDatabaseState("enregistrement de la machine "+toString());
257         if(genPreviousState) {
258             genPreviousState->addTransition(genPreviousState, SIGNAL(next()), saveState);
259         }
260         if(fsmPreviousState) {
261             fsmPreviousState->addTransition(fsmPreviousState, SIGNAL(next()), saveState);
262         }
263         if(genPreviousState || fsmPreviousState) {
264             connect(previousState, &QAbstractState::exited, [=]() {
265                 connect(saveState, &QAbstractState::entered, [=]() {
266                     emit this->sendText("Merci !");
267                     setContentValue(saveState->insertUpdate(m_tableName, m_ioContent), "ID");
268                     emit this->clearAll();
269                 });
270             });
271             saveState->addTransition(saveState, SIGNAL(next()),final);
272         }
273     } else {
274         if(genPreviousState) {
275             qDebug() << "next transition between " << genPreviousState->toString() << " and " << nextState;
276             genPreviousState->addTransition(genPreviousState, SIGNAL(next()), nextState);
277         }
278         if(fsmPreviousState) {
279             qDebug() << "next transition between " << fsmPreviousState->toString() << " and " << nextState;
280             fsmPreviousState->addTransition(fsmPreviousState, SIGNAL(next()), nextState);
281         }
282     }
283     if(genPreviousState) {
284         /*à faire au moment de l'entrée dans l'état previousState*/
285         connect(genPreviousState, &QAbstractState::entered, [=]() {
286             connect(this, &SH_InOutStateMachine::replaceInput, [=](QString field) {
287                 /*après avoir demandé à revenir sur un état précédent, on attend la fin de l'état actuel puis on retourne à l'historique de l'état désiré; celui-ci fini, on passe à l'état qui aurait du suivre celui pendant lequel on a demandé à revenir sur un état précédent*/
288                 QHistoryState* hState = historyValue(field);
289                 if(hState) { /*si l'historique existe (on a déjà quitté l'état voulu)*/
290                     hState->parentState()->addTransition(hState->parentState(), SIGNAL(next()), nextState);
291                     genPreviousState->addTransition(genPreviousState, SIGNAL(next()), hState);
292                 }
293             });
294         });
295     }
296 }
.fi
.SS "void SH_InOutStateMachine::addIOState (\fBSH_InOutState\fP *state, QStringfield)\fC [slot]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 110 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_ConfirmationState::confirmInput(), SH_InOutState::display(), SH_InOutStateMachine::displayCalendar(), SH_InOutStateMachine::displayFileDialog(), SH_InOutState::output(), SH_InOutState::rawInput(), SH_InOutStateMachine::receiveInput(), SH_InOutState::resendInput(), SH_InOutStateMachine::resendText(), SH_InOutState::sendOutput(), SH_InOutStateMachine::sendText(), SH_InOutStateMachine::setContentValue(), SH_InOutState::setInput(), SH_InOutStateMachine::setIOStateHistory(), SH_InOutStateMachine::validateInput(), et SH_InOutState::visibility()\&.
.PP
Référencé par SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), SH_ClientCreationStateMachine::SH_ClientCreationStateMachine(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.PP
.nf
111 {
112     /*à faire au moment de l'entrée dans l'état state*/
113     connect(state, &QState::entered, [=]() {
114         qDebug() << "entered !";
115         state->display(true);
116         connect(this, &SH_InOutStateMachine::receiveInput, state, &SH_InOutState::setInput); /* la réception d'une valeur entraîne son enregistrement comme entrée de l'utilisateur auprès de l'état*/
117         connect(this, &SH_InOutStateMachine::receiveInput, [=](QString in){ qDebug() << "hello world !"; state->setInput(in);}); /* la réception d'une valeur entraîne son enregistrement comme entrée de l'utilisateur auprès de l'état*/
118         connect(state, &SH_InOutState::sendOutput, [=](QVariant out) {qDebug() << "connected !"; emit this->sendText(out\&.toString(), false);});
119         connect(state, &SH_InOutState::resendInput, [=](QVariant in) {emit this->resendText(in\&.toString(), true);});
120         if(state->visibility()) {
121             state->sendOutput(QVariant(state->output()));
122         } else {
123             qDebug() << "invisible";
124         }
125     });
126     SH_ValidationState *validationState = qobject_cast<SH_ValidationState*>(state);
127     if(validationState) {
128         /*à faire au moment de l'entrée dans l'état state*/
129         connect(validationState, &QState::entered, [=]() {
130             connect(this, &SH_InOutStateMachine::validateInput, validationState, &SH_ValidationState::confirmInput);
131         });
132     }
133     SH_ConfirmationState *confirmationState = qobject_cast<SH_ConfirmationState*>(state);
134     if(confirmationState) {
135         /*à faire au moment de l'entrée dans l'état state*/
136         connect(confirmationState, &QState::entered, [=]() {
137             connect(this, &SH_InOutStateMachine::validateInput, confirmationState, &SH_ConfirmationState::confirmInput);
138         });
139     }
140     SH_DateQuestionState *dateState = qobject_cast<SH_DateQuestionState*>(state);
141     if(dateState) {
142         /*à faire au moment de l'entrée dans l'état state*/
143         connect(dateState, &QState::entered, this, &SH_InOutStateMachine::displayCalendar);
144     }
145     SH_FileSelectionState *fileState = qobject_cast<SH_FileSelectionState*>(state);
146     if(fileState) {
147         /*à faire au moment de l'entrée dans l'état state*/
148         connect(fileState, &QState::entered, this, &SH_InOutStateMachine::displayFileDialog);
149     }
150     /*à faire au moment de la sortie de l'état state*/
151     connect(state, &QState::exited, [=]() {
152         qDebug() << "exited !";
153         if(!field\&.isEmpty()) {
154             setContentValue(state->rawInput(), field);
155             /*gestion de l'historique des états pour pouvoir revenir à l'état state après l'avoir quitté*/
156             QHistoryState* hState = new QHistoryState(state);
157             setIOStateHistory(hState, field);
158         }
159         state->disconnect(this); /*plus aucune action sur l'état ne pourra être provoquée par la machine*/
160     });
161 
162 
163     QAbstractState* astate = qobject_cast<QAbstractState *>(state);
164     if(astate) {
165         addState(astate);
166     }
167 }
.fi
.SS "void SH_InOutStateMachine::addIOStateMachine (\fBSH_InOutStateMachine\fP *fsm)\fC [slot]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 175 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::cancelReplacement(), SH_InOutStateMachine::confirmInput(), SH_InOutStateMachine::displayCalendar(), SH_InOutStateMachine::receiveInput(), SH_InOutStateMachine::replaceInput(), SH_InOutStateMachine::resendText(), SH_InOutStateMachine::sendText(), et SH_InOutStateMachine::validateInput()\&.
.PP
Référencé par SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.PP
.nf
176 {
177     /*à faire au moment de l'entrée dans la machine d'état fsm*/
178     connect(fsm, &QState::entered, [=]() {
179         connect(this, &SH_InOutStateMachine::receiveInput, fsm, &SH_InOutStateMachine::receiveInput);
180         connect(this, &SH_InOutStateMachine::sendText, fsm, &SH_InOutStateMachine::sendText);
181         connect(this, &SH_InOutStateMachine::resendText, fsm, &SH_InOutStateMachine::resendText);
182         connect(this, &SH_InOutStateMachine::confirmInput, fsm, &SH_InOutStateMachine::confirmInput);
183         connect(this, &SH_InOutStateMachine::validateInput, fsm, &SH_InOutStateMachine::validateInput);
184         connect(this, &SH_InOutStateMachine::replaceInput, fsm, &SH_InOutStateMachine::replaceInput);
185         connect(this, &SH_InOutStateMachine::cancelReplacement, fsm, &SH_InOutStateMachine::cancelReplacement);
186         connect(this, &SH_InOutStateMachine::displayCalendar, fsm, &SH_InOutStateMachine::displayCalendar);
187     });
188     /*à faire au moment de la sortie de la machine d'état fsm*/
189     connect(fsm, &QState::exited, [=]() {
190         fsm->disconnect(this); /*plus aucune action sur la machine d'état fille ne pourra être provoquée par la machine mère*/
191     });
192 
193 }
.fi
.SS "void SH_InOutStateMachine::cancelReplacement ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOStateMachine(), et SH_ApplicationCore::cancelReplacement()\&.
.SS "void SH_InOutStateMachine::clearAll ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addChildrenNextTransition(), et SH_ApplicationCore::connectRunningThread()\&.
.SS "void SH_InOutStateMachine::confirmInput ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOStateMachine(), SH_ApplicationCore::receiveConfirmation(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "void SH_InOutStateMachine::displayCalendar ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addIOStateMachine(), et SH_ApplicationCore::connectRunningThread()\&.
.SS "void SH_InOutStateMachine::displayFileDialog ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState()\&.
.SS "QVariant SH_InOutStateMachine::getContentValue (QStringfield)\fC [inherited]\fP"

.PP
Définition à la ligne 65 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioContent\&.
.PP
Référencé par SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ClientCreationStateMachine::SH_ClientCreationStateMachine()\&.
.PP
.nf
66 {
67     return m_ioContent\&.value(field);
68 }
.fi
.SS "QHistoryState * SH_InOutStateMachine::historyValue (QStringfield)\fC [inherited]\fP"

.PP
Définition à la ligne 238 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioStatesHistory\&.
.PP
Référencé par Sh_LoopingInOutStateMachine::addChildrenNextTransition(), et SH_InOutStateMachine::addChildrenNextTransition()\&.
.PP
.nf
239 {
240     return m_ioStatesHistory\&.value(field);
241 }
.fi
.SS "QVariantMap SH_InOutStateMachine::ioContent () const\fC [inherited]\fP"

.PP
Définition à la ligne 43 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioContent\&.
.PP
Référencé par SH_InOutStateMachine::setIOcontent()\&.
.PP
.nf
44 {
45     return m_ioContent;
46 }
.fi
.SS "QMap< QString, QHistoryState * > SH_InOutStateMachine::ioStatesHistory () const\fC [protected]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 202 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioStatesHistory\&.
.PP
Référencé par SH_InOutStateMachine::setIOStatesHistory()\&.
.PP
.nf
203 {
204     return m_ioStatesHistory;
205 }
.fi
.SS "void SH_InOutStateMachine::next ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par Sh_LoopingInOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addChildrenNextTransition(), SH_AddressCreationStateMachine(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.SS "void SH_InOutStateMachine::receiveInput (QStringinput)\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addIOStateMachine(), SH_ApplicationCore::receiveInput(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SS "void SH_InOutStateMachine::replaceInput (QStringfield)\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par Sh_LoopingInOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addIOStateMachine(), et SH_ApplicationCore::replaceInput()\&.
.SS "void SH_InOutStateMachine::resendText (QStringtext, booleditable = \fCfalse\fP)\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addIOStateMachine(), et SH_ApplicationCore::connectRunningThread()\&.
.SS "void SH_InOutStateMachine::sendText (QStringtext, booleditable = \fCfalse\fP)\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addIOStateMachine(), et SH_ApplicationCore::connectRunningThread()\&.
.SS "void SH_InOutStateMachine::setContentValue (QVariantcontent, QStringfield)\fC [slot]\fP, \fC [inherited]\fP"

.PP
Définition à la ligne 99 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioContent\&.
.PP
Référencé par Sh_LoopingInOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addIOState(), SH_ApplicationCore::launchBillThread(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_ClientCreationStateMachine::SH_ClientCreationStateMachine()\&.
.PP
.nf
100 {
101     m_ioContent\&.insert(field, content);
102 }
.fi
.SS "void SH_InOutStateMachine::setIOcontent (const QVariantMap &ioContent)\fC [inherited]\fP"

.PP
Définition à la ligne 54 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::ioContent(), et SH_InOutStateMachine::m_ioContent\&.
.PP
.nf
55 {
56     m_ioContent = ioContent;
57 }
.fi
.SS "void SH_InOutStateMachine::setIOStateHistory (QHistoryState *state, QStringfield)\fC [inherited]\fP"

.PP
Définition à la ligne 226 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_ioStatesHistory\&.
.PP
Référencé par SH_InOutStateMachine::addIOState()\&.
.PP
.nf
227 {
228     m_ioStatesHistory\&.insert(field, state); /*remplacement si plusieurs fois*/
229 }
.fi
.SS "void SH_InOutStateMachine::setTableName (const QString &tableName)\fC [inherited]\fP"

.PP
Définition à la ligne 87 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_tableName, et SH_InOutStateMachine::tableName()\&.
.PP
.nf
88 {
89     m_tableName = tableName;
90 }
.fi
.SS "QString SH_InOutStateMachine::tableName () const\fC [inherited]\fP"

.PP
Définition à la ligne 76 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_InOutStateMachine::m_tableName\&.
.PP
Référencé par SH_InOutStateMachine::setTableName()\&.
.PP
.nf
77 {
78     return m_tableName;
79 }
.fi
.SS "QString SH_InOutStateMachine::toString ()\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Réimplémentée à partir de \fBSH_NamedObject\fP\&.
.PP
Définition à la ligne 26 du fichier SH_IOStateMachine\&.cpp\&.
.PP
Références SH_NamedObject::toString(), et SH_GenericState::toString()\&.
.PP
Référencé par Sh_LoopingInOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addChildrenNextTransition(), SH_ApplicationCore::launchBillingsThread(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_GenericState::toString()\&.
.PP
.nf
27 {
28     QObject* parent = this->parent();
29     SH_GenericState* par = qobject_cast<SH_GenericState *>(parent);
30     if(par) {
31         return SH_NamedObject::toString()+ " [descending from "+par->toString()+"] ";
32     } else {
33         return SH_NamedObject::toString();
34     }
35 }
.fi
.SS "void SH_InOutStateMachine::validateInput ()\fC [signal]\fP, \fC [inherited]\fP"

.PP
Référencé par SH_InOutStateMachine::addIOState(), SH_InOutStateMachine::addIOStateMachine(), SH_ApplicationCore::receiveValidation(), et SH_ServiceCharging::SH_ServiceCharging()\&.
.SH "Documentation des données membres"
.PP 
.SS "QVariantMap SH_InOutStateMachine::m_ioContent\fC [protected]\fP, \fC [inherited]\fP"

.PP
m_ioContent 
.PP
Définition à la ligne 209 du fichier SH_IOStateMachine\&.h\&.
.PP
Référencé par Sh_LoopingInOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::getContentValue(), SH_InOutStateMachine::ioContent(), SH_InOutStateMachine::setContentValue(), SH_InOutStateMachine::setIOcontent(), et SH_BillingCreationStateMachine::SH_BillingCreationStateMachine()\&.
.SS "QMap<QString, QHistoryState*> SH_InOutStateMachine::m_ioStatesHistory\fC [protected]\fP, \fC [inherited]\fP"

.PP
m_ioStatesHistory 
.PP
Définition à la ligne 217 du fichier SH_IOStateMachine\&.h\&.
.PP
Référencé par SH_InOutStateMachine::historyValue(), SH_InOutStateMachine::ioStatesHistory(), SH_InOutStateMachine::setIOStateHistory(), et SH_InOutStateMachine::setIOStatesHistory()\&.
.SS "QString SH_InOutStateMachine::m_tableName\fC [protected]\fP, \fC [inherited]\fP"

.PP
m_tableName 
.PP
Définition à la ligne 213 du fichier SH_IOStateMachine\&.h\&.
.PP
Référencé par Sh_LoopingInOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::addChildrenNextTransition(), SH_InOutStateMachine::setTableName(), SH_BillingCreationStateMachine::SH_BillingCreationStateMachine(), et SH_InOutStateMachine::tableName()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
