<!-- HTML header for doxygen 1.8.4-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.4"/>
<title>PreCheck:  Fichier source de /home/tiff/Stage-IUT/app/simplhotel/hotel-precheck/libs/qt-signal-tools/README.md</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen-extra-stylesheets.css" rel="stylesheet" type="text/css"/>
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">PreCheck
   &#160;<span id="projectnumber">0.4</span>
   </div>
   <div id="projectbrief">Logiciel open-source de main-courante pour une réception                                                 d&#39;hôtel à écran tactile, permettant l&#39;impression de                                                 factures pré-check et la gestion d&#39;une archive client</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Généré par Doxygen 1.8.4 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Recherche');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Page&#160;principale</span></a></li>
      <li><a href="pages.xhtml"><span>Pages&#160;associées</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Fichiers</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Recherche" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>Liste&#160;des&#160;fichiers</span></a></li>
      <li><a href="globals.xhtml"><span>Membres&#160;de&#160;fichier</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('libs_2qt-signal-tools_2README_8md.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>Tout</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Fichiers</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Fonctions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Énumérations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Valeurs énumérées</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Propriétés</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">/home/tiff/Stage-IUT/app/simplhotel/hotel-precheck/libs/qt-signal-tools/README.md</div>  </div>
</div><!--header-->
<div class="contents">
<a href="libs_2qt-signal-tools_2README_8md.xhtml">Aller à la documentation de ce fichier.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor"># Qt Signal Tools</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;qt-signal-tools is a collection of utility classes related to signal and slots in Qt.  It includes:</div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; * QtCallback - Package up a receiver and slot arguments into an <span class="keywordtype">object</span> <span class="keywordflow">for</span> invoking later.</div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160; * QtSignalForwarder - Connect signals and events from objects to QtCallback or arbitrary functions.</div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160; * QtMetacallAdapter - Low-level <span class="keyword">interface </span>for calling a function using a list of QGenericArgument() arguments.</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160; * safe_bind() - Create a wrapper around a method call which does nothing and returns a <span class="keywordflow">default</span> value <span class="keywordflow">if</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;  the <span class="keywordtype">object</span> is destroyed before the wrapper is called.</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;## Requirements</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;</div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160; * Qt 4.8 (could be adapted <span class="keywordflow">for</span> earlier Qt versions <span class="keywordflow">if</span> necessary)</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160; * The TR1 standard library (<span class="keywordflow">for</span> C++03 compilers) or the C++11 standard library</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;  (<span class="keywordflow">for</span> newer compilers when C++11 support is enabled).</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;## Classes</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">### QtCallback</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;QtCallback is a binder <span class="keyword">class </span>which provides a way to create callbacks that invoke a signal or slot</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;when invoked, using a mixture of pre-bound arguments and arguments passed to QtCallback::invoke().</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;Usage:</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;```cpp</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;QtCallback1&lt;int&gt; callback(myWidget, SLOT(someSlot(int,QString)));</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;callback.bind(42);</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">// invokes the MyWidget::someSlot() slot with arguments (42, &quot;Hello World&quot;)</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;callback.invoke(&quot;Hello World&quot;);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;void MyWidget::someSlot(int firstArg, const QString&amp; secondArg)</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;{</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;}</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;```</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="preprocessor">### QtSignalForwarder</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;QtSignalForwarder provides a way to invoke callbacks when an <span class="keywordtype">object</span> emits a signal or receives</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;a particular type of <span class="keyword">event</span>.  The callbacks can be signals and slots</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;(via `QtCallback`) or arbitrary functions <span class="keyword">using</span> `tr1::function`, `std::function`, `boost::function` or</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;a similar wrapper.</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;Qt 5 provides support <span class="keywordflow">for</span> connecting signals to arbitrary functions out of the box and to lambdas</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;when <span class="keyword">using</span> C++11.  QtSignalForwarder emulates <span class="keyword">this</span> <span class="keywordflow">for</span> Qt 4.</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;As well as being able to connect signals to functions that are not slots, <span class="keyword">this</span> also provides</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;a way to pass additional arguments to the receiver other than those from the signal <span class="keyword">using</span> `QtCallback::bind()`</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;or `std::tr1::bind()`.</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;Usage:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;Connecting a signal to a slot with pre-bound arguments:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;```cpp</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;MyObject receiver;</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;QPushButton button;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;QtSignalForwarder::connect(&amp;button, SIGNAL(clicked(<span class="keywordtype">bool</span>)),</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  QtCallback(&amp;receiver, SLOT(buttonClicked(<span class="keywordtype">int</span>))).bind(42));</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">// invokes MyObject::buttonClicked() slot with arguments (42)</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;button.click();</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;```</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;Connecting a signal to an arbitrary <span class="keyword">function</span>:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;```cpp</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">using namespace </span>std::tr1;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">using namespace </span>std::tr1::placeholders;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;SomeObject receiver;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;QLineEdit editor;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">// function which calls someMethod() with the first-argument fixed (42) and the</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">// second string argument from the signal</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;function&lt;void(int,QString)&gt; callback(bind(&amp;SomeObject::someMethod, &amp;receiver, 42, _1));</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;QtSignalForwarder::connect(&amp;editor, SIGNAL(textChanged(QString)), callback);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">// invokes SomeObject::someMethod(42, &quot;Hello World&quot;)</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;editor.setText(<span class="stringliteral">&quot;Hello World&quot;</span>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;```</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="preprocessor">### safe_bind()</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;Compared to <span class="keyword">using</span> Qt 4<span class="stringliteral">&#39;s normal signals and slots, a disadvantage of using `bind()` or `function` to</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="stringliteral">create a callback object which can be run later is that there is no automatically disconnection</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="stringliteral">if the object is destroyed.</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="stringliteral"></span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="stringliteral">As a solution, the `safe_bind()` function creates a wrapper around an object and a method call.  The</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="stringliteral">wrapper can then be called with the same arguments as the wrapped method.  When a call happens,</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="stringliteral">either the wrapped method is called with the provided arguments, or if the object has been destroyed,</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="stringliteral">nothing happens and a default value is returned.</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="stringliteral"></span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="stringliteral">The wrapper created by `safe_bind()` can be used with `bind()` and `function` and can be used together</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="stringliteral">with `QtSignalForwarder` to automatically &#39;</span>disconnect<span class="stringliteral">&#39; if the receiver is destroyed.</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="stringliteral"></span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="stringliteral">```cpp</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="stringliteral">QScopedPointer&lt;QLabel&gt; label(new QLabel);</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="stringliteral"></span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="stringliteral">// create a wrapper around label-&gt;setText() which can be run using</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="stringliteral">// setTextWrapper(text).</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="stringliteral">function&lt;void(QString)&gt; setTextWrapper = safe_bind(label.data(), &amp;QLabel::setText);</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="stringliteral"></span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="stringliteral">// create a wrapper around label-&gt;text() which either calls label-&gt;text() and returns</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="stringliteral">// the same result or returns an empty string if the label has been destroyed</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="stringliteral">function&lt;QString()&gt; getTextWrapper = safe_bind(label.data(), &amp;QLabel::text);</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="stringliteral"></span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="stringliteral">setTextWrapper(&quot;first update&quot;); // sets the label&#39;</span>s text to <span class="stringliteral">&quot;first update&quot;</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;qDebug() &lt;&lt; <span class="stringliteral">&quot;label text&quot;</span> &lt;&lt; getTextWrapper(); <span class="comment">// prints &quot;first update&quot;</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;label.reset(); <span class="comment">// destroy the label</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;setTextWrapper(<span class="stringliteral">&quot;second update&quot;</span>); <span class="comment">// does nothing, as the label has been destroyed</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;qDebug() &lt;&lt; <span class="stringliteral">&quot;label text&quot;</span> &lt;&lt; getTextWrapper(); <span class="comment">// prints an empty string</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;```</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">### QtMetacallAdapter</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;QtMetacallAdapter is a low-level wrapper around a <span class="keyword">function</span> or <span class="keyword">function</span> object (eg. `std::function`)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;which can be used to invoke the function with a list of QGenericArgument (created by the Q_ARG() macro)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;and introspect the function&#39;s argument types at runtime.</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">## License</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;qt-signal-tools is licensed under the BSD license.</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;## Related Projects &amp; Reading</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; * Qt Signal Adapters - Library <span class="keywordflow">for</span> connecting signals to Boost <span class="keyword">function</span> objects: http:<span class="comment">//sourceforge.net/projects/qtsignaladapter/</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160; * sigfwd - Library <span class="keywordflow">for</span> connecting signals to <span class="keyword">function</span> objects.  Uses Boost. https:<span class="comment">//bitbucket.org/edd/sigfwd/wiki/Home</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; * Qt 5 meta-<span class="keywordtype">object</span> system changes - http:<span class="comment">//blog.qt.digia.com/blog/2012/06/22/changes-to-the-meta-object-system-in-qt-5/</span></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- HTML footer for doxygen 1.8.4-->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="libs_2qt-signal-tools_2README_8md.xhtml">README.md</a></li>
    <li class="footer">Généré le Mardi Juillet 2 2013 13:26:23 pour PreCheck par
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.4 </li>
  </ul>
</div>
</body>
</html>
