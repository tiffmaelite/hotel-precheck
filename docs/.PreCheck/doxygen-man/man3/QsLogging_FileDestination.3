.TH "QsLogging::FileDestination" 3 "Jeudi Juin 20 2013" "Version 0.3" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QsLogging::FileDestination \- 
.PP
The \fBFileDestination\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <QsLogDestFile\&.h>\fP
.PP
Est dérivée de \fBQsLogging::Destination\fP\&.
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBFileDestination\fP (const QString &filePath, \fBRotationStrategyPtr\fP rotationStrategy)"
.br
.RI "\fI\fBFileDestination\fP\&. \fP"
.ti -1c
.RI "virtual bool \fBisValid\fP ()"
.br
.RI "\fIisValid \fP"
.ti -1c
.RI "virtual void \fBwrite\fP (const QString &message, \fBLevel\fP level)"
.br
.RI "\fIwrite \fP"
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "QFile \fBmFile\fP"
.br
.RI "\fImFile \fP"
.ti -1c
.RI "QTextStream \fBmOutputStream\fP"
.br
.RI "\fImOutputStream \fP"
.ti -1c
.RI "QSharedPointer< \fBRotationStrategy\fP > \fBmRotationStrategy\fP"
.br
.RI "\fImRotationStrategy \fP"
.in -1c
.SH "Description détaillée"
.PP 
The \fBFileDestination\fP class\&. 
.PP
Définition à la ligne 181 du fichier QsLogDestFile\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "QsLogging::FileDestination::FileDestination (const QString &filePath, \fBRotationStrategyPtr\fProtationStrategy)"

.PP
\fBFileDestination\fP\&. 
.PP
\fBParamètres:\fP
.RS 4
\fIfilePath\fP 
.br
\fIrotationStrategy\fP \fBQsLogging::FileDestination::FileDestination\fP 
.RE
.PP

.PP
Définition à la ligne 145 du fichier QsLogDestFile\&.cpp\&.
.PP
Références mFile, mOutputStream, et mRotationStrategy\&.
.PP
.nf
146     : mRotationStrategy(rotationStrategy)
147 {
148     mFile\&.setFileName(filePath);
149     if (!mFile\&.open(QFile::WriteOnly | QFile::Text | mRotationStrategy->recommendedOpenModeFlag()))
150         std::cerr << "QsLog: could not open log file " << qPrintable(filePath);
151     mOutputStream\&.setDevice(&mFile);
152     mOutputStream\&.setCodec(QTextCodec::codecForName("UTF-8"));
153 
154     mRotationStrategy->setInitialInfo(mFile);
155 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "bool QsLogging::FileDestination::isValid ()\fC [virtual]\fP"

.PP
isValid 
.PP
\fBRenvoie:\fP
.RS 4

.RE
.PP
\fBQsLogging::FileDestination::isValid\fP 
.PP
Implémente \fBQsLogging::Destination\fP\&.
.PP
Définition à la ligne 178 du fichier QsLogDestFile\&.cpp\&.
.PP
.nf
179 {
180     return mFile\&.isOpen();
181 }
.fi
.SS "void QsLogging::FileDestination::write (const QString &message, \fBLevel\fPlevel)\fC [virtual]\fP"

.PP
write 
.PP
\fBParamètres:\fP
.RS 4
\fImessage\fP 
.br
\fIlevel\fP \fBQsLogging::FileDestination::write\fP 
.RE
.PP

.PP
Implémente \fBQsLogging::Destination\fP\&.
.PP
Définition à la ligne 159 du fichier QsLogDestFile\&.cpp\&.
.PP
.nf
160 {
161     mRotationStrategy->includeMessageInCalculation(message);
162     if (mRotationStrategy->shouldRotate()) {
163         mOutputStream\&.setDevice(NULL);
164         mFile\&.close();
165         mRotationStrategy->rotate();
166         if (!mFile\&.open(QFile::WriteOnly | QFile::Text | mRotationStrategy->recommendedOpenModeFlag()))
167             std::cerr << "QsLog: could not reopen log file " << qPrintable(mFile\&.fileName());
168         mRotationStrategy->setInitialInfo(mFile);
169         mOutputStream\&.setDevice(&mFile);
170     }
171 
172     mOutputStream << message << endl;
173     mOutputStream\&.flush();
174 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "QFile QsLogging::FileDestination::mFile\fC [private]\fP"

.PP
mFile 
.PP
Définition à la ligne 206 du fichier QsLogDestFile\&.h\&.
.PP
Référencé par FileDestination()\&.
.SS "QTextStream QsLogging::FileDestination::mOutputStream\fC [private]\fP"

.PP
mOutputStream 
.PP
Définition à la ligne 210 du fichier QsLogDestFile\&.h\&.
.PP
Référencé par FileDestination()\&.
.SS "QSharedPointer<\fBRotationStrategy\fP> QsLogging::FileDestination::mRotationStrategy\fC [private]\fP"

.PP
mRotationStrategy 
.PP
Définition à la ligne 214 du fichier QsLogDestFile\&.h\&.
.PP
Référencé par FileDestination()\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
