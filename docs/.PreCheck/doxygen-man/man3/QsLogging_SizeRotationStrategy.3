.TH "QsLogging::SizeRotationStrategy" 3 "Jeudi Juin 20 2013" "Version 0.3" "PreCheck" \" -*- nroff -*-
.ad l
.nh
.SH NAME
QsLogging::SizeRotationStrategy \- 
.PP
The \fBSizeRotationStrategy\fP class\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <QsLogDestFile\&.h>\fP
.PP
Est dérivée de \fBQsLogging::RotationStrategy\fP\&.
.SS "Fonctions membres publiques"

.in +1c
.ti -1c
.RI "\fBSizeRotationStrategy\fP ()"
.br
.RI "\fI\fBSizeRotationStrategy\fP\&. \fP"
.ti -1c
.RI "virtual void \fBincludeMessageInCalculation\fP (const QString &message)"
.br
.RI "\fIincludeMessageInCalculation \fP"
.ti -1c
.RI "virtual QIODevice::OpenMode \fBrecommendedOpenModeFlag\fP ()"
.br
.RI "\fIrecommendedOpenModeFlag \fP"
.ti -1c
.RI "virtual void \fBrotate\fP ()"
.br
.RI "\fIrotate \fP"
.ti -1c
.RI "void \fBsetBackupCount\fP (int backups)"
.br
.RI "\fIsetBackupCount \fP"
.ti -1c
.RI "virtual void \fBsetInitialInfo\fP (const QFile &file)"
.br
.RI "\fIsetInitialInfo \fP"
.ti -1c
.RI "void \fBsetMaximumSizeInBytes\fP (qint64 size)"
.br
.RI "\fIsetMaximumSizeInBytes \fP"
.ti -1c
.RI "virtual bool \fBshouldRotate\fP ()"
.br
.RI "\fIshouldRotate \fP"
.in -1c
.SS "Attributs publics statiques"

.in +1c
.ti -1c
.RI "static const int \fBMaxBackupCount\fP = 10"
.br
.RI "\fIMaxBackupCount\&. \fP"
.in -1c
.SS "Attributs privés"

.in +1c
.ti -1c
.RI "int \fBmBackupsCount\fP"
.br
.RI "\fImBackupsCount \fP"
.ti -1c
.RI "qint64 \fBmCurrentSizeInBytes\fP"
.br
.RI "\fImCurrentSizeInBytes \fP"
.ti -1c
.RI "QString \fBmFileName\fP"
.br
.RI "\fImFileName \fP"
.ti -1c
.RI "qint64 \fBmMaxSizeInBytes\fP"
.br
.RI "\fImMaxSizeInBytes \fP"
.in -1c
.SH "Description détaillée"
.PP 
The \fBSizeRotationStrategy\fP class\&. 
.PP
Définition à la ligne 108 du fichier QsLogDestFile\&.h\&.
.SH "Documentation des constructeurs et destructeur"
.PP 
.SS "QsLogging::SizeRotationStrategy::SizeRotationStrategy ()"

.PP
\fBSizeRotationStrategy\fP\&. \fBQsLogging::SizeRotationStrategy::SizeRotationStrategy\fP 
.PP
Définition à la ligne 44 du fichier QsLogDestFile\&.cpp\&.
.PP
.nf
45     : mCurrentSizeInBytes(0)
46     , mMaxSizeInBytes(0)
47     , mBackupsCount(0)
48 {
49 }
.fi
.SH "Documentation des fonctions membres"
.PP 
.SS "void QsLogging::SizeRotationStrategy::includeMessageInCalculation (const QString &message)\fC [virtual]\fP"

.PP
includeMessageInCalculation 
.PP
\fBParamètres:\fP
.RS 4
\fImessage\fP \fBQsLogging::SizeRotationStrategy::includeMessageInCalculation\fP 
.RE
.PP

.PP
Implémente \fBQsLogging::RotationStrategy\fP\&.
.PP
Définition à la ligne 61 du fichier QsLogDestFile\&.cpp\&.
.PP
.nf
62 {
63     mCurrentSizeInBytes += message\&.toUtf8()\&.size();
64 }
.fi
.SS "QIODevice::OpenMode QsLogging::SizeRotationStrategy::recommendedOpenModeFlag ()\fC [virtual]\fP"

.PP
recommendedOpenModeFlag 
.PP
\fBRenvoie:\fP
.RS 4

.RE
.PP
\fBQsLogging::SizeRotationStrategy::recommendedOpenModeFlag\fP 
.PP
Implémente \fBQsLogging::RotationStrategy\fP\&.
.PP
Définition à la ligne 121 du fichier QsLogDestFile\&.cpp\&.
.PP
.nf
122 {
123     return QIODevice::Append;
124 }
.fi
.SS "void QsLogging::SizeRotationStrategy::rotate ()\fC [virtual]\fP"

.PP
rotate \fBQsLogging::SizeRotationStrategy::rotate\fP 
.PP
Implémente \fBQsLogging::RotationStrategy\fP\&.
.PP
Définition à la ligne 78 du fichier QsLogDestFile\&.cpp\&.
.PP
.nf
79 {
80     if (!mBackupsCount) {
81         if (!QFile::remove(mFileName))
82             std::cerr << "QsLog: backup delete failed " << qPrintable(mFileName);
83         return;
84     }
85 
86      /* 1\&. find the last existing backup than can be shifted up*/
87      const QString logNamePattern = mFileName + QString::fromUtf8("\&.%1");
88      int lastExistingBackupIndex = 0;
89      for (int i = 1;i <= mBackupsCount;++i) {
90          const QString backupFileName = logNamePattern\&.arg(i);
91          if (QFile::exists(backupFileName))
92              lastExistingBackupIndex = qMin(i, mBackupsCount - 1);
93          else
94              break;
95      }
96 
97      /* 2\&. shift up*/
98      for (int i = lastExistingBackupIndex;i >= 1;--i) {
99          const QString oldName = logNamePattern\&.arg(i);
100          const QString newName = logNamePattern\&.arg(i + 1);
101          QFile::remove(newName);
102          const bool renamed = QFile::rename(oldName, newName);
103          if (!renamed) {
104              std::cerr << "QsLog: could not rename backup " << qPrintable(oldName)
105                        << " to " << qPrintable(newName);
106          }
107      }
108 
109      /* 3\&. rename current log file*/
110      const QString newName = logNamePattern\&.arg(1);
111      if (QFile::exists(newName))
112          QFile::remove(newName);
113      if (!QFile::rename(mFileName, newName)) {
114          std::cerr << "QsLog: could not rename log " << qPrintable(mFileName)
115                    << " to " << qPrintable(newName);
116      }
117 }
.fi
.SS "void QsLogging::SizeRotationStrategy::setBackupCount (intbackups)"

.PP
setBackupCount 
.PP
\fBParamètres:\fP
.RS 4
\fIbackups\fP \fBQsLogging::SizeRotationStrategy::setBackupCount\fP 
.RE
.PP

.PP
Définition à la ligne 136 du fichier QsLogDestFile\&.cpp\&.
.PP
Références MaxBackupCount\&.
.PP
.nf
137 {
138     Q_ASSERT(backups >= 0);
139     mBackupsCount = qMin(backups, SizeRotationStrategy::MaxBackupCount);
140 }
.fi
.SS "void QsLogging::SizeRotationStrategy::setInitialInfo (const QFile &file)\fC [virtual]\fP"

.PP
setInitialInfo 
.PP
\fBParamètres:\fP
.RS 4
\fIfile\fP \fBQsLogging::SizeRotationStrategy::setInitialInfo\fP 
.RE
.PP

.PP
Implémente \fBQsLogging::RotationStrategy\fP\&.
.PP
Définition à la ligne 53 du fichier QsLogDestFile\&.cpp\&.
.PP
.nf
54 {
55     mFileName = file\&.fileName();
56     mCurrentSizeInBytes = file\&.size();
57 }
.fi
.SS "void QsLogging::SizeRotationStrategy::setMaximumSizeInBytes (qint64size)"

.PP
setMaximumSizeInBytes 
.PP
\fBParamètres:\fP
.RS 4
\fIsize\fP \fBQsLogging::SizeRotationStrategy::setMaximumSizeInBytes\fP 
.RE
.PP

.PP
Définition à la ligne 128 du fichier QsLogDestFile\&.cpp\&.
.PP
.nf
129 {
130     Q_ASSERT(size >= 0);
131     mMaxSizeInBytes = size;
132 }
.fi
.SS "bool QsLogging::SizeRotationStrategy::shouldRotate ()\fC [virtual]\fP"

.PP
shouldRotate 
.PP
\fBRenvoie:\fP
.RS 4

.RE
.PP
\fBQsLogging::SizeRotationStrategy::shouldRotate\fP 
.PP
Implémente \fBQsLogging::RotationStrategy\fP\&.
.PP
Définition à la ligne 68 du fichier QsLogDestFile\&.cpp\&.
.PP
.nf
69 {
70     return mCurrentSizeInBytes > mMaxSizeInBytes;
71 }
.fi
.SH "Documentation des données membres"
.PP 
.SS "const int QsLogging::SizeRotationStrategy::MaxBackupCount = 10\fC [static]\fP"

.PP
MaxBackupCount\&. \fBQsLogging::SizeRotationStrategy::MaxBackupCount\fP 
.PP
Définition à la ligne 118 du fichier QsLogDestFile\&.h\&.
.PP
Référencé par setBackupCount()\&.
.SS "int QsLogging::SizeRotationStrategy::mBackupsCount\fC [private]\fP"

.PP
mBackupsCount 
.PP
Définition à la ligne 170 du fichier QsLogDestFile\&.h\&.
.SS "qint64 QsLogging::SizeRotationStrategy::mCurrentSizeInBytes\fC [private]\fP"

.PP
mCurrentSizeInBytes 
.PP
Définition à la ligne 162 du fichier QsLogDestFile\&.h\&.
.SS "QString QsLogging::SizeRotationStrategy::mFileName\fC [private]\fP"

.PP
mFileName 
.PP
Définition à la ligne 158 du fichier QsLogDestFile\&.h\&.
.SS "qint64 QsLogging::SizeRotationStrategy::mMaxSizeInBytes\fC [private]\fP"

.PP
mMaxSizeInBytes 
.PP
Définition à la ligne 166 du fichier QsLogDestFile\&.h\&.

.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour PreCheck à partir du code source\&.
